
STM32F4_HAL_IAP_TFTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d38  08010260  08010260  00020260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f98  08012f98  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012f98  08012f98  00022f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fa0  08012fa0  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fa0  08012fa0  00022fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fa4  08012fa4  00022fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000083b0  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  20008440  20008440  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030e6e  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000619b  00000000  00000000  00060f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  000670d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  00068680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000302f9  00000000  00000000  00069b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000252d3  00000000  00000000  00099e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebd6a  00000000  00000000  000bf12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001aae96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006128  00000000  00000000  001aaeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010248 	.word	0x08010248

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08010248 	.word	0x08010248

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock();
 800058c:	f002 fa40 	bl	8002a10 <HAL_FLASH_Unlock>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;

  FlashAddress = StartSector;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */

  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 80005a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <FLASH_If_Erase+0x50>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d816      	bhi.n	80005d6 <FLASH_If_Erase+0x42>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]

    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = FLASH_SECTOR_5;
 80005b0:	2305      	movs	r3, #5
 80005b2:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]

    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 80005bc:	f107 020c 	add.w	r2, r7, #12
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fb84 	bl	8002cd4 <HAL_FLASHEx_Erase>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d003      	beq.n	80005da <FLASH_If_Erase+0x46>
      return (1);
 80005d2:	2301      	movs	r3, #1
 80005d4:	e002      	b.n	80005dc <FLASH_If_Erase+0x48>
  }
  else
  {
    return (1);
 80005d6:	2301      	movs	r3, #1
 80005d8:	e000      	b.n	80005dc <FLASH_If_Erase+0x48>
  }

  return (0);
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	0811f800 	.word	0x0811f800

080005e8 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	4613      	mov	r3, r2
 80005f4:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e026      	b.n	800064e <FLASH_If_Write+0x66>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	2002      	movs	r0, #2
 8000616:	f002 f9a7 	bl	8002968 <HAL_FLASH_Program>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d111      	bne.n	8000644 <FLASH_If_Write+0x5c>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	440b      	add	r3, r1
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d001      	beq.n	8000638 <FLASH_If_Write+0x50>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 8000634:	2302      	movs	r3, #2
 8000636:	e014      	b.n	8000662 <FLASH_If_Write+0x7a>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	1d1a      	adds	r2, r3, #4
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e001      	b.n	8000648 <FLASH_If_Write+0x60>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 8000644:	2301      	movs	r3, #1
 8000646:	e00c      	b.n	8000662 <FLASH_If_Write+0x7a>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	429a      	cmp	r2, r3
 8000654:	d204      	bcs.n	8000660 <FLASH_If_Write+0x78>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <FLASH_If_Write+0x84>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d9cf      	bls.n	8000600 <FLASH_If_Write+0x18>
    }
  }

  return (0);
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	080ffffb 	.word	0x080ffffb

08000670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <MX_GPIO_Init+0x10c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a3b      	ldr	r2, [pc, #236]	; (800077c <MX_GPIO_Init+0x10c>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <MX_GPIO_Init+0x10c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	4b35      	ldr	r3, [pc, #212]	; (800077c <MX_GPIO_Init+0x10c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a34      	ldr	r2, [pc, #208]	; (800077c <MX_GPIO_Init+0x10c>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b32      	ldr	r3, [pc, #200]	; (800077c <MX_GPIO_Init+0x10c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <MX_GPIO_Init+0x10c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a2d      	ldr	r2, [pc, #180]	; (800077c <MX_GPIO_Init+0x10c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_GPIO_Init+0x10c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_GPIO_Init+0x10c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a26      	ldr	r2, [pc, #152]	; (800077c <MX_GPIO_Init+0x10c>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0x10c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_GPIO_Init+0x10c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MX_GPIO_Init+0x10c>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0x10c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_GPIO_Init+0x10c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_GPIO_Init+0x10c>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0x10c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f244 0181 	movw	r1, #16513	; 0x4081
 8000734:	4812      	ldr	r0, [pc, #72]	; (8000780 <MX_GPIO_Init+0x110>)
 8000736:	f002 fdd1 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000740:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_GPIO_Init+0x114>)
 8000752:	f002 fbff 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000756:	f244 0381 	movw	r3, #16513	; 0x4081
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0x110>)
 8000770:	f002 fbf0 	bl	8002f54 <HAL_GPIO_Init>

}
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020400 	.word	0x40020400
 8000784:	40020800 	.word	0x40020800

08000788 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//printf support
int __io_putchar (int ch)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (const uint8_t*)&ch, 1, 10);
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	230a      	movs	r3, #10
 8000794:	2201      	movs	r2, #1
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <__io_putchar+0x20>)
 8000798:	f003 fa95 	bl	8003cc6 <HAL_UART_Transmit>
	return ch;
 800079c:	687b      	ldr	r3, [r7, #4]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000024c 	.word	0x2000024c

080007ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007b2:	f000 fe89 	bl	80014c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007b6:	f000 f853 	bl	8000860 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ba:	f7ff ff59 	bl	8000670 <MX_GPIO_Init>
	MX_LWIP_Init();
 80007be:	f003 fd4b 	bl	8004258 <MX_LWIP_Init>
	MX_USART3_UART_Init();
 80007c2:	f000 fc85 	bl	80010d0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	// check user button is pushed
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0x00)
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <main+0x90>)
 80007cc:	f002 fd6e 	bl	80032ac <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d11a      	bne.n	800080c <main+0x60>
	{
		/* Check if valid stack address (RAM address) then jump to user application */
		if (((*(__IO uint32_t*)USER_FLASH_FIRST_PAGE_ADDRESS) & 0x2FFF0000 ) == 0x20030000)
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <main+0x94>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <main+0x98>)
 80007dc:	4013      	ands	r3, r2
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <main+0x9c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d113      	bne.n	800080c <main+0x60>
		{
			/* Jump to user application */
			JumpAddress = *(__IO uint32_t*) (USER_FLASH_FIRST_PAGE_ADDRESS + 4);
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <main+0xa0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <main+0xa4>)
 80007ea:	6013      	str	r3, [r2, #0]
			Jump_To_Application = (pFunction) JumpAddress;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <main+0xa4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <main+0xa8>)
 80007f4:	601a      	str	r2, [r3, #0]
			/* Initialize user application's Stack Pointer */
			__set_MSP(*(__IO uint32_t*) USER_FLASH_FIRST_PAGE_ADDRESS);
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <main+0x94>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f383 8808 	msr	MSP, r3
}
 8000802:	bf00      	nop
			Jump_To_Application();
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0xa8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4798      	blx	r3
			/* do nothing */
			while(1);
 800080a:	e7fe      	b.n	800080a <main+0x5e>
		}
	}

	// start tftp server
	IAP_tftpd_init();
 800080c:	f000 fc2a 	bl	8001064 <IAP_tftpd_init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//handle packets
		MX_LWIP_Process();
 8000810:	f003 fe6e 	bl	80044f0 <MX_LWIP_Process>

		//toggle blue led
		if(0xFFFF == led_blink_cnt) {
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <main+0xac>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <main+0x82>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000820:	2101      	movs	r1, #1
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <main+0xb0>)
 8000824:	f002 fd73 	bl	800330e <HAL_GPIO_TogglePin>
			led_blink_cnt = 0;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <main+0xac>)
 800082a:	2200      	movs	r2, #0
 800082c:	801a      	strh	r2, [r3, #0]
		}

		led_blink_cnt++;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <main+0xac>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <main+0xac>)
 8000838:	801a      	strh	r2, [r3, #0]
		MX_LWIP_Process();
 800083a:	e7e9      	b.n	8000810 <main+0x64>
 800083c:	40020800 	.word	0x40020800
 8000840:	08020000 	.word	0x08020000
 8000844:	2fff0000 	.word	0x2fff0000
 8000848:	20030000 	.word	0x20030000
 800084c:	08020004 	.word	0x08020004
 8000850:	20000244 	.word	0x20000244
 8000854:	20000248 	.word	0x20000248
 8000858:	200000ac 	.word	0x200000ac
 800085c:	40020400 	.word	0x40020400

08000860 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	; 0x50
 8000864:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00e fa94 	bl	800ed9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a27      	ldr	r2, [pc, #156]	; (800092c <SystemClock_Config+0xcc>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <SystemClock_Config+0xcc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <SystemClock_Config+0xd0>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <SystemClock_Config+0xd0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80008d4:	23a8      	movs	r3, #168	; 0xa8
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008dc:	2307      	movs	r3, #7
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fd2d 	bl	8003344 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80008f0:	f000 f820 	bl	8000934 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000904:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2105      	movs	r1, #5
 8000912:	4618      	mov	r0, r3
 8000914:	f002 ff8e 	bl	8003834 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800091e:	f000 f809 	bl	8000934 <Error_Handler>
	}
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	; 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 fdc6 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	return 1;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_kill>:

int _kill(int pid, int sig)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <_kill+0x20>)
 8000a00:	2216      	movs	r2, #22
 8000a02:	601a      	str	r2, [r3, #0]
	return -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20008430 	.word	0x20008430

08000a18 <_exit>:

void _exit (int status)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ffe5 	bl	80009f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a2a:	e7fe      	b.n	8000a2a <_exit+0x12>

08000a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3e:	f3af 8000 	nop.w
 8000a42:	4601      	mov	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
	}

return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe81 	bl	8000788 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf1      	blt.n	8000a78 <_write+0x12>
	}
	return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d205      	bcs.n	8000b44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <_sbrk+0x6c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20030000 	.word	0x20030000
 8000b68:	00001000 	.word	0x00001000
 8000b6c:	200000b0 	.word	0x200000b0
 8000b70:	20008440 	.word	0x20008440
 8000b74:	20008430 	.word	0x20008430

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <IAP_tftp_decode_op>:
  * @brief Returns the TFTP opcode
  * @param buf: pointer on the TFTP packet
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	781b      	ldrb	r3, [r3, #0]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <IAP_tftp_extract_block>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 f85d 	bl	8004c88 <lwip_htons>
 8000bce:	4603      	mov	r3, r0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <IAP_tftp_set_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3301      	adds	r3, #1
 8000bee:	78fa      	ldrb	r2, [r7, #3]
 8000bf0:	701a      	strb	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <IAP_tftp_set_block>:
  * @param packet: pointer on the TFTP packet
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 8000bfe:	b590      	push	{r4, r7, lr}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1c9c      	adds	r4, r3, #2
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 f837 	bl	8004c88 <lwip_htons>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	8023      	strh	r3, [r4, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd90      	pop	{r4, r7, pc}
	...

08000c28 <IAP_tftp_send_ack_packet>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00e f8ac 	bl	800ed9c <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffc4 	bl	8000bd8 <IAP_tftp_set_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffcf 	bl	8000bfe <IAP_tftp_set_block>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 8000c60:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000c64:	2104      	movs	r1, #4
 8000c66:	2036      	movs	r0, #54	; 0x36
 8000c68:	f005 f888 	bl	8005d7c <pbuf_alloc>
 8000c6c:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <IAP_tftp_send_ack_packet+0x58>
  {
#ifdef USE_PRINTF
    printf("Can not allocate pbuf\n");
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <IAP_tftp_send_ack_packet+0x84>)
 8000c76:	f00e f91f 	bl	800eeb8 <puts>
#endif
    return ERR_MEM;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e011      	b.n	8000ca4 <IAP_tftp_send_ack_packet+0x7c>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	69f9      	ldr	r1, [r7, #28]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f00b fa59 	bl	800c148 <udp_sendto>
 8000c96:	4603      	mov	r3, r0
 8000c98:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 8000c9a:	69f8      	ldr	r0, [r7, #28]
 8000c9c:	f005 fb52 	bl	8006344 <pbuf_free>

  return err;
 8000ca0:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08010260 	.word	0x08010260

08000cb0 <IAP_wrq_recv_callback>:
  * @param  ip_addr: pointer on the receive IP_address structure
  * @param  port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	f107 040c 	add.w	r4, r7, #12
 8000cbc:	6020      	str	r0, [r4, #0]
 8000cbe:	f107 0008 	add.w	r0, r7, #8
 8000cc2:	6001      	str	r1, [r0, #0]
 8000cc4:	1d39      	adds	r1, r7, #4
 8000cc6:	600a      	str	r2, [r1, #0]
 8000cc8:	463a      	mov	r2, r7
 8000cca:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  uint32_t data_buffer[128];
  uint16_t count=0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e

#ifdef USE_PRINTF
  char message[40];
#endif

  if (pkt_buf->len != pkt_buf->tot_len)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	895a      	ldrh	r2, [r3, #10]
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	891b      	ldrh	r3, [r3, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d003      	beq.n	8000cf4 <IAP_wrq_recv_callback+0x44>
  {
#ifdef USE_PRINTF
    printf("Invalid data length\n");
 8000cec:	485d      	ldr	r0, [pc, #372]	; (8000e64 <IAP_wrq_recv_callback+0x1b4>)
 8000cee:	f00e f8e3 	bl	800eeb8 <puts>
#endif
    return;
 8000cf2:	e0b2      	b.n	8000e5a <IAP_wrq_recv_callback+0x1aa>
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	895b      	ldrh	r3, [r3, #10]
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d95a      	bls.n	8000db4 <IAP_wrq_recv_callback+0x104>
      (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff56 	bl	8000bb6 <IAP_tftp_extract_block>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d16:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d14b      	bne.n	8000db4 <IAP_wrq_recv_callback+0x104>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	895b      	ldrh	r3, [r3, #10]
 8000d22:	3b04      	subs	r3, #4
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d2a:	1d38      	adds	r0, r7, #4
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	6800      	ldr	r0, [r0, #0]
 8000d30:	f005 fd02 	bl	8006738 <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);

    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	895b      	ldrh	r3, [r3, #10]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <IAP_wrq_recv_callback+0x1b8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	3b04      	subs	r3, #4
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <IAP_wrq_recv_callback+0x1b8>)
 8000d46:	6013      	str	r3, [r2, #0]

    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	895b      	ldrh	r3, [r3, #10]
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da00      	bge.n	8000d56 <IAP_wrq_recv_callback+0xa6>
 8000d54:	3303      	adds	r3, #3
 8000d56:	109b      	asrs	r3, r3, #2
 8000d58:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	895b      	ldrh	r3, [r3, #10]
 8000d62:	3b04      	subs	r3, #4
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <IAP_wrq_recv_callback+0xc6>
    count++;
 8000d6c:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8000d70:	3301      	adds	r3, #1
 8000d72:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e

    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 8000d76:	f8b7 223e 	ldrh.w	r2, [r7, #574]	; 0x23e
 8000d7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d7e:	4619      	mov	r1, r3
 8000d80:	483a      	ldr	r0, [pc, #232]	; (8000e6c <IAP_wrq_recv_callback+0x1bc>)
 8000d82:	f7ff fc31 	bl	80005e8 <FLASH_If_Write>

    /* update our block number to match the block number just received */
    args->block++;
 8000d86:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 8000d98:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d9c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	895b      	ldrh	r3, [r3, #10]
 8000da6:	3b04      	subs	r3, #4
 8000da8:	441a      	add	r2, r3
 8000daa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000dae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8000db2:	e017      	b.n	8000de4 <IAP_wrq_recv_callback+0x134>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fefb 	bl	8000bb6 <IAP_tftp_extract_block>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000dc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dcc:	3301      	adds	r3, #1
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d108      	bne.n	8000de4 <IAP_wrq_recv_callback+0x134>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8000dd2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000dd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);
 8000de4:	f8b7 2250 	ldrh.w	r2, [r7, #592]	; 0x250
 8000de8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000dec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000df0:	4639      	mov	r1, r7
 8000df2:	f107 0008 	add.w	r0, r7, #8
 8000df6:	6809      	ldr	r1, [r1, #0]
 8000df8:	6800      	ldr	r0, [r0, #0]
 8000dfa:	f7ff ff15 	bl	8000c28 <IAP_tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	895b      	ldrh	r3, [r3, #10]
 8000e04:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8000e08:	d222      	bcs.n	8000e50 <IAP_wrq_recv_callback+0x1a0>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f000 f908 	bl	8001028 <IAP_tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	f005 fa92 	bl	8006344 <pbuf_free>

#ifdef USE_PRINTF
    sprintf(message, "%d bytes ",(int)total_count);
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <IAP_wrq_recv_callback+0x1b8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4911      	ldr	r1, [pc, #68]	; (8000e70 <IAP_wrq_recv_callback+0x1c0>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00e f88b 	bl	800ef48 <siprintf>
    printf("Tot bytes Received:, %s\n", message);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <IAP_wrq_recv_callback+0x1c4>)
 8000e3a:	f00d ffb7 	bl	800edac <iprintf>
    printf("  State: Prog Finished \n");
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <IAP_wrq_recv_callback+0x1c8>)
 8000e40:	f00e f83a 	bl	800eeb8 <puts>
    printf("Reset the board \n");
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <IAP_wrq_recv_callback+0x1cc>)
 8000e46:	f00e f837 	bl	800eeb8 <puts>
#endif

    HAL_NVIC_SystemReset();
 8000e4a:	f000 fcc2 	bl	80017d2 <HAL_NVIC_SystemReset>
 8000e4e:	e004      	b.n	8000e5a <IAP_wrq_recv_callback+0x1aa>
  }
  else
  {
    pbuf_free(pkt_buf);
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	f005 fa76 	bl	8006344 <pbuf_free>
    return;
 8000e58:	bf00      	nop
  }
}
 8000e5a:	f507 7711 	add.w	r7, r7, #580	; 0x244
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08010278 	.word	0x08010278
 8000e68:	200000bc 	.word	0x200000bc
 8000e6c:	200000b4 	.word	0x200000b4
 8000e70:	0801028c 	.word	0x0801028c
 8000e74:	08010298 	.word	0x08010298
 8000e78:	080102b4 	.word	0x080102b4
 8000e7c:	080102cc 	.word	0x080102cc

08000e80 <IAP_tftp_process_write>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = mem_malloc(sizeof *args);
 8000e90:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000e94:	f004 f9e0 	bl	8005258 <mem_malloc>
 8000e98:	6178      	str	r0, [r7, #20]
  if (!args)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d108      	bne.n	8000eb2 <IAP_tftp_process_write+0x32>
  {
#ifdef USE_PRINTF
    printf("Memory error \n");
 8000ea0:	481e      	ldr	r0, [pc, #120]	; (8000f1c <IAP_tftp_process_write+0x9c>)
 8000ea2:	f00e f809 	bl	800eeb8 <puts>
#endif
    IAP_tftp_cleanup_wr(upcb, args);
 8000ea6:	6979      	ldr	r1, [r7, #20]
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 f8bd 	bl	8001028 <IAP_tftp_cleanup_wr>
    return 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e02f      	b.n	8000f12 <IAP_tftp_process_write+0x92>
  }

  args->op = TFTP_WRQ;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4910      	ldr	r1, [pc, #64]	; (8000f20 <IAP_tftp_process_write+0xa0>)
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f00b fb98 	bl	800c614 <udp_recv>

  total_count =0;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <IAP_tftp_process_write+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 8000eea:	f7ff fb4d 	bl	8000588 <FLASH_If_Init>

  /* erase user flash area */
  FLASH_If_Erase(USER_FLASH_FIRST_PAGE_ADDRESS);
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <IAP_tftp_process_write+0xa8>)
 8000ef0:	f7ff fb50 	bl	8000594 <FLASH_If_Erase>

  Flash_Write_Address = USER_FLASH_FIRST_PAGE_ADDRESS;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <IAP_tftp_process_write+0xac>)
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <IAP_tftp_process_write+0xa8>)
 8000ef8:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff fe8f 	bl	8000c28 <IAP_tftp_send_ack_packet>
#ifdef USE_PRINTF
  printf("  State: Programming... \n");
 8000f0a:	4809      	ldr	r0, [pc, #36]	; (8000f30 <IAP_tftp_process_write+0xb0>)
 8000f0c:	f00d ffd4 	bl	800eeb8 <puts>
#endif
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	080102e0 	.word	0x080102e0
 8000f20:	08000cb1 	.word	0x08000cb1
 8000f24:	200000bc 	.word	0x200000bc
 8000f28:	08020000 	.word	0x08020000
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	080102f0 	.word	0x080102f0

08000f34 <IAP_tftp_recv_callback>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09e      	sub	sp, #120	; 0x78
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
  uint32_t i;
  char filename[40],message[46], *ptr;
#endif

  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 8000f42:	f00b fbc9 	bl	800c6d8 <udp_new>
 8000f46:	6738      	str	r0, [r7, #112]	; 0x70
  if (!upcb_tftp_data)
 8000f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d103      	bne.n	8000f56 <IAP_tftp_recv_callback+0x22>
  {
    /* Error creating PCB. Out of Memory  */
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 8000f4e:	4830      	ldr	r0, [pc, #192]	; (8001010 <IAP_tftp_recv_callback+0xdc>)
 8000f50:	f00d ffb2 	bl	800eeb8 <puts>
#endif
    return;
 8000f54:	e059      	b.n	800100a <IAP_tftp_recv_callback+0xd6>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  err = udp_bind(upcb_tftp_data, IP_ADDR_ANY, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	492e      	ldr	r1, [pc, #184]	; (8001014 <IAP_tftp_recv_callback+0xe0>)
 8000f5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000f5c:	f00b faaa 	bl	800c4b4 <udp_bind>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  if (err != ERR_OK)
 8000f66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <IAP_tftp_recv_callback+0x42>
  {
    /* Unable to bind to port */
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 8000f6e:	4828      	ldr	r0, [pc, #160]	; (8001010 <IAP_tftp_recv_callback+0xdc>)
 8000f70:	f00d ffa2 	bl	800eeb8 <puts>
#endif
    return;
 8000f74:	e049      	b.n	800100a <IAP_tftp_recv_callback+0xd6>
  }

  op = IAP_tftp_decode_op(pkt_buf->payload);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe0e 	bl	8000b9c <IAP_tftp_decode_op>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  if (op != TFTP_WRQ)
 8000f86:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d006      	beq.n	8000f9c <IAP_tftp_recv_callback+0x68>
  {
    /* remove PCB */
#ifdef USE_PRINTF
    printf("Bad TFTP opcode \n");
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <IAP_tftp_recv_callback+0xe4>)
 8000f90:	f00d ff92 	bl	800eeb8 <puts>
#endif
    udp_remove(upcb_tftp_data);
 8000f94:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000f96:	f00b fb5d 	bl	800c654 <udp_remove>
 8000f9a:	e033      	b.n	8001004 <IAP_tftp_recv_callback+0xd0>
  }
  else
  {

#ifdef USE_PRINTF
    ptr = pkt_buf->payload;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	66bb      	str	r3, [r7, #104]	; 0x68
    ptr = ptr +2;
 8000fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    /*extract file name info */
    i= 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
    while (*(ptr+i)!=0x0)
 8000fac:	e002      	b.n	8000fb4 <IAP_tftp_recv_callback+0x80>
    {
      i++;
 8000fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	677b      	str	r3, [r7, #116]	; 0x74
    while (*(ptr+i)!=0x0)
 8000fb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f6      	bne.n	8000fae <IAP_tftp_recv_callback+0x7a>
    }
    strncpy(filename, ptr, i+1);
 8000fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00d ffdc 	bl	800ef88 <strncpy>

    printf("IAP using TFTP \n");
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <IAP_tftp_recv_callback+0xe8>)
 8000fd2:	f00d ff71 	bl	800eeb8 <puts>
    sprintf(message, "File: %s",filename);
 8000fd6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4910      	ldr	r1, [pc, #64]	; (8001020 <IAP_tftp_recv_callback+0xec>)
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00d ffb1 	bl	800ef48 <siprintf>
    printf("%s\n", message);
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d ff64 	bl	800eeb8 <puts>
    printf("  State: Erasing...\n");
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <IAP_tftp_recv_callback+0xf0>)
 8000ff2:	f00d ff61 	bl	800eeb8 <puts>
#endif

    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 8000ff6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001000:	f7ff ff3e 	bl	8000e80 <IAP_tftp_process_write>
  }
  pbuf_free(pkt_buf);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f005 f99d 	bl	8006344 <pbuf_free>
}
 800100a:	3778      	adds	r7, #120	; 0x78
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801030c 	.word	0x0801030c
 8001014:	08012e38 	.word	0x08012e38
 8001018:	08010320 	.word	0x08010320
 800101c:	08010334 	.word	0x08010334
 8001020:	08010344 	.word	0x08010344
 8001024:	08010350 	.word	0x08010350

08001028 <IAP_tftp_cleanup_wr>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f003 ffaa 	bl	8004f8c <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f00b fac3 	bl	800c5c4 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f00b fb08 	bl	800c654 <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <IAP_tftp_cleanup_wr+0x34>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	4905      	ldr	r1, [pc, #20]	; (8001060 <IAP_tftp_cleanup_wr+0x38>)
 800104c:	4618      	mov	r0, r3
 800104e:	f00b fae1 	bl	800c614 <udp_recv>

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000b8 	.word	0x200000b8
 8001060:	08000f35 	.word	0x08000f35

08001064 <IAP_tftpd_init>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation
  * @param  None
  * @retval None
  */
void IAP_tftpd_init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 800106a:	2345      	movs	r3, #69	; 0x45
 800106c:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 800106e:	f00b fb33 	bl	800c6d8 <udp_new>
 8001072:	4603      	mov	r3, r0
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <IAP_tftpd_init+0x5c>)
 8001076:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <IAP_tftpd_init+0x5c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d103      	bne.n	8001088 <IAP_tftpd_init+0x24>
  {
    /* Error creating PCB. Out of Memory  */
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 8001080:	4810      	ldr	r0, [pc, #64]	; (80010c4 <IAP_tftpd_init+0x60>)
 8001082:	f00d ff19 	bl	800eeb8 <puts>
#endif
    return;
 8001086:	e018      	b.n	80010ba <IAP_tftpd_init+0x56>
  }

  /* Bind this PCB to port 69  */
  err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <IAP_tftpd_init+0x5c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	b292      	uxth	r2, r2
 8001090:	490d      	ldr	r1, [pc, #52]	; (80010c8 <IAP_tftpd_init+0x64>)
 8001092:	4618      	mov	r0, r3
 8001094:	f00b fa0e 	bl	800c4b4 <udp_bind>
 8001098:	4603      	mov	r3, r0
 800109a:	70fb      	strb	r3, [r7, #3]
  if (err == ERR_OK)
 800109c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d107      	bne.n	80010b4 <IAP_tftpd_init+0x50>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <IAP_tftpd_init+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <IAP_tftpd_init+0x68>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00b fab1 	bl	800c614 <udp_recv>
 80010b2:	e002      	b.n	80010ba <IAP_tftpd_init+0x56>
  }
  else
  {
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <IAP_tftpd_init+0x60>)
 80010b6:	f00d feff 	bl	800eeb8 <puts>
#endif
  }
}
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200000b8 	.word	0x200000b8
 80010c4:	0801030c 	.word	0x0801030c
 80010c8:	08012e38 	.word	0x08012e38
 80010cc:	08000f35 	.word	0x08000f35

080010d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART3_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART3_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART3_UART_Init+0x4c>)
 8001108:	f002 fd90 	bl	8003c2c <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f7ff fc0f 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000024c 	.word	0x2000024c
 8001120:	40004800 	.word	0x40004800

08001124 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_UART_MspInit+0x84>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12c      	bne.n	80011a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_UART_MspInit+0x88>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_UART_MspInit+0x88>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_UART_MspInit+0x88>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_UART_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_UART_MspInit+0x8c>)
 800119c:	f001 feda 	bl	8002f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004800 	.word	0x40004800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ba:	490e      	ldr	r1, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d0:	4c0b      	ldr	r4, [pc, #44]	; (8001200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011de:	f7ff fccb 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f00d fd81 	bl	800ece8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff fae1 	bl	80007ac <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011f8:	08012fa8 	.word	0x08012fa8
  ldr r2, =_sbss
 80011fc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001200:	20008440 	.word	0x20008440

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>

08001206 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <LAN8742_RegisterBusIO+0x28>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <LAN8742_RegisterBusIO+0x28>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <LAN8742_RegisterBusIO+0x28>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e014      	b.n	800125e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d17c      	bne.n	8001384 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2220      	movs	r2, #32
 800129c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e01c      	b.n	80012de <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	2112      	movs	r1, #18
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	4798      	blx	r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da03      	bge.n	80012c0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80012b8:	f06f 0304 	mvn.w	r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80012be:	e00b      	b.n	80012d8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d105      	bne.n	80012d8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
         break;
 80012d6:	e005      	b.n	80012e4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b1f      	cmp	r3, #31
 80012e2:	d9df      	bls.n	80012a4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b1f      	cmp	r3, #31
 80012ea:	d902      	bls.n	80012f2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012ec:	f06f 0302 	mvn.w	r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d145      	bne.n	8001384 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6810      	ldr	r0, [r2, #0]
 8001300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001304:	2100      	movs	r1, #0
 8001306:	4798      	blx	r3
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	db37      	blt.n	800137e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6810      	ldr	r0, [r2, #0]
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	2100      	movs	r1, #0
 800131c:	4798      	blx	r3
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	db28      	blt.n	8001376 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4798      	blx	r3
 800132a:	4603      	mov	r3, r0
 800132c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800132e:	e01c      	b.n	800136a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4798      	blx	r3
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001342:	d80e      	bhi.n	8001362 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6810      	ldr	r0, [r2, #0]
 800134c:	f107 0208 	add.w	r2, r7, #8
 8001350:	2100      	movs	r1, #0
 8001352:	4798      	blx	r3
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	da07      	bge.n	800136a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800135a:	f06f 0304 	mvn.w	r3, #4
 800135e:	613b      	str	r3, [r7, #16]
                 break;
 8001360:	e010      	b.n	8001384 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001362:	f06f 0301 	mvn.w	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
               break;
 8001368:	e00c      	b.n	8001384 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1dd      	bne.n	8001330 <LAN8742_Init+0xc6>
 8001374:	e006      	b.n	8001384 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001376:	f06f 0304 	mvn.w	r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	e002      	b.n	8001384 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800137e:	f06f 0303 	mvn.w	r3, #3
 8001382:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d112      	bne.n	80013b0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4798      	blx	r3
 8001390:	4603      	mov	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001394:	bf00      	nop
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4798      	blx	r3
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013a8:	d9f5      	bls.n	8001396 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013b0:	693b      	ldr	r3, [r7, #16]
 }
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6810      	ldr	r0, [r2, #0]
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	2101      	movs	r1, #1
 80013d4:	4798      	blx	r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da02      	bge.n	80013e2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013dc:	f06f 0304 	mvn.w	r3, #4
 80013e0:	e06e      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	2101      	movs	r1, #1
 80013f0:	4798      	blx	r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da02      	bge.n	80013fe <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013f8:	f06f 0304 	mvn.w	r3, #4
 80013fc:	e060      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001408:	2301      	movs	r3, #1
 800140a:	e059      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6810      	ldr	r0, [r2, #0]
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2100      	movs	r1, #0
 800141a:	4798      	blx	r3
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	da02      	bge.n	8001428 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001422:	f06f 0304 	mvn.w	r3, #4
 8001426:	e04b      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d11b      	bne.n	800146a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <LAN8742_GetLinkState+0x90>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001446:	2302      	movs	r3, #2
 8001448:	e03a      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001454:	2303      	movs	r3, #3
 8001456:	e033      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001462:	2304      	movs	r3, #4
 8001464:	e02c      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001466:	2305      	movs	r3, #5
 8001468:	e02a      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6810      	ldr	r0, [r2, #0]
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	211f      	movs	r1, #31
 8001478:	4798      	blx	r3
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	da02      	bge.n	8001486 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001480:	f06f 0304 	mvn.w	r3, #4
 8001484:	e01c      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001490:	2306      	movs	r3, #6
 8001492:	e015      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 031c 	and.w	r3, r3, #28
 800149a:	2b18      	cmp	r3, #24
 800149c:	d101      	bne.n	80014a2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800149e:	2302      	movs	r3, #2
 80014a0:	e00e      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f003 031c 	and.w	r3, r3, #28
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d101      	bne.n	80014b0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e007      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 031c 	and.w	r3, r3, #28
 80014b6:	2b14      	cmp	r3, #20
 80014b8:	d101      	bne.n	80014be <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014ba:	2304      	movs	r3, #4
 80014bc:	e000      	b.n	80014c0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014be:	2305      	movs	r3, #5
    }				
  }
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_Init+0x40>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_Init+0x40>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x40>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f947 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fa20 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f955 	bl	80017da <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f927 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	20000290 	.word	0x20000290

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000290 	.word	0x20000290

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001718:	f3bf 8f4f 	dsb	sy
}
 800171c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <__NVIC_SystemReset+0x24>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001726:	4904      	ldr	r1, [pc, #16]	; (8001738 <__NVIC_SystemReset+0x24>)
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_SystemReset+0x28>)
 800172a:	4313      	orrs	r3, r2
 800172c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800172e:	f3bf 8f4f 	dsb	sy
}
 8001732:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <__NVIC_SystemReset+0x20>
 8001738:	e000ed00 	.word	0xe000ed00
 800173c:	05fa0004 	.word	0x05fa0004

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff78 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff46 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff78 	bl	80016ac <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff47 	bl	8001658 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80017d6:	f7ff ff9d 	bl	8001714 <__NVIC_SystemReset>

080017da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffac 	bl	8001740 <SysTick_Config>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06c      	b.n	80018e0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2223      	movs	r2, #35	; 0x23
 8001814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f003 f825 	bl	8004868 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_ETH_Init+0xf4>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <HAL_ETH_Init+0xf4>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_ETH_Init+0xf4>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_ETH_Init+0xf8>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a2b      	ldr	r2, [pc, #172]	; (80018ec <HAL_ETH_Init+0xf8>)
 8001840:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001844:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_ETH_Init+0xf8>)
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <HAL_ETH_Init+0xf8>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_ETH_Init+0xf8>)
 8001856:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001870:	f7ff fe90 	bl	8001594 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001876:	e011      	b.n	800189c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001878:	f7ff fe8c 	bl	8001594 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001886:	d909      	bls.n	800189c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2204      	movs	r2, #4
 800188c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	22e0      	movs	r2, #224	; 0xe0
 8001894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e021      	b.n	80018e0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1e4      	bne.n	8001878 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fdb2 	bl	8002418 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fe59 	bl	800256c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 feb0 	bl	8002620 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	461a      	mov	r2, r3
 80018c6:	2100      	movs	r1, #0
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fe17 	bl	80024fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2210      	movs	r2, #16
 80018da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40013800 	.word	0x40013800

080018f0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d13e      	bne.n	8001980 <HAL_ETH_Start+0x90>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2223      	movs	r2, #35	; 0x23
 8001906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2204      	movs	r2, #4
 800190e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f9d5 	bl	8001cc0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0208 	orr.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0204 	orr.w	r2, r2, #4
 8001934:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fc1c 	bl	8002174 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	3318      	adds	r3, #24
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	3318      	adds	r3, #24
 8001956:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	3318      	adds	r3, #24
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0202 	orr.w	r2, r2, #2
 800196c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001970:	3318      	adds	r3, #24
 8001972:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2223      	movs	r2, #35	; 0x23
 8001978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <HAL_ETH_Start+0x92>
  }
  else
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001998:	2b23      	cmp	r3, #35	; 0x23
 800199a:	d132      	bne.n	8001a02 <HAL_ETH_Stop+0x78>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2223      	movs	r2, #35	; 0x23
 80019a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0208 	bic.w	r2, r2, #8
 80019b2:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019bc:	3318      	adds	r3, #24
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0202 	bic.w	r2, r2, #2
 80019c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019cc:	3318      	adds	r3, #24
 80019ce:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0204 	bic.w	r2, r2, #4
 80019de:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fbc7 	bl	8002174 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0208 	bic.w	r2, r2, #8
 80019f4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2210      	movs	r2, #16
 80019fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_ETH_Stop+0x7a>
  }
  else
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e07f      	b.n	8001b32 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a38:	2b23      	cmp	r3, #35	; 0x23
 8001a3a:	d179      	bne.n	8001b30 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fe5b 	bl	80026fc <ETH_Prepare_Tx_Descriptors>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e068      	b.n	8001b32 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a60:	f3bf 8f4f 	dsb	sy
}
 8001a64:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3206      	adds	r2, #6
 8001a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a72:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d904      	bls.n	8001a90 <HAL_ETH_Transmit+0x84>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	1f1a      	subs	r2, r3, #4
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	3106      	adds	r1, #6
 8001a9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001aa8:	f7ff fd74 	bl	8001594 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001aae:	e039      	b.n	8001b24 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab8:	3314      	adds	r3, #20
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	f043 0208 	orr.w	r2, r3, #8
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001adc:	3314      	adds	r3, #20
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e023      	b.n	8001b32 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d018      	beq.n	8001b24 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff fd4f 	bl	8001594 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <HAL_ETH_Transmit+0xfc>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	f043 0204 	orr.w	r2, r3, #4
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001b1e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e006      	b.n	8001b32 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dbc1      	blt.n	8001ab0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b088      	sub	sp, #32
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0a8      	b.n	8001cb8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6c:	2b23      	cmp	r3, #35	; 0x23
 8001b6e:	d001      	beq.n	8001b74 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0a1      	b.n	8001cb8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	3212      	adds	r2, #18
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8a:	f1c3 0304 	rsb	r3, r3, #4
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b90:	e06a      	b.n	8001c68 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <HAL_ETH_ReadData+0x88>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d040      	beq.n	8001c44 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c1e:	461a      	mov	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f002 fff0 	bl	8004c08 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	441a      	add	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d902      	bls.n	8001c56 <HAL_ETH_ReadData+0x11c>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3b04      	subs	r3, #4
 8001c54:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	3212      	adds	r2, #18
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db06      	blt.n	8001c7e <HAL_ETH_ReadData+0x144>
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d202      	bcs.n	8001c7e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d089      	beq.n	8001b92 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	441a      	add	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f814 	bl	8001cc0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	3212      	adds	r2, #18
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ce6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ce8:	e03e      	b.n	8001d68 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 ff56 	bl	8004ba8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	74fb      	strb	r3, [r7, #19]
 8001d06:	e007      	b.n	8001d18 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d024      	beq.n	8001d68 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d1e:	f3bf 8f5f 	dmb	sy
}
 8001d22:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d2a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <ETH_UpdateDescriptor+0xe0>)
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e003      	b.n	8001d44 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8001d42:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d902      	bls.n	8001d56 <ETH_UpdateDescriptor+0x96>
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3b04      	subs	r3, #4
 8001d54:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	3212      	adds	r2, #18
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <ETH_UpdateDescriptor+0xb4>
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ba      	bne.n	8001cea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d00c      	beq.n	8001d98 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	3308      	adds	r3, #8
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	800043e8 	.word	0x800043e8

08001da4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 031c 	and.w	r3, r3, #28
 8001dc0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	02db      	lsls	r3, r3, #11
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f023 0302 	bic.w	r3, r3, #2
 8001de2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001df4:	f7ff fbce 	bl	8001594 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dfa:	e00d      	b.n	8001e18 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001dfc:	f7ff fbca 	bl	8001594 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d301      	bcc.n	8001e10 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e010      	b.n	8001e32 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ec      	bne.n	8001dfc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 031c 	and.w	r3, r3, #28
 8001e56:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	02db      	lsls	r3, r3, #11
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	019b      	lsls	r3, r3, #6
 8001e68:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e94:	f7ff fb7e 	bl	8001594 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e9a:	e00d      	b.n	8001eb8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e9c:	f7ff fb7a 	bl	8001594 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d301      	bcc.n	8001eb0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e009      	b.n	8001ec4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ec      	bne.n	8001e9c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d2      	b.n	8002086 <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b29a      	uxth	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00b      	b.n	80020be <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d105      	bne.n	80020bc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f888 	bl	80021c8 <ETH_SetMACConfig>

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 031c 	bic.w	r3, r3, #28
 80020de:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020e0:	f001 fd70 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 80020e4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_ETH_SetMDIOClockRange+0x98>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d908      	bls.n	8002100 <HAL_ETH_SetMDIOClockRange+0x38>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d804      	bhi.n	8002100 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e027      	b.n	8002150 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4a18      	ldr	r2, [pc, #96]	; (8002164 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d908      	bls.n	800211a <HAL_ETH_SetMDIOClockRange+0x52>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d204      	bcs.n	800211a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f043 030c 	orr.w	r3, r3, #12
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e01a      	b.n	8002150 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d303      	bcc.n	800212a <HAL_ETH_SetMDIOClockRange+0x62>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d911      	bls.n	800214e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d908      	bls.n	8002144 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d804      	bhi.n	8002144 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e005      	b.n	8002150 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e000      	b.n	8002150 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800214e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	611a      	str	r2, [r3, #16]
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	01312cff 	.word	0x01312cff
 8002164:	02160ebf 	.word	0x02160ebf
 8002168:	03938700 	.word	0x03938700
 800216c:	05f5e0ff 	.word	0x05f5e0ff
 8002170:	08f0d17f 	.word	0x08f0d17f

08002174 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002188:	3318      	adds	r3, #24
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	3318      	adds	r3, #24
 800219a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a4:	3318      	adds	r3, #24
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff f9fe 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	3318      	adds	r3, #24
 80021bc:	601a      	str	r2, [r3, #0]
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4b47      	ldr	r3, [pc, #284]	; (80022fc <ETH_SetMACConfig+0x134>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7c1b      	ldrb	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <ETH_SetMACConfig+0x28>
 80021ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021ee:	e000      	b.n	80021f2 <ETH_SetMACConfig+0x2a>
 80021f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	7c5b      	ldrb	r3, [r3, #17]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <ETH_SetMACConfig+0x38>
 80021fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021fe:	e000      	b.n	8002202 <ETH_SetMACConfig+0x3a>
 8002200:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002202:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7fdb      	ldrb	r3, [r3, #31]
 800220e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002210:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	7f92      	ldrb	r2, [r2, #30]
 800221c:	2a00      	cmp	r2, #0
 800221e:	d102      	bne.n	8002226 <ETH_SetMACConfig+0x5e>
 8002220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002224:	e000      	b.n	8002228 <ETH_SetMACConfig+0x60>
 8002226:	2200      	movs	r2, #0
                        macconf->Speed |
 8002228:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7f1b      	ldrb	r3, [r3, #28]
 800222e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002230:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002236:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800223e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002246:	2a00      	cmp	r2, #0
 8002248:	d102      	bne.n	8002250 <ETH_SetMACConfig+0x88>
 800224a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224e:	e000      	b.n	8002252 <ETH_SetMACConfig+0x8a>
 8002250:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002252:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7bdb      	ldrb	r3, [r3, #15]
 8002258:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800225a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002260:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002268:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800226a:	4313      	orrs	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff f992 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022ae:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80022b4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80022bc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80022c4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff f961 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	ff20810f 	.word	0xff20810f

08002300 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002312:	3318      	adds	r3, #24
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <ETH_SetDMAConfig+0x114>)
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	7b1b      	ldrb	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <ETH_SetDMAConfig+0x2e>
 8002328:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800232c:	e000      	b.n	8002330 <ETH_SetDMAConfig+0x30>
 800232e:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	7b5b      	ldrb	r3, [r3, #13]
 8002334:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002336:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	7f52      	ldrb	r2, [r2, #29]
 800233c:	2a00      	cmp	r2, #0
 800233e:	d102      	bne.n	8002346 <ETH_SetDMAConfig+0x46>
 8002340:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002344:	e000      	b.n	8002348 <ETH_SetDMAConfig+0x48>
 8002346:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002348:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	7b9b      	ldrb	r3, [r3, #14]
 800234e:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002350:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002356:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	7f1b      	ldrb	r3, [r3, #28]
 800235c:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800235e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	7f9b      	ldrb	r3, [r3, #30]
 8002364:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002366:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800236c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002374:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002376:	4313      	orrs	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	3318      	adds	r3, #24
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	3318      	adds	r3, #24
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800239a:	2001      	movs	r0, #1
 800239c:	f7ff f906 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	3318      	adds	r3, #24
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023dc:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7ff f8d7 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	f8de3f23 	.word	0xf8de3f23

08002418 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0a6      	sub	sp, #152	; 0x98
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002454:	2300      	movs	r3, #0
 8002456:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800245e:	2300      	movs	r3, #0
 8002460:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800247a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800247e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002484:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800248c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fe98 	bl	80021c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002498:	2301      	movs	r3, #1
 800249a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800249c:	2301      	movs	r3, #1
 800249e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff06 	bl	8002300 <ETH_SetDMAConfig>
}
 80024f4:	bf00      	nop
 80024f6:	3798      	adds	r7, #152	; 0x98
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3305      	adds	r3, #5
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	3204      	adds	r2, #4
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <ETH_MACAddressConfig+0x68>)
 800251e:	4413      	add	r3, r2
 8002520:	461a      	mov	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3303      	adds	r3, #3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	061a      	lsls	r2, r3, #24
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3302      	adds	r3, #2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	4313      	orrs	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <ETH_MACAddressConfig+0x6c>)
 800254e:	4413      	add	r3, r2
 8002550:	461a      	mov	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6013      	str	r3, [r2, #0]
}
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40028040 	.word	0x40028040
 8002568:	40028044 	.word	0x40028044

0800256c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e03e      	b.n	80025f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68d9      	ldr	r1, [r3, #12]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2200      	movs	r2, #0
 8002596:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	3206      	adds	r2, #6
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d80c      	bhi.n	80025dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	e004      	b.n	80025e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d9bd      	bls.n	800257a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002610:	3310      	adds	r3, #16
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e046      	b.n	80026bc <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800266a:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002672:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	3212      	adds	r2, #18
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d80c      	bhi.n	80026ac <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	e004      	b.n	80026b6 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d9b5      	bls.n	800262e <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ec:	330c      	adds	r3, #12
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b08d      	sub	sp, #52	; 0x34
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3318      	adds	r3, #24
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002726:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800273a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800273e:	d007      	beq.n	8002750 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	3304      	adds	r3, #4
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002750:	2302      	movs	r3, #2
 8002752:	e103      	b.n	800295c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	3301      	adds	r3, #1
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800276c:	f023 031f 	bic.w	r3, r3, #31
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	6852      	ldr	r2, [r2, #4]
 8002774:	431a      	orrs	r2, r3
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	431a      	orrs	r2, r3
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80027da:	f3bf 8f5f 	dmb	sy
}
 80027de:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027ec:	e084      	b.n	80028f8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e005      	b.n	800281a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	3301      	adds	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	2b03      	cmp	r3, #3
 8002824:	d902      	bls.n	800282c <ETH_Prepare_Tx_Descriptors+0x130>
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	3b04      	subs	r3, #4
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800284a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284e:	d007      	beq.n	8002860 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	3304      	adds	r3, #4
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d029      	beq.n	80028b4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	e019      	b.n	80028a8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002874:	f3bf 8f5f 	dmb	sy
}
 8002878:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	3301      	adds	r3, #1
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	2b03      	cmp	r3, #3
 8002890:	d902      	bls.n	8002898 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	3b04      	subs	r3, #4
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	3301      	adds	r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3e1      	bcc.n	8002874 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80028b0:	2302      	movs	r3, #2
 80028b2:	e053      	b.n	800295c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	3301      	adds	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80028d2:	f023 031f 	bic.w	r3, r3, #31
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	6852      	ldr	r2, [r2, #4]
 80028da:	431a      	orrs	r2, r3
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80028e6:	f3bf 8f5f 	dmb	sy
}
 80028ea:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f47f af76 	bne.w	80027ee <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e005      	b.n	8002922 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002932:	6979      	ldr	r1, [r7, #20]
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	3304      	adds	r3, #4
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002942:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002944:	b672      	cpsid	i
}
 8002946:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002956:	b662      	cpsie	i
}
 8002958:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3734      	adds	r7, #52	; 0x34
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_FLASH_Program+0xa0>)
 800297c:	7e1b      	ldrb	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_FLASH_Program+0x1e>
 8002982:	2302      	movs	r3, #2
 8002984:	e03b      	b.n	80029fe <HAL_FLASH_Program+0x96>
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_FLASH_Program+0xa0>)
 8002988:	2201      	movs	r2, #1
 800298a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800298c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002990:	f000 f860 	bl	8002a54 <FLASH_WaitForLastOperation>
 8002994:	4603      	mov	r3, r0
 8002996:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12b      	bne.n	80029f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80029a4:	783b      	ldrb	r3, [r7, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f000 f90b 	bl	8002bc4 <FLASH_Program_Byte>
 80029ae:	e016      	b.n	80029de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80029b6:	883b      	ldrh	r3, [r7, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	68b8      	ldr	r0, [r7, #8]
 80029bc:	f000 f8de 	bl	8002b7c <FLASH_Program_HalfWord>
 80029c0:	e00d      	b.n	80029de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d105      	bne.n	80029d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f000 f8b3 	bl	8002b38 <FLASH_Program_Word>
 80029d2:	e004      	b.n	80029de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80029d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d8:	68b8      	ldr	r0, [r7, #8]
 80029da:	f000 f87b 	bl	8002ad4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029e2:	f000 f837 	bl	8002a54 <FLASH_WaitForLastOperation>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_FLASH_Program+0xa4>)
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_FLASH_Program+0xa4>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HAL_FLASH_Program+0xa0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000294 	.word	0x20000294
 8002a0c:	40023c00 	.word	0x40023c00

08002a10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_FLASH_Unlock+0x38>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da0b      	bge.n	8002a3a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_FLASH_Unlock+0x38>)
 8002a24:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_FLASH_Unlock+0x3c>)
 8002a26:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_FLASH_Unlock+0x38>)
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_FLASH_Unlock+0x40>)
 8002a2c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_FLASH_Unlock+0x38>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da01      	bge.n	8002a3a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40023c00 	.word	0x40023c00
 8002a4c:	45670123 	.word	0x45670123
 8002a50:	cdef89ab 	.word	0xcdef89ab

08002a54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <FLASH_WaitForLastOperation+0x78>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a66:	f7fe fd95 	bl	8001594 <HAL_GetTick>
 8002a6a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002a6c:	e010      	b.n	8002a90 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d00c      	beq.n	8002a90 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <FLASH_WaitForLastOperation+0x38>
 8002a7c:	f7fe fd8a 	bl	8001594 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d201      	bcs.n	8002a90 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e019      	b.n	8002ac4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <FLASH_WaitForLastOperation+0x7c>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e8      	bne.n	8002a6e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <FLASH_WaitForLastOperation+0x7c>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <FLASH_WaitForLastOperation+0x7c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <FLASH_WaitForLastOperation+0x7c>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002aba:	f000 f8a5 	bl	8002c08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
  
}  
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000294 	.word	0x20000294
 8002ad0:	40023c00 	.word	0x40023c00

08002ad4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <FLASH_Program_DoubleWord+0x60>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <FLASH_Program_DoubleWord+0x60>)
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <FLASH_Program_DoubleWord+0x60>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <FLASH_Program_DoubleWord+0x60>)
 8002af2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002af6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <FLASH_Program_DoubleWord+0x60>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <FLASH_Program_DoubleWord+0x60>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002b0a:	f3bf 8f6f 	isb	sy
}
 8002b0e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	000a      	movs	r2, r1
 8002b1e:	2300      	movs	r3, #0
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	3104      	adds	r1, #4
 8002b24:	4613      	mov	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40023c00 	.word	0x40023c00

08002b38 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <FLASH_Program_Word+0x40>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <FLASH_Program_Word+0x40>)
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <FLASH_Program_Word+0x40>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <FLASH_Program_Word+0x40>)
 8002b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <FLASH_Program_Word+0x40>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <FLASH_Program_Word+0x40>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	601a      	str	r2, [r3, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40023c00 	.word	0x40023c00

08002b7c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <FLASH_Program_HalfWord+0x44>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <FLASH_Program_HalfWord+0x44>)
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <FLASH_Program_HalfWord+0x44>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <FLASH_Program_HalfWord+0x44>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <FLASH_Program_HalfWord+0x44>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <FLASH_Program_HalfWord+0x44>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	801a      	strh	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <FLASH_Program_Byte+0x40>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <FLASH_Program_Byte+0x40>)
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <FLASH_Program_Byte+0x40>)
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <FLASH_Program_Byte+0x40>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <FLASH_Program_Byte+0x40>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <FLASH_Program_Byte+0x40>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	701a      	strb	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00

08002c08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f043 0310 	orr.w	r3, r3, #16
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c22:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c26:	2210      	movs	r2, #16
 8002c28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f043 0308 	orr.w	r3, r3, #8
 8002c3e:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c40:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c44:	2220      	movs	r2, #32
 8002c46:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f043 0302 	orr.w	r3, r3, #2
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c7c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002c9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f043 0320 	orr.w	r3, r3, #32
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <FLASH_SetErrorCode+0xc8>)
 8002cba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <FLASH_SetErrorCode+0xc4>)
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	60da      	str	r2, [r3, #12]
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40023c00 	.word	0x40023c00
 8002cd0:	20000294 	.word	0x20000294

08002cd4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ce6:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_FLASHEx_Erase+0xdc>)
 8002ce8:	7e1b      	ldrb	r3, [r3, #24]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_FLASHEx_Erase+0x1e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e05a      	b.n	8002da8 <HAL_FLASHEx_Erase+0xd4>
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_FLASHEx_Erase+0xdc>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cfc:	f7ff feaa 	bl	8002a54 <FLASH_WaitForLastOperation>
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d14a      	bne.n	8002da0 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d117      	bne.n	8002d4a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 f846 	bl	8002db8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d30:	f7ff fe90 	bl	8002a54 <FLASH_WaitForLastOperation>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_FLASHEx_Erase+0xe0>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_FLASHEx_Erase+0xe0>)
 8002d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d42:	f023 0304 	bic.w	r3, r3, #4
 8002d46:	6113      	str	r3, [r2, #16]
 8002d48:	e028      	b.n	8002d9c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	e01c      	b.n	8002d8c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	4619      	mov	r1, r3
 8002d5a:	68b8      	ldr	r0, [r7, #8]
 8002d5c:	f000 f866 	bl	8002e2c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d64:	f7ff fe76 	bl	8002a54 <FLASH_WaitForLastOperation>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_FLASHEx_Erase+0xe0>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_FLASHEx_Erase+0xe0>)
 8002d72:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002d76:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	601a      	str	r2, [r3, #0]
          break;
 8002d84:	e00a      	b.n	8002d9c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3da      	bcc.n	8002d52 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002d9c:	f000 f894 	bl	8002ec8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_FLASHEx_Erase+0xdc>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	761a      	strb	r2, [r3, #24]

  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000294 	.word	0x20000294
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <FLASH_MassErase+0x70>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <FLASH_MassErase+0x70>)
 8002dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dce:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d108      	bne.n	8002de8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <FLASH_MassErase+0x70>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <FLASH_MassErase+0x70>)
 8002ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6113      	str	r3, [r2, #16]
 8002de6:	e00f      	b.n	8002e08 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d106      	bne.n	8002dfc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <FLASH_MassErase+0x70>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <FLASH_MassErase+0x70>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6113      	str	r3, [r2, #16]
 8002dfa:	e005      	b.n	8002e08 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <FLASH_MassErase+0x70>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <FLASH_MassErase+0x70>)
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e06:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <FLASH_MassErase+0x70>)
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <FLASH_MassErase+0x70>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6113      	str	r3, [r2, #16]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e010      	b.n	8002e6a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d103      	bne.n	8002e56 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e009      	b.n	8002e6a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d103      	bne.n	8002e64 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e002      	b.n	8002e6a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0b      	cmp	r3, #11
 8002e6e:	d902      	bls.n	8002e76 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <FLASH_Erase_Sector+0x98>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	6113      	str	r3, [r2, #16]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40023c00 	.word	0x40023c00

08002ec8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d017      	beq.n	8002f08 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002ede:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002eea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002efa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d017      	beq.n	8002f44 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f36:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <FLASH_FlushCaches+0x88>)
 8002f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f42:	6013      	str	r3, [r2, #0]
  }
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e177      	b.n	8003260 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8166 	bne.w	800325a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80c0 	beq.w	800325a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_GPIO_Init+0x324>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_GPIO_Init+0x324>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_GPIO_Init+0x324>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f6:	4a61      	ldr	r2, [pc, #388]	; (800327c <HAL_GPIO_Init+0x328>)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	220f      	movs	r2, #15
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_GPIO_Init+0x32c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d037      	beq.n	8003192 <HAL_GPIO_Init+0x23e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a57      	ldr	r2, [pc, #348]	; (8003284 <HAL_GPIO_Init+0x330>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_GPIO_Init+0x23a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a56      	ldr	r2, [pc, #344]	; (8003288 <HAL_GPIO_Init+0x334>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02b      	beq.n	800318a <HAL_GPIO_Init+0x236>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a55      	ldr	r2, [pc, #340]	; (800328c <HAL_GPIO_Init+0x338>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d025      	beq.n	8003186 <HAL_GPIO_Init+0x232>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <HAL_GPIO_Init+0x33c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_GPIO_Init+0x22e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a53      	ldr	r2, [pc, #332]	; (8003294 <HAL_GPIO_Init+0x340>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x22a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_GPIO_Init+0x344>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x226>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_GPIO_Init+0x348>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x222>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <HAL_GPIO_Init+0x34c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x21e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_GPIO_Init+0x350>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x21a>
 800316a:	2309      	movs	r3, #9
 800316c:	e012      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800316e:	230a      	movs	r3, #10
 8003170:	e010      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003172:	2308      	movs	r3, #8
 8003174:	e00e      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003176:	2307      	movs	r3, #7
 8003178:	e00c      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800317a:	2306      	movs	r3, #6
 800317c:	e00a      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800317e:	2305      	movs	r3, #5
 8003180:	e008      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003182:	2304      	movs	r3, #4
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003186:	2303      	movs	r3, #3
 8003188:	e004      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800318a:	2302      	movs	r3, #2
 800318c:	e002      	b.n	8003194 <HAL_GPIO_Init+0x240>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_GPIO_Init+0x240>
 8003192:	2300      	movs	r3, #0
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f002 0203 	and.w	r2, r2, #3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4093      	lsls	r3, r2
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a4:	4935      	ldr	r1, [pc, #212]	; (800327c <HAL_GPIO_Init+0x328>)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_GPIO_Init+0x354>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d6:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <HAL_GPIO_Init+0x354>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_GPIO_Init+0x354>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003200:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_GPIO_Init+0x354>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <HAL_GPIO_Init+0x354>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3301      	adds	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	f67f ae84 	bls.w	8002f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	40013800 	.word	0x40013800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	40020800 	.word	0x40020800
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40021000 	.word	0x40021000
 8003294:	40021400 	.word	0x40021400
 8003298:	40021800 	.word	0x40021800
 800329c:	40021c00 	.word	0x40021c00
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40022400 	.word	0x40022400
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f8:	e003      	b.n	8003302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	619a      	str	r2, [r3, #24]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003320:	887a      	ldrh	r2, [r7, #2]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	041a      	lsls	r2, r3, #16
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43d9      	mvns	r1, r3
 800332c:	887b      	ldrh	r3, [r7, #2]
 800332e:	400b      	ands	r3, r1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e264      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d075      	beq.n	800344e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003362:	4ba3      	ldr	r3, [pc, #652]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4ba0      	ldr	r3, [pc, #640]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003376:	2b08      	cmp	r3, #8
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b99      	ldr	r3, [pc, #612]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x108>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e23f      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x74>
 80033aa:	4b91      	ldr	r3, [pc, #580]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a90      	ldr	r2, [pc, #576]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8a      	ldr	r2, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033dc:	4b84      	ldr	r3, [pc, #528]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a83      	ldr	r2, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a80      	ldr	r2, [pc, #512]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe f8ca 	bl	8001594 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe f8c6 	bl	8001594 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e204      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xc0>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe f8b6 	bl	8001594 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe f8b2 	bl	8001594 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1f0      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0xe8>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c4      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4952      	ldr	r1, [pc, #328]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x2b0>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe f86b 	bl	8001594 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fe f867 	bl	8001594 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1a5      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4940      	ldr	r1, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x2b0>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe f84a 	bl	8001594 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe f846 	bl	8001594 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e184      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d030      	beq.n	8003590 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCC_OscConfig+0x2b4>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe f82a 	bl	8001594 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe f826 	bl	8001594 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e164      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x200>
 8003562:	e015      	b.n	8003590 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x2b4>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe f813 	bl	8001594 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003572:	f7fe f80f 	bl	8001594 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e14d      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a0 	beq.w	80036de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d121      	bne.n	800361e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd ffd5 	bl	8001594 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e011      	b.n	8003612 <HAL_RCC_OscConfig+0x2ce>
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	42470000 	.word	0x42470000
 80035f8:	42470e80 	.word	0x42470e80
 80035fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fd ffc8 	bl	8001594 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e106      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x4e4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x2f0>
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	e01c      	b.n	800366e <HAL_RCC_OscConfig+0x32a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d10c      	bne.n	8003656 <HAL_RCC_OscConfig+0x312>
 800363c:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a7a      	ldr	r2, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	4b78      	ldr	r3, [pc, #480]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a77      	ldr	r2, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e00b      	b.n	800366e <HAL_RCC_OscConfig+0x32a>
 8003656:	4b75      	ldr	r3, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a74      	ldr	r2, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a71      	ldr	r2, [pc, #452]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d015      	beq.n	80036a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fd ff8d 	bl	8001594 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fd ff89 	bl	8001594 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0c5      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	4b65      	ldr	r3, [pc, #404]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ee      	beq.n	800367e <HAL_RCC_OscConfig+0x33a>
 80036a0:	e014      	b.n	80036cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7fd ff77 	bl	8001594 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fd ff73 	bl	8001594 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0af      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ee      	bne.n	80036aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b56      	ldr	r3, [pc, #344]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 809b 	beq.w	800381e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d05c      	beq.n	80037ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d141      	bne.n	8003780 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fd ff47 	bl	8001594 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd ff43 	bl	8001594 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e081      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371c:	4b43      	ldr	r3, [pc, #268]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	019b      	lsls	r3, r3, #6
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	3b01      	subs	r3, #1
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	4937      	ldr	r1, [pc, #220]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fd ff1c 	bl	8001594 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd ff18 	bl	8001594 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e056      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x41c>
 800377e:	e04e      	b.n	800381e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <HAL_RCC_OscConfig+0x4ec>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fd ff05 	bl	8001594 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fd ff01 	bl	8001594 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e03f      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x44a>
 80037ac:	e037      	b.n	800381e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e032      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d028      	beq.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d121      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d11a      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d111      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d107      	bne.n	800381a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40007000 	.word	0x40007000
 800382c:	40023800 	.word	0x40023800
 8003830:	42470060 	.word	0x42470060

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0cc      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d90c      	bls.n	8003870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0b8      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	494d      	ldr	r1, [pc, #308]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d044      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e07f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e067      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4934      	ldr	r1, [pc, #208]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fd fe36 	bl	8001594 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fd fe32 	bl	8001594 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e04f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d20c      	bcs.n	800397c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e032      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4916      	ldr	r1, [pc, #88]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ba:	f000 f821 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 80039be:	4602      	mov	r2, r0
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	5ccb      	ldrb	r3, [r1, r3]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fd96 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08012d44 	.word	0x08012d44
 80039f8:	20000000 	.word	0x20000000
 80039fc:	20000004 	.word	0x20000004

08003a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	2300      	movs	r3, #0
 8003a12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a18:	4b67      	ldr	r3, [pc, #412]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d00d      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x40>
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	f200 80bd 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x34>
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a32:	e0b7      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a36:	60bb      	str	r3, [r7, #8]
       break;
 8003a38:	e0b7      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3a:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a3c:	60bb      	str	r3, [r7, #8]
      break;
 8003a3e:	e0b4      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a40:	4b5d      	ldr	r3, [pc, #372]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4a:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d04d      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a56:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	ea02 0800 	and.w	r8, r2, r0
 8003a6e:	ea03 0901 	and.w	r9, r3, r1
 8003a72:	4640      	mov	r0, r8
 8003a74:	4649      	mov	r1, r9
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	014b      	lsls	r3, r1, #5
 8003a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a84:	0142      	lsls	r2, r0, #5
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a8e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aa0:	0182      	lsls	r2, r0, #6
 8003aa2:	1a12      	subs	r2, r2, r0
 8003aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa8:	f04f 0000 	mov.w	r0, #0
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	00d9      	lsls	r1, r3, #3
 8003ab2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab6:	00d0      	lsls	r0, r2, #3
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	eb12 0208 	adds.w	r2, r2, r8
 8003ac0:	eb43 0309 	adc.w	r3, r3, r9
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	0259      	lsls	r1, r3, #9
 8003ace:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ad2:	0250      	lsls	r0, r2, #9
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	f7fc fbd4 	bl	8000290 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e04a      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	ea02 0400 	and.w	r4, r2, r0
 8003b0a:	ea03 0501 	and.w	r5, r3, r1
 8003b0e:	4620      	mov	r0, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	014b      	lsls	r3, r1, #5
 8003b1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b20:	0142      	lsls	r2, r0, #5
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	1b00      	subs	r0, r0, r4
 8003b28:	eb61 0105 	sbc.w	r1, r1, r5
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	018b      	lsls	r3, r1, #6
 8003b36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b3a:	0182      	lsls	r2, r0, #6
 8003b3c:	1a12      	subs	r2, r2, r0
 8003b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	00d9      	lsls	r1, r3, #3
 8003b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b50:	00d0      	lsls	r0, r2, #3
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1912      	adds	r2, r2, r4
 8003b58:	eb45 0303 	adc.w	r3, r5, r3
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	0299      	lsls	r1, r3, #10
 8003b66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b6a:	0290      	lsls	r0, r2, #10
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f7fc fb88 	bl	8000290 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	60bb      	str	r3, [r7, #8]
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ba6:	60bb      	str	r3, [r7, #8]
      break;
 8003ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003baa:	68bb      	ldr	r3, [r7, #8]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08012d54 	.word	0x08012d54

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08012d54 	.word	0x08012d54

08003c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e03f      	b.n	8003cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fa66 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f929 	bl	8003ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af02      	add	r7, sp, #8
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d17c      	bne.n	8003de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_Transmit+0x2c>
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e075      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Transmit+0x3e>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e06e      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	; 0x21
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd fc3b 	bl	8001594 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d108      	bne.n	8003d48 <HAL_UART_Transmit+0x82>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e003      	b.n	8003d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d58:	e02a      	b.n	8003db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2180      	movs	r1, #128	; 0x80
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f840 	bl	8003dea <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e036      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e007      	b.n	8003da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cf      	bne.n	8003d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f810 	bl	8003dea <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b090      	sub	sp, #64	; 0x40
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	e050      	b.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d04c      	beq.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0a:	f7fd fbc3 	bl	8001594 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d241      	bcs.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e3a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e5      	bne.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6e:	623a      	str	r2, [r7, #32]
 8003e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	69f9      	ldr	r1, [r7, #28]
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e00f      	b.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d09f      	beq.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3740      	adds	r7, #64	; 0x40
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	b09f      	sub	sp, #124	; 0x7c
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	68d9      	ldr	r1, [r3, #12]
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	ea40 0301 	orr.w	r3, r0, r1
 8003ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f0c:	f021 010c 	bic.w	r1, r1, #12
 8003f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f16:	430b      	orrs	r3, r1
 8003f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	6999      	ldr	r1, [r3, #24]
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	ea40 0301 	orr.w	r3, r0, r1
 8003f30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4bc5      	ldr	r3, [pc, #788]	; (800424c <UART_SetConfig+0x384>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d004      	beq.n	8003f46 <UART_SetConfig+0x7e>
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4bc3      	ldr	r3, [pc, #780]	; (8004250 <UART_SetConfig+0x388>)
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d103      	bne.n	8003f4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f46:	f7ff fe5d 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8003f4a:	6778      	str	r0, [r7, #116]	; 0x74
 8003f4c:	e002      	b.n	8003f54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f4e:	f7ff fe45 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8003f52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	f040 80b6 	bne.w	80040cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f62:	461c      	mov	r4, r3
 8003f64:	f04f 0500 	mov.w	r5, #0
 8003f68:	4622      	mov	r2, r4
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f70:	415b      	adcs	r3, r3
 8003f72:	647b      	str	r3, [r7, #68]	; 0x44
 8003f74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f78:	1912      	adds	r2, r2, r4
 8003f7a:	eb45 0303 	adc.w	r3, r5, r3
 8003f7e:	f04f 0000 	mov.w	r0, #0
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	00d9      	lsls	r1, r3, #3
 8003f88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f8c:	00d0      	lsls	r0, r2, #3
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	1911      	adds	r1, r2, r4
 8003f94:	6639      	str	r1, [r7, #96]	; 0x60
 8003f96:	416b      	adcs	r3, r5
 8003f98:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003fb4:	f7fc f96c 	bl	8000290 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4ba5      	ldr	r3, [pc, #660]	; (8004254 <UART_SetConfig+0x38c>)
 8003fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	011e      	lsls	r6, r3, #4
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	461c      	mov	r4, r3
 8003fca:	f04f 0500 	mov.w	r5, #0
 8003fce:	4622      	mov	r2, r4
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	1891      	adds	r1, r2, r2
 8003fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fd6:	415b      	adcs	r3, r3
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fde:	1912      	adds	r2, r2, r4
 8003fe0:	eb45 0303 	adc.w	r3, r5, r3
 8003fe4:	f04f 0000 	mov.w	r0, #0
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	00d9      	lsls	r1, r3, #3
 8003fee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ff2:	00d0      	lsls	r0, r2, #3
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	1911      	adds	r1, r2, r4
 8003ffa:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ffc:	416b      	adcs	r3, r5
 8003ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	461a      	mov	r2, r3
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	1891      	adds	r1, r2, r2
 800400c:	62b9      	str	r1, [r7, #40]	; 0x28
 800400e:	415b      	adcs	r3, r3
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004016:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800401a:	f7fc f939 	bl	8000290 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4b8c      	ldr	r3, [pc, #560]	; (8004254 <UART_SetConfig+0x38c>)
 8004024:	fba3 1302 	umull	r1, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	2164      	movs	r1, #100	; 0x64
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	3332      	adds	r3, #50	; 0x32
 8004036:	4a87      	ldr	r2, [pc, #540]	; (8004254 <UART_SetConfig+0x38c>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004044:	441e      	add	r6, r3
 8004046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004048:	4618      	mov	r0, r3
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	1894      	adds	r4, r2, r2
 8004054:	623c      	str	r4, [r7, #32]
 8004056:	415b      	adcs	r3, r3
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800405e:	1812      	adds	r2, r2, r0
 8004060:	eb41 0303 	adc.w	r3, r1, r3
 8004064:	f04f 0400 	mov.w	r4, #0
 8004068:	f04f 0500 	mov.w	r5, #0
 800406c:	00dd      	lsls	r5, r3, #3
 800406e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004072:	00d4      	lsls	r4, r2, #3
 8004074:	4622      	mov	r2, r4
 8004076:	462b      	mov	r3, r5
 8004078:	1814      	adds	r4, r2, r0
 800407a:	653c      	str	r4, [r7, #80]	; 0x50
 800407c:	414b      	adcs	r3, r1
 800407e:	657b      	str	r3, [r7, #84]	; 0x54
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	461a      	mov	r2, r3
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	1891      	adds	r1, r2, r2
 800408c:	61b9      	str	r1, [r7, #24]
 800408e:	415b      	adcs	r3, r3
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004096:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800409a:	f7fc f8f9 	bl	8000290 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <UART_SetConfig+0x38c>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2164      	movs	r1, #100	; 0x64
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	3332      	adds	r3, #50	; 0x32
 80040b6:	4a67      	ldr	r2, [pc, #412]	; (8004254 <UART_SetConfig+0x38c>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	f003 0207 	and.w	r2, r3, #7
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4432      	add	r2, r6
 80040c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ca:	e0b9      	b.n	8004240 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ce:	461c      	mov	r4, r3
 80040d0:	f04f 0500 	mov.w	r5, #0
 80040d4:	4622      	mov	r2, r4
 80040d6:	462b      	mov	r3, r5
 80040d8:	1891      	adds	r1, r2, r2
 80040da:	6139      	str	r1, [r7, #16]
 80040dc:	415b      	adcs	r3, r3
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040e4:	1912      	adds	r2, r2, r4
 80040e6:	eb45 0303 	adc.w	r3, r5, r3
 80040ea:	f04f 0000 	mov.w	r0, #0
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	00d9      	lsls	r1, r3, #3
 80040f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040f8:	00d0      	lsls	r0, r2, #3
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	eb12 0804 	adds.w	r8, r2, r4
 8004102:	eb43 0905 	adc.w	r9, r3, r5
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	008b      	lsls	r3, r1, #2
 800411a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800411e:	0082      	lsls	r2, r0, #2
 8004120:	4640      	mov	r0, r8
 8004122:	4649      	mov	r1, r9
 8004124:	f7fc f8b4 	bl	8000290 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4b49      	ldr	r3, [pc, #292]	; (8004254 <UART_SetConfig+0x38c>)
 800412e:	fba3 2302 	umull	r2, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	011e      	lsls	r6, r3, #4
 8004136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004138:	4618      	mov	r0, r3
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	1894      	adds	r4, r2, r2
 8004144:	60bc      	str	r4, [r7, #8]
 8004146:	415b      	adcs	r3, r3
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800414e:	1812      	adds	r2, r2, r0
 8004150:	eb41 0303 	adc.w	r3, r1, r3
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	f04f 0500 	mov.w	r5, #0
 800415c:	00dd      	lsls	r5, r3, #3
 800415e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004162:	00d4      	lsls	r4, r2, #3
 8004164:	4622      	mov	r2, r4
 8004166:	462b      	mov	r3, r5
 8004168:	1814      	adds	r4, r2, r0
 800416a:	64bc      	str	r4, [r7, #72]	; 0x48
 800416c:	414b      	adcs	r3, r1
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	008b      	lsls	r3, r1, #2
 8004184:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004188:	0082      	lsls	r2, r0, #2
 800418a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800418e:	f7fc f87f 	bl	8000290 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <UART_SetConfig+0x38c>)
 8004198:	fba3 1302 	umull	r1, r3, r3, r2
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	2164      	movs	r1, #100	; 0x64
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	3332      	adds	r3, #50	; 0x32
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <UART_SetConfig+0x38c>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b6:	441e      	add	r6, r3
 80041b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ba:	4618      	mov	r0, r3
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	1894      	adds	r4, r2, r2
 80041c6:	603c      	str	r4, [r7, #0]
 80041c8:	415b      	adcs	r3, r3
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041d0:	1812      	adds	r2, r2, r0
 80041d2:	eb41 0303 	adc.w	r3, r1, r3
 80041d6:	f04f 0400 	mov.w	r4, #0
 80041da:	f04f 0500 	mov.w	r5, #0
 80041de:	00dd      	lsls	r5, r3, #3
 80041e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041e4:	00d4      	lsls	r4, r2, #3
 80041e6:	4622      	mov	r2, r4
 80041e8:	462b      	mov	r3, r5
 80041ea:	eb12 0a00 	adds.w	sl, r2, r0
 80041ee:	eb43 0b01 	adc.w	fp, r3, r1
 80041f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f04f 0100 	mov.w	r1, #0
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800420a:	0082      	lsls	r2, r0, #2
 800420c:	4650      	mov	r0, sl
 800420e:	4659      	mov	r1, fp
 8004210:	f7fc f83e 	bl	8000290 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <UART_SetConfig+0x38c>)
 800421a:	fba3 1302 	umull	r1, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2164      	movs	r1, #100	; 0x64
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	3332      	adds	r3, #50	; 0x32
 800422c:	4a09      	ldr	r2, [pc, #36]	; (8004254 <UART_SetConfig+0x38c>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	f003 020f 	and.w	r2, r3, #15
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4432      	add	r2, r6
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	377c      	adds	r7, #124	; 0x7c
 8004244:	46bd      	mov	sp, r7
 8004246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424a:	bf00      	nop
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	51eb851f 	.word	0x51eb851f

08004258 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800425e:	4b8d      	ldr	r3, [pc, #564]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004260:	22c0      	movs	r2, #192	; 0xc0
 8004262:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004264:	4b8b      	ldr	r3, [pc, #556]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004266:	22a8      	movs	r2, #168	; 0xa8
 8004268:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800426a:	4b8a      	ldr	r3, [pc, #552]	; (8004494 <MX_LWIP_Init+0x23c>)
 800426c:	2200      	movs	r2, #0
 800426e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004270:	4b88      	ldr	r3, [pc, #544]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004272:	227b      	movs	r2, #123	; 0x7b
 8004274:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004276:	4b88      	ldr	r3, [pc, #544]	; (8004498 <MX_LWIP_Init+0x240>)
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800427c:	4b86      	ldr	r3, [pc, #536]	; (8004498 <MX_LWIP_Init+0x240>)
 800427e:	22ff      	movs	r2, #255	; 0xff
 8004280:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004282:	4b85      	ldr	r3, [pc, #532]	; (8004498 <MX_LWIP_Init+0x240>)
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004288:	4b83      	ldr	r3, [pc, #524]	; (8004498 <MX_LWIP_Init+0x240>)
 800428a:	2200      	movs	r2, #0
 800428c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800428e:	4b83      	ldr	r3, [pc, #524]	; (800449c <MX_LWIP_Init+0x244>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004294:	4b81      	ldr	r3, [pc, #516]	; (800449c <MX_LWIP_Init+0x244>)
 8004296:	2200      	movs	r2, #0
 8004298:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800429a:	4b80      	ldr	r3, [pc, #512]	; (800449c <MX_LWIP_Init+0x244>)
 800429c:	2200      	movs	r2, #0
 800429e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80042a0:	4b7e      	ldr	r3, [pc, #504]	; (800449c <MX_LWIP_Init+0x244>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80042a6:	f000 fd1d 	bl	8004ce4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80042aa:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	061a      	lsls	r2, r3, #24
 80042b0:	4b78      	ldr	r3, [pc, #480]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	4b76      	ldr	r3, [pc, #472]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042ba:	789b      	ldrb	r3, [r3, #2]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	4313      	orrs	r3, r2
 80042c0:	4a74      	ldr	r2, [pc, #464]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042c2:	78d2      	ldrb	r2, [r2, #3]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	061a      	lsls	r2, r3, #24
 80042c8:	4b72      	ldr	r3, [pc, #456]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	0619      	lsls	r1, r3, #24
 80042ce:	4b71      	ldr	r3, [pc, #452]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	4319      	orrs	r1, r3
 80042d6:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042d8:	789b      	ldrb	r3, [r3, #2]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	430b      	orrs	r3, r1
 80042de:	496d      	ldr	r1, [pc, #436]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042e0:	78c9      	ldrb	r1, [r1, #3]
 80042e2:	430b      	orrs	r3, r1
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042ea:	431a      	orrs	r2, r3
 80042ec:	4b69      	ldr	r3, [pc, #420]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	0619      	lsls	r1, r3, #24
 80042f2:	4b68      	ldr	r3, [pc, #416]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	4319      	orrs	r1, r3
 80042fa:	4b66      	ldr	r3, [pc, #408]	; (8004494 <MX_LWIP_Init+0x23c>)
 80042fc:	789b      	ldrb	r3, [r3, #2]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	430b      	orrs	r3, r1
 8004302:	4964      	ldr	r1, [pc, #400]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004304:	78c9      	ldrb	r1, [r1, #3]
 8004306:	430b      	orrs	r3, r1
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800430e:	431a      	orrs	r2, r3
 8004310:	4b60      	ldr	r3, [pc, #384]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	0619      	lsls	r1, r3, #24
 8004316:	4b5f      	ldr	r3, [pc, #380]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	4319      	orrs	r1, r3
 800431e:	4b5d      	ldr	r3, [pc, #372]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004320:	789b      	ldrb	r3, [r3, #2]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	430b      	orrs	r3, r1
 8004326:	495b      	ldr	r1, [pc, #364]	; (8004494 <MX_LWIP_Init+0x23c>)
 8004328:	78c9      	ldrb	r1, [r1, #3]
 800432a:	430b      	orrs	r3, r1
 800432c:	0e1b      	lsrs	r3, r3, #24
 800432e:	4313      	orrs	r3, r2
 8004330:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <MX_LWIP_Init+0x248>)
 8004332:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004334:	4b58      	ldr	r3, [pc, #352]	; (8004498 <MX_LWIP_Init+0x240>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	061a      	lsls	r2, r3, #24
 800433a:	4b57      	ldr	r3, [pc, #348]	; (8004498 <MX_LWIP_Init+0x240>)
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	4b55      	ldr	r3, [pc, #340]	; (8004498 <MX_LWIP_Init+0x240>)
 8004344:	789b      	ldrb	r3, [r3, #2]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4313      	orrs	r3, r2
 800434a:	4a53      	ldr	r2, [pc, #332]	; (8004498 <MX_LWIP_Init+0x240>)
 800434c:	78d2      	ldrb	r2, [r2, #3]
 800434e:	4313      	orrs	r3, r2
 8004350:	061a      	lsls	r2, r3, #24
 8004352:	4b51      	ldr	r3, [pc, #324]	; (8004498 <MX_LWIP_Init+0x240>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	0619      	lsls	r1, r3, #24
 8004358:	4b4f      	ldr	r3, [pc, #316]	; (8004498 <MX_LWIP_Init+0x240>)
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	4319      	orrs	r1, r3
 8004360:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <MX_LWIP_Init+0x240>)
 8004362:	789b      	ldrb	r3, [r3, #2]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	430b      	orrs	r3, r1
 8004368:	494b      	ldr	r1, [pc, #300]	; (8004498 <MX_LWIP_Init+0x240>)
 800436a:	78c9      	ldrb	r1, [r1, #3]
 800436c:	430b      	orrs	r3, r1
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004374:	431a      	orrs	r2, r3
 8004376:	4b48      	ldr	r3, [pc, #288]	; (8004498 <MX_LWIP_Init+0x240>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	0619      	lsls	r1, r3, #24
 800437c:	4b46      	ldr	r3, [pc, #280]	; (8004498 <MX_LWIP_Init+0x240>)
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	4319      	orrs	r1, r3
 8004384:	4b44      	ldr	r3, [pc, #272]	; (8004498 <MX_LWIP_Init+0x240>)
 8004386:	789b      	ldrb	r3, [r3, #2]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	430b      	orrs	r3, r1
 800438c:	4942      	ldr	r1, [pc, #264]	; (8004498 <MX_LWIP_Init+0x240>)
 800438e:	78c9      	ldrb	r1, [r1, #3]
 8004390:	430b      	orrs	r3, r1
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004398:	431a      	orrs	r2, r3
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <MX_LWIP_Init+0x240>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	0619      	lsls	r1, r3, #24
 80043a0:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <MX_LWIP_Init+0x240>)
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	4319      	orrs	r1, r3
 80043a8:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <MX_LWIP_Init+0x240>)
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	430b      	orrs	r3, r1
 80043b0:	4939      	ldr	r1, [pc, #228]	; (8004498 <MX_LWIP_Init+0x240>)
 80043b2:	78c9      	ldrb	r1, [r1, #3]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	0e1b      	lsrs	r3, r3, #24
 80043b8:	4313      	orrs	r3, r2
 80043ba:	4a3a      	ldr	r2, [pc, #232]	; (80044a4 <MX_LWIP_Init+0x24c>)
 80043bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80043be:	4b37      	ldr	r3, [pc, #220]	; (800449c <MX_LWIP_Init+0x244>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	061a      	lsls	r2, r3, #24
 80043c4:	4b35      	ldr	r3, [pc, #212]	; (800449c <MX_LWIP_Init+0x244>)
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <MX_LWIP_Init+0x244>)
 80043ce:	789b      	ldrb	r3, [r3, #2]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	4313      	orrs	r3, r2
 80043d4:	4a31      	ldr	r2, [pc, #196]	; (800449c <MX_LWIP_Init+0x244>)
 80043d6:	78d2      	ldrb	r2, [r2, #3]
 80043d8:	4313      	orrs	r3, r2
 80043da:	061a      	lsls	r2, r3, #24
 80043dc:	4b2f      	ldr	r3, [pc, #188]	; (800449c <MX_LWIP_Init+0x244>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	0619      	lsls	r1, r3, #24
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <MX_LWIP_Init+0x244>)
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	4319      	orrs	r1, r3
 80043ea:	4b2c      	ldr	r3, [pc, #176]	; (800449c <MX_LWIP_Init+0x244>)
 80043ec:	789b      	ldrb	r3, [r3, #2]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	430b      	orrs	r3, r1
 80043f2:	492a      	ldr	r1, [pc, #168]	; (800449c <MX_LWIP_Init+0x244>)
 80043f4:	78c9      	ldrb	r1, [r1, #3]
 80043f6:	430b      	orrs	r3, r1
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043fe:	431a      	orrs	r2, r3
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <MX_LWIP_Init+0x244>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	0619      	lsls	r1, r3, #24
 8004406:	4b25      	ldr	r3, [pc, #148]	; (800449c <MX_LWIP_Init+0x244>)
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	4319      	orrs	r1, r3
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <MX_LWIP_Init+0x244>)
 8004410:	789b      	ldrb	r3, [r3, #2]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	430b      	orrs	r3, r1
 8004416:	4921      	ldr	r1, [pc, #132]	; (800449c <MX_LWIP_Init+0x244>)
 8004418:	78c9      	ldrb	r1, [r1, #3]
 800441a:	430b      	orrs	r3, r1
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004422:	431a      	orrs	r2, r3
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <MX_LWIP_Init+0x244>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	0619      	lsls	r1, r3, #24
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <MX_LWIP_Init+0x244>)
 800442c:	785b      	ldrb	r3, [r3, #1]
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	4319      	orrs	r1, r3
 8004432:	4b1a      	ldr	r3, [pc, #104]	; (800449c <MX_LWIP_Init+0x244>)
 8004434:	789b      	ldrb	r3, [r3, #2]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	430b      	orrs	r3, r1
 800443a:	4918      	ldr	r1, [pc, #96]	; (800449c <MX_LWIP_Init+0x244>)
 800443c:	78c9      	ldrb	r1, [r1, #3]
 800443e:	430b      	orrs	r3, r1
 8004440:	0e1b      	lsrs	r3, r3, #24
 8004442:	4313      	orrs	r3, r2
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <MX_LWIP_Init+0x250>)
 8004446:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <MX_LWIP_Init+0x254>)
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <MX_LWIP_Init+0x258>)
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	2300      	movs	r3, #0
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <MX_LWIP_Init+0x250>)
 8004456:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <MX_LWIP_Init+0x24c>)
 8004458:	4911      	ldr	r1, [pc, #68]	; (80044a0 <MX_LWIP_Init+0x248>)
 800445a:	4816      	ldr	r0, [pc, #88]	; (80044b4 <MX_LWIP_Init+0x25c>)
 800445c:	f001 f92e 	bl	80056bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004460:	4814      	ldr	r0, [pc, #80]	; (80044b4 <MX_LWIP_Init+0x25c>)
 8004462:	f001 fadd 	bl	8005a20 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <MX_LWIP_Init+0x25c>)
 8004468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004478:	480e      	ldr	r0, [pc, #56]	; (80044b4 <MX_LWIP_Init+0x25c>)
 800447a:	f001 fae1 	bl	8005a40 <netif_set_up>
 800447e:	e002      	b.n	8004486 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004480:	480c      	ldr	r0, [pc, #48]	; (80044b4 <MX_LWIP_Init+0x25c>)
 8004482:	f001 fb49 	bl	8005b18 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004486:	490c      	ldr	r1, [pc, #48]	; (80044b8 <MX_LWIP_Init+0x260>)
 8004488:	480a      	ldr	r0, [pc, #40]	; (80044b4 <MX_LWIP_Init+0x25c>)
 800448a:	f001 fbdb 	bl	8005c44 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	200002f8 	.word	0x200002f8
 8004498:	200002f4 	.word	0x200002f4
 800449c:	200002b4 	.word	0x200002b4
 80044a0:	200002ec 	.word	0x200002ec
 80044a4:	200002fc 	.word	0x200002fc
 80044a8:	20000300 	.word	0x20000300
 80044ac:	0800eb3d 	.word	0x0800eb3d
 80044b0:	080047c1 	.word	0x080047c1
 80044b4:	200002b8 	.word	0x200002b8
 80044b8:	0800450d 	.word	0x0800450d

080044bc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80044c4:	f7fd f866 	bl	8001594 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <Ethernet_Link_Periodic_Handle+0x30>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b63      	cmp	r3, #99	; 0x63
 80044d2:	d907      	bls.n	80044e4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80044d4:	f7fd f85e 	bl	8001594 <HAL_GetTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <Ethernet_Link_Periodic_Handle+0x30>)
 80044dc:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fad6 	bl	8004a90 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	200002f0 	.word	0x200002f0

080044f0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80044f4:	4804      	ldr	r0, [pc, #16]	; (8004508 <MX_LWIP_Process+0x18>)
 80044f6:	f000 f943 	bl	8004780 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80044fa:	f007 fc21 	bl	800bd40 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80044fe:	4802      	ldr	r0, [pc, #8]	; (8004508 <MX_LWIP_Process+0x18>)
 8004500:	f7ff ffdc 	bl	80044bc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	200002b8 	.word	0x200002b8

0800450c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <low_level_init+0x110>)
 800452e:	4a41      	ldr	r2, [pc, #260]	; (8004634 <low_level_init+0x114>)
 8004530:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004532:	2300      	movs	r3, #0
 8004534:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800453a:	23e1      	movs	r3, #225	; 0xe1
 800453c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800453e:	2300      	movs	r3, #0
 8004540:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004542:	2300      	movs	r3, #0
 8004544:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004546:	2300      	movs	r3, #0
 8004548:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800454a:	4a39      	ldr	r2, [pc, #228]	; (8004630 <low_level_init+0x110>)
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <low_level_init+0x110>)
 8004554:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004558:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800455a:	4b35      	ldr	r3, [pc, #212]	; (8004630 <low_level_init+0x110>)
 800455c:	4a36      	ldr	r2, [pc, #216]	; (8004638 <low_level_init+0x118>)
 800455e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004560:	4b33      	ldr	r3, [pc, #204]	; (8004630 <low_level_init+0x110>)
 8004562:	4a36      	ldr	r2, [pc, #216]	; (800463c <low_level_init+0x11c>)
 8004564:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004566:	4b32      	ldr	r3, [pc, #200]	; (8004630 <low_level_init+0x110>)
 8004568:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800456c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800456e:	4830      	ldr	r0, [pc, #192]	; (8004630 <low_level_init+0x110>)
 8004570:	f7fd f940 	bl	80017f4 <HAL_ETH_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004578:	2238      	movs	r2, #56	; 0x38
 800457a:	2100      	movs	r1, #0
 800457c:	4830      	ldr	r0, [pc, #192]	; (8004640 <low_level_init+0x120>)
 800457e:	f00a fc0d 	bl	800ed9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004582:	4b2f      	ldr	r3, [pc, #188]	; (8004640 <low_level_init+0x120>)
 8004584:	2221      	movs	r2, #33	; 0x21
 8004586:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004588:	4b2d      	ldr	r3, [pc, #180]	; (8004640 <low_level_init+0x120>)
 800458a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800458e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004590:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <low_level_init+0x120>)
 8004592:	2200      	movs	r2, #0
 8004594:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004596:	482b      	ldr	r0, [pc, #172]	; (8004644 <low_level_init+0x124>)
 8004598:	f000 ff58 	bl	800544c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2206      	movs	r2, #6
 80045a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <low_level_init+0x110>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80045b0:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <low_level_init+0x110>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	785a      	ldrb	r2, [r3, #1]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80045bc:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <low_level_init+0x110>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	789a      	ldrb	r2, [r3, #2]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <low_level_init+0x110>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	78da      	ldrb	r2, [r3, #3]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <low_level_init+0x110>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	791a      	ldrb	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <low_level_init+0x110>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	795a      	ldrb	r2, [r3, #5]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80045f2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045fa:	f043 030a 	orr.w	r3, r3, #10
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004606:	4910      	ldr	r1, [pc, #64]	; (8004648 <low_level_init+0x128>)
 8004608:	4810      	ldr	r0, [pc, #64]	; (800464c <low_level_init+0x12c>)
 800460a:	f7fc fdfc 	bl	8001206 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800460e:	480f      	ldr	r0, [pc, #60]	; (800464c <low_level_init+0x12c>)
 8004610:	f7fc fe2b 	bl	800126a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa38 	bl	8004a90 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004620:	e001      	b.n	8004626 <low_level_init+0x106>
    Error_Handler();
 8004622:	f7fc f987 	bl	8000934 <Error_Handler>
}
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20004de8 	.word	0x20004de8
 8004634:	40028000 	.word	0x40028000
 8004638:	20000304 	.word	0x20000304
 800463c:	20004d28 	.word	0x20004d28
 8004640:	20004e98 	.word	0x20004e98
 8004644:	08012d5c 	.word	0x08012d5c
 8004648:	2000000c 	.word	0x2000000c
 800464c:	20004dc8 	.word	0x20004dc8

08004650 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b092      	sub	sp, #72	; 0x48
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	2230      	movs	r2, #48	; 0x30
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f00a fb93 	bl	800ed9c <memset>

  for(q = p; q != NULL; q = q->next)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	643b      	str	r3, [r7, #64]	; 0x40
 800467a:	e049      	b.n	8004710 <low_level_output+0xc0>
  {
    if(i >= ETH_TX_DESC_CNT)
 800467c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467e:	2b03      	cmp	r3, #3
 8004680:	d902      	bls.n	8004688 <low_level_output+0x38>
      return ERR_IF;
 8004682:	f06f 030b 	mvn.w	r3, #11
 8004686:	e059      	b.n	800473c <low_level_output+0xec>

    Txbuffer[i].buffer = q->payload;
 8004688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800469a:	4413      	add	r3, r2
 800469c:	3b3c      	subs	r3, #60	; 0x3c
 800469e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046b4:	4413      	add	r3, r2
 80046b6:	3b38      	subs	r3, #56	; 0x38
 80046b8:	6019      	str	r1, [r3, #0]

    if(i>0)
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <low_level_output+0x96>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	1e5a      	subs	r2, r3, #1
 80046c4:	f107 000c 	add.w	r0, r7, #12
 80046c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046ca:	460b      	mov	r3, r1
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	440b      	add	r3, r1
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	18c1      	adds	r1, r0, r3
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046e0:	4413      	add	r3, r2
 80046e2:	3b34      	subs	r3, #52	; 0x34
 80046e4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80046e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <low_level_output+0xb4>
    {
      Txbuffer[i].next = NULL;
 80046ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f0:	4613      	mov	r3, r2
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046fc:	4413      	add	r3, r2
 80046fe:	3b34      	subs	r3, #52	; 0x34
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004706:	3301      	adds	r3, #1
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800470a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1b2      	bne.n	800467c <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	891b      	ldrh	r3, [r3, #8]
 800471a:	461a      	mov	r2, r3
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <low_level_output+0xf4>)
 800471e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <low_level_output+0xf4>)
 8004722:	f107 030c 	add.w	r3, r7, #12
 8004726:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004728:	4a06      	ldr	r2, [pc, #24]	; (8004744 <low_level_output+0xf4>)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800472e:	2214      	movs	r2, #20
 8004730:	4904      	ldr	r1, [pc, #16]	; (8004744 <low_level_output+0xf4>)
 8004732:	4805      	ldr	r0, [pc, #20]	; (8004748 <low_level_output+0xf8>)
 8004734:	f7fd f96a 	bl	8001a0c <HAL_ETH_Transmit>

  return errval;
 8004738:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800473c:	4618      	mov	r0, r3
 800473e:	3748      	adds	r7, #72	; 0x48
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20004e98 	.word	0x20004e98
 8004748:	20004de8 	.word	0x20004de8

0800474c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <low_level_input+0x2c>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004760:	f107 030c 	add.w	r3, r7, #12
 8004764:	4619      	mov	r1, r3
 8004766:	4805      	ldr	r0, [pc, #20]	; (800477c <low_level_input+0x30>)
 8004768:	f7fd f9e7 	bl	8001b3a <HAL_ETH_ReadData>
  }

  return p;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	200000c4 	.word	0x200000c4
 800477c:	20004de8 	.word	0x20004de8

08004780 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ffdd 	bl	800474c <low_level_input>
 8004792:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	4798      	blx	r3
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f001 fdca 	bl	8006344 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ea      	bne.n	800478c <ethernetif_input+0xc>
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <ethernetif_init+0x1c>
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <ethernetif_init+0x48>)
 80047d0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80047d4:	490d      	ldr	r1, [pc, #52]	; (800480c <ethernetif_init+0x4c>)
 80047d6:	480e      	ldr	r0, [pc, #56]	; (8004810 <ethernetif_init+0x50>)
 80047d8:	f00a fae8 	bl	800edac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2273      	movs	r2, #115	; 0x73
 80047e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2274      	movs	r2, #116	; 0x74
 80047e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <ethernetif_init+0x54>)
 80047f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a08      	ldr	r2, [pc, #32]	; (8004818 <ethernetif_init+0x58>)
 80047f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fe91 	bl	8004520 <low_level_init>

  return ERR_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	08010364 	.word	0x08010364
 800480c:	08010380 	.word	0x08010380
 8004810:	08010390 	.word	0x08010390
 8004814:	0800d001 	.word	0x0800d001
 8004818:	08004651 	.word	0x08004651

0800481c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <pbuf_free_custom+0x30>)
 800482c:	f000 fef0 	bl	8005610 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <pbuf_free_custom+0x34>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <pbuf_free_custom+0x34>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <pbuf_free_custom+0x38>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	08012d5c 	.word	0x08012d5c
 8004850:	200000c4 	.word	0x200000c4
 8004854:	200000c8 	.word	0x200000c8

08004858 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800485c:	f7fc fe9a 	bl	8001594 <HAL_GetTick>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a55      	ldr	r2, [pc, #340]	; (80049dc <HAL_ETH_MspInit+0x174>)
 8004886:	4293      	cmp	r3, r2
 8004888:	f040 80a4 	bne.w	80049d4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 8004896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800489a:	6313      	str	r3, [r2, #48]	; 0x30
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	4b4c      	ldr	r3, [pc, #304]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	4a4b      	ldr	r2, [pc, #300]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048b6:	6313      	str	r3, [r2, #48]	; 0x30
 80048b8:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2300      	movs	r3, #0
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4a44      	ldr	r2, [pc, #272]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048d2:	6313      	str	r3, [r2, #48]	; 0x30
 80048d4:	4b42      	ldr	r3, [pc, #264]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4a3d      	ldr	r2, [pc, #244]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6313      	str	r3, [r2, #48]	; 0x30
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	4a36      	ldr	r2, [pc, #216]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6313      	str	r3, [r2, #48]	; 0x30
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	6313      	str	r3, [r2, #48]	; 0x30
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 800493e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004942:	6313      	str	r3, [r2, #48]	; 0x30
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_ETH_MspInit+0x178>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004950:	2332      	movs	r3, #50	; 0x32
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004960:	230b      	movs	r3, #11
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004968:	4619      	mov	r1, r3
 800496a:	481e      	ldr	r0, [pc, #120]	; (80049e4 <HAL_ETH_MspInit+0x17c>)
 800496c:	f7fe faf2 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004970:	2386      	movs	r3, #134	; 0x86
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004974:	2302      	movs	r3, #2
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497c:	2303      	movs	r3, #3
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004980:	230b      	movs	r3, #11
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004988:	4619      	mov	r1, r3
 800498a:	4817      	ldr	r0, [pc, #92]	; (80049e8 <HAL_ETH_MspInit+0x180>)
 800498c:	f7fe fae2 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	2302      	movs	r3, #2
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049a2:	230b      	movs	r3, #11
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80049a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049aa:	4619      	mov	r1, r3
 80049ac:	480f      	ldr	r0, [pc, #60]	; (80049ec <HAL_ETH_MspInit+0x184>)
 80049ae:	f7fe fad1 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80049b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b8:	2302      	movs	r3, #2
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c0:	2303      	movs	r3, #3
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049c4:	230b      	movs	r3, #11
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049cc:	4619      	mov	r1, r3
 80049ce:	4808      	ldr	r0, [pc, #32]	; (80049f0 <HAL_ETH_MspInit+0x188>)
 80049d0:	f7fe fac0 	bl	8002f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80049d4:	bf00      	nop
 80049d6:	3738      	adds	r7, #56	; 0x38
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40028000 	.word	0x40028000
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40020800 	.word	0x40020800
 80049e8:	40020000 	.word	0x40020000
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40021800 	.word	0x40021800

080049f4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80049f8:	4802      	ldr	r0, [pc, #8]	; (8004a04 <ETH_PHY_IO_Init+0x10>)
 80049fa:	f7fd fb65 	bl	80020c8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20004de8 	.word	0x20004de8

08004a08 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return 0;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	4807      	ldr	r0, [pc, #28]	; (8004a48 <ETH_PHY_IO_ReadReg+0x30>)
 8004a2c:	f7fd f9ba 	bl	8001da4 <HAL_ETH_ReadPHYRegister>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e000      	b.n	8004a3e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20004de8 	.word	0x20004de8

08004a4c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	4807      	ldr	r0, [pc, #28]	; (8004a7c <ETH_PHY_IO_WriteReg+0x30>)
 8004a60:	f7fd f9eb 	bl	8001e3a <HAL_ETH_WritePHYRegister>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	e000      	b.n	8004a72 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20004de8 	.word	0x20004de8

08004a80 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a84:	f7fc fd86 	bl	8001594 <HAL_GetTick>
 8004a88:	4603      	mov	r3, r0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0a0      	sub	sp, #128	; 0x80
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	2264      	movs	r2, #100	; 0x64
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f00a f97b 	bl	800ed9c <memset>
  int32_t PHYLinkState = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004aae:	2300      	movs	r3, #0
 8004ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004ab6:	483a      	ldr	r0, [pc, #232]	; (8004ba0 <ethernet_link_check_state+0x110>)
 8004ab8:	f7fc fc7f 	bl	80013ba <LAN8742_GetLinkState>
 8004abc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <ethernet_link_check_state+0x5a>
 8004ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	dc09      	bgt.n	8004aea <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004ad6:	4833      	ldr	r0, [pc, #204]	; (8004ba4 <ethernet_link_check_state+0x114>)
 8004ad8:	f7fc ff57 	bl	800198a <HAL_ETH_Stop>
    netif_set_down(netif);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 f81b 	bl	8005b18 <netif_set_down>
    netif_set_link_down(netif);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 f87e 	bl	8005be4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004ae8:	e055      	b.n	8004b96 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d14e      	bne.n	8004b96 <ethernet_link_check_state+0x106>
 8004af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	dd4b      	ble.n	8004b96 <ethernet_link_check_state+0x106>
 8004afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b00:	3b02      	subs	r3, #2
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d82a      	bhi.n	8004b5c <ethernet_link_check_state+0xcc>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <ethernet_link_check_state+0x7c>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b2f 	.word	0x08004b2f
 8004b14:	08004b3f 	.word	0x08004b3f
 8004b18:	08004b4f 	.word	0x08004b4f
      duplex = ETH_FULLDUPLEX_MODE;
 8004b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b20:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b26:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b2c:	e017      	b.n	8004b5e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b36:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b3c:	e00f      	b.n	8004b5e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b42:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004b44:	2300      	movs	r3, #0
 8004b46:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b4c:	e007      	b.n	8004b5e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004b52:	2300      	movs	r3, #0
 8004b54:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004b5a:	e000      	b.n	8004b5e <ethernet_link_check_state+0xce>
      break;
 8004b5c:	bf00      	nop
    if(linkchanged)
 8004b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d018      	beq.n	8004b96 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	4619      	mov	r1, r3
 8004b6a:	480e      	ldr	r0, [pc, #56]	; (8004ba4 <ethernet_link_check_state+0x114>)
 8004b6c:	f7fd f9ae 	bl	8001ecc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b76:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4809      	ldr	r0, [pc, #36]	; (8004ba4 <ethernet_link_check_state+0x114>)
 8004b80:	f7fd fa87 	bl	8002092 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004b84:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <ethernet_link_check_state+0x114>)
 8004b86:	f7fc feb3 	bl	80018f0 <HAL_ETH_Start>
      netif_set_up(netif);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 ff58 	bl	8005a40 <netif_set_up>
      netif_set_link_up(netif);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fff3 	bl	8005b7c <netif_set_link_up>
}
 8004b96:	bf00      	nop
 8004b98:	3780      	adds	r7, #128	; 0x80
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20004dc8 	.word	0x20004dc8
 8004ba4:	20004de8 	.word	0x20004de8

08004ba8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004bb0:	4812      	ldr	r0, [pc, #72]	; (8004bfc <HAL_ETH_RxAllocateCallback+0x54>)
 8004bb2:	f000 fcbf 	bl	8005534 <memp_malloc_pool>
 8004bb6:	60f8      	str	r0, [r7, #12]
  if (p)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f103 0220 	add.w	r2, r3, #32
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <HAL_ETH_RxAllocateCallback+0x58>)
 8004bcc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004bd6:	9201      	str	r2, [sp, #4]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2241      	movs	r2, #65	; 0x41
 8004bde:	2100      	movs	r1, #0
 8004be0:	2000      	movs	r0, #0
 8004be2:	f001 f9f5 	bl	8005fd0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004be6:	e005      	b.n	8004bf4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08012d5c 	.word	0x08012d5c
 8004c00:	0800481d 	.word	0x0800481d
 8004c04:	200000c4 	.word	0x200000c4

08004c08 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3b20      	subs	r3, #32
 8004c26:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2200      	movs	r2, #0
 8004c32:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	887a      	ldrh	r2, [r7, #2]
 8004c38:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e003      	b.n	8004c52 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	e009      	b.n	8004c74 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	891a      	ldrh	r2, [r3, #8]
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	4413      	add	r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f2      	bne.n	8004c60 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	3724      	adds	r7, #36	; 0x24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	b21a      	sxth	r2, r3
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	b21b      	sxth	r3, r3
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	b29b      	uxth	r3, r3
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	061a      	lsls	r2, r3, #24
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	4313      	orrs	r3, r2
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004cee:	f000 f8d5 	bl	8004e9c <mem_init>
  memp_init();
 8004cf2:	f000 fbdb 	bl	80054ac <memp_init>
  pbuf_init();
  netif_init();
 8004cf6:	f000 fcd9 	bl	80056ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004cfa:	f007 f863 	bl	800bdc4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004cfe:	f001 fdbf 	bl	8006880 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004d02:	f006 ffd5 	bl	800bcb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <ptr_to_mem+0x20>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	4413      	add	r3, r2
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	200000cc 	.word	0x200000cc

08004d34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <mem_to_ptr+0x20>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b29b      	uxth	r3, r3
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	200000cc 	.word	0x200000cc

08004d58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004d60:	4b45      	ldr	r3, [pc, #276]	; (8004e78 <plug_holes+0x120>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d206      	bcs.n	8004d78 <plug_holes+0x20>
 8004d6a:	4b44      	ldr	r3, [pc, #272]	; (8004e7c <plug_holes+0x124>)
 8004d6c:	f240 12df 	movw	r2, #479	; 0x1df
 8004d70:	4943      	ldr	r1, [pc, #268]	; (8004e80 <plug_holes+0x128>)
 8004d72:	4844      	ldr	r0, [pc, #272]	; (8004e84 <plug_holes+0x12c>)
 8004d74:	f00a f81a 	bl	800edac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004d78:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <plug_holes+0x130>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d306      	bcc.n	8004d90 <plug_holes+0x38>
 8004d82:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <plug_holes+0x124>)
 8004d84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004d88:	4940      	ldr	r1, [pc, #256]	; (8004e8c <plug_holes+0x134>)
 8004d8a:	483e      	ldr	r0, [pc, #248]	; (8004e84 <plug_holes+0x12c>)
 8004d8c:	f00a f80e 	bl	800edac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	791b      	ldrb	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <plug_holes+0x4e>
 8004d98:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <plug_holes+0x124>)
 8004d9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004d9e:	493c      	ldr	r1, [pc, #240]	; (8004e90 <plug_holes+0x138>)
 8004da0:	4838      	ldr	r0, [pc, #224]	; (8004e84 <plug_holes+0x12c>)
 8004da2:	f00a f803 	bl	800edac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dae:	d906      	bls.n	8004dbe <plug_holes+0x66>
 8004db0:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <plug_holes+0x124>)
 8004db2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004db6:	4937      	ldr	r1, [pc, #220]	; (8004e94 <plug_holes+0x13c>)
 8004db8:	4832      	ldr	r0, [pc, #200]	; (8004e84 <plug_holes+0x12c>)
 8004dba:	f009 fff7 	bl	800edac <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ffa4 	bl	8004d10 <ptr_to_mem>
 8004dc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d024      	beq.n	8004e1c <plug_holes+0xc4>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	791b      	ldrb	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d120      	bne.n	8004e1c <plug_holes+0xc4>
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <plug_holes+0x130>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d01b      	beq.n	8004e1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <plug_holes+0x140>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d102      	bne.n	8004df4 <plug_holes+0x9c>
      lfree = mem;
 8004dee:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <plug_holes+0x140>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e04:	d00a      	beq.n	8004e1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff80 	bl	8004d10 <ptr_to_mem>
 8004e10:	4604      	mov	r4, r0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff8e 	bl	8004d34 <mem_to_ptr>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	885b      	ldrh	r3, [r3, #2]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ff75 	bl	8004d10 <ptr_to_mem>
 8004e26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d01f      	beq.n	8004e70 <plug_holes+0x118>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	791b      	ldrb	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11b      	bne.n	8004e70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004e38:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <plug_holes+0x140>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d102      	bne.n	8004e48 <plug_holes+0xf0>
      lfree = pmem;
 8004e42:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <plug_holes+0x140>)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e58:	d00a      	beq.n	8004e70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ff56 	bl	8004d10 <ptr_to_mem>
 8004e64:	4604      	mov	r4, r0
 8004e66:	68b8      	ldr	r0, [r7, #8]
 8004e68:	f7ff ff64 	bl	8004d34 <mem_to_ptr>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd90      	pop	{r4, r7, pc}
 8004e78:	200000cc 	.word	0x200000cc
 8004e7c:	080103b8 	.word	0x080103b8
 8004e80:	080103e8 	.word	0x080103e8
 8004e84:	08010400 	.word	0x08010400
 8004e88:	200000d0 	.word	0x200000d0
 8004e8c:	08010428 	.word	0x08010428
 8004e90:	08010444 	.word	0x08010444
 8004e94:	08010460 	.word	0x08010460
 8004e98:	200000d4 	.word	0x200000d4

08004e9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ea2:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <mem_init+0x68>)
 8004ea4:	3303      	adds	r3, #3
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <mem_init+0x6c>)
 8004eae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <mem_init+0x6c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ebc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004eca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004ece:	f7ff ff1f 	bl	8004d10 <ptr_to_mem>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a0d      	ldr	r2, [pc, #52]	; (8004f0c <mem_init+0x70>)
 8004ed6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <mem_init+0x70>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2201      	movs	r2, #1
 8004ede:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <mem_init+0x70>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ee8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <mem_init+0x70>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ef2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <mem_init+0x6c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <mem_init+0x74>)
 8004efa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20004ee8 	.word	0x20004ee8
 8004f08:	200000cc 	.word	0x200000cc
 8004f0c:	200000d0 	.word	0x200000d0
 8004f10:	200000d4 	.word	0x200000d4

08004f14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ff09 	bl	8004d34 <mem_to_ptr>
 8004f22:	4603      	mov	r3, r0
 8004f24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fef0 	bl	8004d10 <ptr_to_mem>
 8004f30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff feea 	bl	8004d10 <ptr_to_mem>
 8004f3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f46:	d818      	bhi.n	8004f7a <mem_link_valid+0x66>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	885b      	ldrh	r3, [r3, #2]
 8004f4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f50:	d813      	bhi.n	8004f7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f56:	8afa      	ldrh	r2, [r7, #22]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d004      	beq.n	8004f66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	8afa      	ldrh	r2, [r7, #22]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d109      	bne.n	8004f7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <mem_link_valid+0x74>)
 8004f68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d006      	beq.n	8004f7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	885b      	ldrh	r3, [r3, #2]
 8004f74:	8afa      	ldrh	r2, [r7, #22]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d001      	beq.n	8004f7e <mem_link_valid+0x6a>
    return 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <mem_link_valid+0x6c>
  }
  return 1;
 8004f7e:	2301      	movs	r3, #1
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200000d0 	.word	0x200000d0

08004f8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04c      	beq.n	8005034 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <mem_free+0xb0>)
 8004fa6:	f240 2273 	movw	r2, #627	; 0x273
 8004faa:	4925      	ldr	r1, [pc, #148]	; (8005040 <mem_free+0xb4>)
 8004fac:	4825      	ldr	r0, [pc, #148]	; (8005044 <mem_free+0xb8>)
 8004fae:	f009 fefd 	bl	800edac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004fb2:	e040      	b.n	8005036 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3b08      	subs	r3, #8
 8004fb8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <mem_free+0xbc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d306      	bcc.n	8004fd2 <mem_free+0x46>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f103 020c 	add.w	r2, r3, #12
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <mem_free+0xc0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d907      	bls.n	8004fe2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <mem_free+0xb0>)
 8004fd4:	f240 227f 	movw	r2, #639	; 0x27f
 8004fd8:	491d      	ldr	r1, [pc, #116]	; (8005050 <mem_free+0xc4>)
 8004fda:	481a      	ldr	r0, [pc, #104]	; (8005044 <mem_free+0xb8>)
 8004fdc:	f009 fee6 	bl	800edac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004fe0:	e029      	b.n	8005036 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	791b      	ldrb	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <mem_free+0xb0>)
 8004fec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004ff0:	4918      	ldr	r1, [pc, #96]	; (8005054 <mem_free+0xc8>)
 8004ff2:	4814      	ldr	r0, [pc, #80]	; (8005044 <mem_free+0xb8>)
 8004ff4:	f009 feda 	bl	800edac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ff8:	e01d      	b.n	8005036 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff8a 	bl	8004f14 <mem_link_valid>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d107      	bne.n	8005016 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <mem_free+0xb0>)
 8005008:	f240 2295 	movw	r2, #661	; 0x295
 800500c:	4912      	ldr	r1, [pc, #72]	; (8005058 <mem_free+0xcc>)
 800500e:	480d      	ldr	r0, [pc, #52]	; (8005044 <mem_free+0xb8>)
 8005010:	f009 fecc 	bl	800edac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005014:	e00f      	b.n	8005036 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <mem_free+0xd0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	429a      	cmp	r2, r3
 8005024:	d202      	bcs.n	800502c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005026:	4a0d      	ldr	r2, [pc, #52]	; (800505c <mem_free+0xd0>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff fe93 	bl	8004d58 <plug_holes>
 8005032:	e000      	b.n	8005036 <mem_free+0xaa>
    return;
 8005034:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	080103b8 	.word	0x080103b8
 8005040:	0801048c 	.word	0x0801048c
 8005044:	08010400 	.word	0x08010400
 8005048:	200000cc 	.word	0x200000cc
 800504c:	200000d0 	.word	0x200000d0
 8005050:	080104b0 	.word	0x080104b0
 8005054:	080104cc 	.word	0x080104cc
 8005058:	080104f4 	.word	0x080104f4
 800505c:	200000d4 	.word	0x200000d4

08005060 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800506c:	887b      	ldrh	r3, [r7, #2]
 800506e:	3303      	adds	r3, #3
 8005070:	b29b      	uxth	r3, r3
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005078:	8bfb      	ldrh	r3, [r7, #30]
 800507a:	2b0b      	cmp	r3, #11
 800507c:	d801      	bhi.n	8005082 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800507e:	230c      	movs	r3, #12
 8005080:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005082:	8bfb      	ldrh	r3, [r7, #30]
 8005084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005088:	d803      	bhi.n	8005092 <mem_trim+0x32>
 800508a:	8bfa      	ldrh	r2, [r7, #30]
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	429a      	cmp	r2, r3
 8005090:	d201      	bcs.n	8005096 <mem_trim+0x36>
    return NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	e0cc      	b.n	8005230 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005096:	4b68      	ldr	r3, [pc, #416]	; (8005238 <mem_trim+0x1d8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d304      	bcc.n	80050aa <mem_trim+0x4a>
 80050a0:	4b66      	ldr	r3, [pc, #408]	; (800523c <mem_trim+0x1dc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d306      	bcc.n	80050b8 <mem_trim+0x58>
 80050aa:	4b65      	ldr	r3, [pc, #404]	; (8005240 <mem_trim+0x1e0>)
 80050ac:	f240 22d1 	movw	r2, #721	; 0x2d1
 80050b0:	4964      	ldr	r1, [pc, #400]	; (8005244 <mem_trim+0x1e4>)
 80050b2:	4865      	ldr	r0, [pc, #404]	; (8005248 <mem_trim+0x1e8>)
 80050b4:	f009 fe7a 	bl	800edac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80050b8:	4b5f      	ldr	r3, [pc, #380]	; (8005238 <mem_trim+0x1d8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d304      	bcc.n	80050cc <mem_trim+0x6c>
 80050c2:	4b5e      	ldr	r3, [pc, #376]	; (800523c <mem_trim+0x1dc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d301      	bcc.n	80050d0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	e0af      	b.n	8005230 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b08      	subs	r3, #8
 80050d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80050d6:	69b8      	ldr	r0, [r7, #24]
 80050d8:	f7ff fe2c 	bl	8004d34 <mem_to_ptr>
 80050dc:	4603      	mov	r3, r0
 80050de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	8afb      	ldrh	r3, [r7, #22]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b08      	subs	r3, #8
 80050ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80050ee:	8bfa      	ldrh	r2, [r7, #30]
 80050f0:	8abb      	ldrh	r3, [r7, #20]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d906      	bls.n	8005104 <mem_trim+0xa4>
 80050f6:	4b52      	ldr	r3, [pc, #328]	; (8005240 <mem_trim+0x1e0>)
 80050f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80050fc:	4953      	ldr	r1, [pc, #332]	; (800524c <mem_trim+0x1ec>)
 80050fe:	4852      	ldr	r0, [pc, #328]	; (8005248 <mem_trim+0x1e8>)
 8005100:	f009 fe54 	bl	800edac <iprintf>
  if (newsize > size) {
 8005104:	8bfa      	ldrh	r2, [r7, #30]
 8005106:	8abb      	ldrh	r3, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d901      	bls.n	8005110 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	e08f      	b.n	8005230 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005110:	8bfa      	ldrh	r2, [r7, #30]
 8005112:	8abb      	ldrh	r3, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	d101      	bne.n	800511c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	e089      	b.n	8005230 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fdf5 	bl	8004d10 <ptr_to_mem>
 8005126:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	791b      	ldrb	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13f      	bne.n	80051b0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005138:	d106      	bne.n	8005148 <mem_trim+0xe8>
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <mem_trim+0x1e0>)
 800513c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005140:	4943      	ldr	r1, [pc, #268]	; (8005250 <mem_trim+0x1f0>)
 8005142:	4841      	ldr	r0, [pc, #260]	; (8005248 <mem_trim+0x1e8>)
 8005144:	f009 fe32 	bl	800edac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800514e:	8afa      	ldrh	r2, [r7, #22]
 8005150:	8bfb      	ldrh	r3, [r7, #30]
 8005152:	4413      	add	r3, r2
 8005154:	b29b      	uxth	r3, r3
 8005156:	3308      	adds	r3, #8
 8005158:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800515a:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <mem_trim+0x1f4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d106      	bne.n	8005172 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005164:	89fb      	ldrh	r3, [r7, #14]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fdd2 	bl	8004d10 <ptr_to_mem>
 800516c:	4603      	mov	r3, r0
 800516e:	4a39      	ldr	r2, [pc, #228]	; (8005254 <mem_trim+0x1f4>)
 8005170:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fdcb 	bl	8004d10 <ptr_to_mem>
 800517a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2200      	movs	r2, #0
 8005180:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	89ba      	ldrh	r2, [r7, #12]
 8005186:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	8afa      	ldrh	r2, [r7, #22]
 800518c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	89fa      	ldrh	r2, [r7, #14]
 8005192:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800519c:	d047      	beq.n	800522e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fdb4 	bl	8004d10 <ptr_to_mem>
 80051a8:	4602      	mov	r2, r0
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	8053      	strh	r3, [r2, #2]
 80051ae:	e03e      	b.n	800522e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80051b0:	8bfb      	ldrh	r3, [r7, #30]
 80051b2:	f103 0214 	add.w	r2, r3, #20
 80051b6:	8abb      	ldrh	r3, [r7, #20]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d838      	bhi.n	800522e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80051bc:	8afa      	ldrh	r2, [r7, #22]
 80051be:	8bfb      	ldrh	r3, [r7, #30]
 80051c0:	4413      	add	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3308      	adds	r3, #8
 80051c6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051d0:	d106      	bne.n	80051e0 <mem_trim+0x180>
 80051d2:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <mem_trim+0x1e0>)
 80051d4:	f240 3216 	movw	r2, #790	; 0x316
 80051d8:	491d      	ldr	r1, [pc, #116]	; (8005250 <mem_trim+0x1f0>)
 80051da:	481b      	ldr	r0, [pc, #108]	; (8005248 <mem_trim+0x1e8>)
 80051dc:	f009 fde6 	bl	800edac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fd94 	bl	8004d10 <ptr_to_mem>
 80051e8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <mem_trim+0x1f4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d202      	bcs.n	80051fa <mem_trim+0x19a>
      lfree = mem2;
 80051f4:	4a17      	ldr	r2, [pc, #92]	; (8005254 <mem_trim+0x1f4>)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2200      	movs	r2, #0
 80051fe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	8afa      	ldrh	r2, [r7, #22]
 800520c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	89fa      	ldrh	r2, [r7, #14]
 8005212:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800521c:	d007      	beq.n	800522e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fd74 	bl	8004d10 <ptr_to_mem>
 8005228:	4602      	mov	r2, r0
 800522a:	89fb      	ldrh	r3, [r7, #14]
 800522c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800522e:	687b      	ldr	r3, [r7, #4]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200000cc 	.word	0x200000cc
 800523c:	200000d0 	.word	0x200000d0
 8005240:	080103b8 	.word	0x080103b8
 8005244:	08010528 	.word	0x08010528
 8005248:	08010400 	.word	0x08010400
 800524c:	08010540 	.word	0x08010540
 8005250:	08010560 	.word	0x08010560
 8005254:	200000d4 	.word	0x200000d4

08005258 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <mem_malloc+0x14>
    return NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	e0d9      	b.n	8005420 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	3303      	adds	r3, #3
 8005270:	b29b      	uxth	r3, r3
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005278:	8bbb      	ldrh	r3, [r7, #28]
 800527a:	2b0b      	cmp	r3, #11
 800527c:	d801      	bhi.n	8005282 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800527e:	230c      	movs	r3, #12
 8005280:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005282:	8bbb      	ldrh	r3, [r7, #28]
 8005284:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005288:	d803      	bhi.n	8005292 <mem_malloc+0x3a>
 800528a:	8bba      	ldrh	r2, [r7, #28]
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	429a      	cmp	r2, r3
 8005290:	d201      	bcs.n	8005296 <mem_malloc+0x3e>
    return NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	e0c4      	b.n	8005420 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005296:	4b64      	ldr	r3, [pc, #400]	; (8005428 <mem_malloc+0x1d0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fd4a 	bl	8004d34 <mem_to_ptr>
 80052a0:	4603      	mov	r3, r0
 80052a2:	83fb      	strh	r3, [r7, #30]
 80052a4:	e0b4      	b.n	8005410 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80052a6:	8bfb      	ldrh	r3, [r7, #30]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fd31 	bl	8004d10 <ptr_to_mem>
 80052ae:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	791b      	ldrb	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 80a4 	bne.w	8005402 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	8bfb      	ldrh	r3, [r7, #30]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f1a3 0208 	sub.w	r2, r3, #8
 80052c8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f0c0 8099 	bcc.w	8005402 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	8bfb      	ldrh	r3, [r7, #30]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f1a3 0208 	sub.w	r2, r3, #8
 80052de:	8bbb      	ldrh	r3, [r7, #28]
 80052e0:	3314      	adds	r3, #20
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d333      	bcc.n	800534e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80052e6:	8bfa      	ldrh	r2, [r7, #30]
 80052e8:	8bbb      	ldrh	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3308      	adds	r3, #8
 80052f0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80052f2:	8a7b      	ldrh	r3, [r7, #18]
 80052f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052f8:	d106      	bne.n	8005308 <mem_malloc+0xb0>
 80052fa:	4b4c      	ldr	r3, [pc, #304]	; (800542c <mem_malloc+0x1d4>)
 80052fc:	f240 3287 	movw	r2, #903	; 0x387
 8005300:	494b      	ldr	r1, [pc, #300]	; (8005430 <mem_malloc+0x1d8>)
 8005302:	484c      	ldr	r0, [pc, #304]	; (8005434 <mem_malloc+0x1dc>)
 8005304:	f009 fd52 	bl	800edac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005308:	8a7b      	ldrh	r3, [r7, #18]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fd00 	bl	8004d10 <ptr_to_mem>
 8005310:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	881a      	ldrh	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8bfa      	ldrh	r2, [r7, #30]
 8005324:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	8a7a      	ldrh	r2, [r7, #18]
 800532a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2201      	movs	r2, #1
 8005330:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800533a:	d00b      	beq.n	8005354 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fce5 	bl	8004d10 <ptr_to_mem>
 8005346:	4602      	mov	r2, r0
 8005348:	8a7b      	ldrh	r3, [r7, #18]
 800534a:	8053      	strh	r3, [r2, #2]
 800534c:	e002      	b.n	8005354 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2201      	movs	r2, #1
 8005352:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <mem_malloc+0x1d0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	429a      	cmp	r2, r3
 800535c:	d127      	bne.n	80053ae <mem_malloc+0x156>
          struct mem *cur = lfree;
 800535e:	4b32      	ldr	r3, [pc, #200]	; (8005428 <mem_malloc+0x1d0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005364:	e005      	b.n	8005372 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fcd0 	bl	8004d10 <ptr_to_mem>
 8005370:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	791b      	ldrb	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <mem_malloc+0x12c>
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <mem_malloc+0x1e0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	429a      	cmp	r2, r3
 8005382:	d1f0      	bne.n	8005366 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005384:	4a28      	ldr	r2, [pc, #160]	; (8005428 <mem_malloc+0x1d0>)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800538a:	4b27      	ldr	r3, [pc, #156]	; (8005428 <mem_malloc+0x1d0>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <mem_malloc+0x1e0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d00b      	beq.n	80053ae <mem_malloc+0x156>
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <mem_malloc+0x1d0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <mem_malloc+0x156>
 80053a0:	4b22      	ldr	r3, [pc, #136]	; (800542c <mem_malloc+0x1d4>)
 80053a2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80053a6:	4925      	ldr	r1, [pc, #148]	; (800543c <mem_malloc+0x1e4>)
 80053a8:	4822      	ldr	r0, [pc, #136]	; (8005434 <mem_malloc+0x1dc>)
 80053aa:	f009 fcff 	bl	800edac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80053ae:	8bba      	ldrh	r2, [r7, #28]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	3308      	adds	r3, #8
 80053b6:	4a20      	ldr	r2, [pc, #128]	; (8005438 <mem_malloc+0x1e0>)
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d906      	bls.n	80053cc <mem_malloc+0x174>
 80053be:	4b1b      	ldr	r3, [pc, #108]	; (800542c <mem_malloc+0x1d4>)
 80053c0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80053c4:	491e      	ldr	r1, [pc, #120]	; (8005440 <mem_malloc+0x1e8>)
 80053c6:	481b      	ldr	r0, [pc, #108]	; (8005434 <mem_malloc+0x1dc>)
 80053c8:	f009 fcf0 	bl	800edac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d006      	beq.n	80053e4 <mem_malloc+0x18c>
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <mem_malloc+0x1d4>)
 80053d8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80053dc:	4919      	ldr	r1, [pc, #100]	; (8005444 <mem_malloc+0x1ec>)
 80053de:	4815      	ldr	r0, [pc, #84]	; (8005434 <mem_malloc+0x1dc>)
 80053e0:	f009 fce4 	bl	800edac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <mem_malloc+0x1a4>
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <mem_malloc+0x1d4>)
 80053f0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80053f4:	4914      	ldr	r1, [pc, #80]	; (8005448 <mem_malloc+0x1f0>)
 80053f6:	480f      	ldr	r0, [pc, #60]	; (8005434 <mem_malloc+0x1dc>)
 80053f8:	f009 fcd8 	bl	800edac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3308      	adds	r3, #8
 8005400:	e00e      	b.n	8005420 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005402:	8bfb      	ldrh	r3, [r7, #30]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fc83 	bl	8004d10 <ptr_to_mem>
 800540a:	4603      	mov	r3, r0
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005410:	8bfa      	ldrh	r2, [r7, #30]
 8005412:	8bbb      	ldrh	r3, [r7, #28]
 8005414:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005418:	429a      	cmp	r2, r3
 800541a:	f4ff af44 	bcc.w	80052a6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	200000d4 	.word	0x200000d4
 800542c:	080103b8 	.word	0x080103b8
 8005430:	08010560 	.word	0x08010560
 8005434:	08010400 	.word	0x08010400
 8005438:	200000d0 	.word	0x200000d0
 800543c:	08010574 	.word	0x08010574
 8005440:	08010590 	.word	0x08010590
 8005444:	080105c0 	.word	0x080105c0
 8005448:	080105f0 	.word	0x080105f0

0800544c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	3303      	adds	r3, #3
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e011      	b.n	8005492 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	885b      	ldrh	r3, [r3, #2]
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4293      	cmp	r3, r2
 800549c:	dbe7      	blt.n	800546e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054b2:	2300      	movs	r3, #0
 80054b4:	80fb      	strh	r3, [r7, #6]
 80054b6:	e009      	b.n	80054cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	4a08      	ldr	r2, [pc, #32]	; (80054dc <memp_init+0x30>)
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff ffc3 	bl	800544c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	3301      	adds	r3, #1
 80054ca:	80fb      	strh	r3, [r7, #6]
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d9f2      	bls.n	80054b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	08012dd4 	.word	0x08012dd4

080054e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <do_memp_malloc_pool+0x38>
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <do_memp_malloc_pool+0x48>)
 800550c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005510:	4906      	ldr	r1, [pc, #24]	; (800552c <do_memp_malloc_pool+0x4c>)
 8005512:	4807      	ldr	r0, [pc, #28]	; (8005530 <do_memp_malloc_pool+0x50>)
 8005514:	f009 fc4a 	bl	800edac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	e000      	b.n	800551e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	08010614 	.word	0x08010614
 800552c:	08010644 	.word	0x08010644
 8005530:	08010668 	.word	0x08010668

08005534 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <memp_malloc_pool+0x1c>
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <memp_malloc_pool+0x38>)
 8005544:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005548:	4909      	ldr	r1, [pc, #36]	; (8005570 <memp_malloc_pool+0x3c>)
 800554a:	480a      	ldr	r0, [pc, #40]	; (8005574 <memp_malloc_pool+0x40>)
 800554c:	f009 fc2e 	bl	800edac <iprintf>
  if (desc == NULL) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <memp_malloc_pool+0x26>
    return NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	e003      	b.n	8005562 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ffc0 	bl	80054e0 <do_memp_malloc_pool>
 8005560:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	08010614 	.word	0x08010614
 8005570:	08010690 	.word	0x08010690
 8005574:	08010668 	.word	0x08010668

08005578 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d908      	bls.n	800559a <memp_malloc+0x22>
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <memp_malloc+0x3c>)
 800558a:	f240 1257 	movw	r2, #343	; 0x157
 800558e:	490a      	ldr	r1, [pc, #40]	; (80055b8 <memp_malloc+0x40>)
 8005590:	480a      	ldr	r0, [pc, #40]	; (80055bc <memp_malloc+0x44>)
 8005592:	f009 fc0b 	bl	800edac <iprintf>
 8005596:	2300      	movs	r3, #0
 8005598:	e008      	b.n	80055ac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <memp_malloc+0x48>)
 800559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff ff9c 	bl	80054e0 <do_memp_malloc_pool>
 80055a8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	08010614 	.word	0x08010614
 80055b8:	080106a4 	.word	0x080106a4
 80055bc:	08010668 	.word	0x08010668
 80055c0:	08012dd4 	.word	0x08012dd4

080055c4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <do_memp_free_pool+0x22>
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <do_memp_free_pool+0x40>)
 80055da:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80055de:	490a      	ldr	r1, [pc, #40]	; (8005608 <do_memp_free_pool+0x44>)
 80055e0:	480a      	ldr	r0, [pc, #40]	; (800560c <do_memp_free_pool+0x48>)
 80055e2:	f009 fbe3 	bl	800edac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	08010614 	.word	0x08010614
 8005608:	080106c4 	.word	0x080106c4
 800560c:	08010668 	.word	0x08010668

08005610 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <memp_free_pool+0x1e>
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <memp_free_pool+0x3c>)
 8005622:	f240 1295 	movw	r2, #405	; 0x195
 8005626:	490a      	ldr	r1, [pc, #40]	; (8005650 <memp_free_pool+0x40>)
 8005628:	480a      	ldr	r0, [pc, #40]	; (8005654 <memp_free_pool+0x44>)
 800562a:	f009 fbbf 	bl	800edac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <memp_free_pool+0x34>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ffc1 	bl	80055c4 <do_memp_free_pool>
 8005642:	e000      	b.n	8005646 <memp_free_pool+0x36>
    return;
 8005644:	bf00      	nop
}
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	08010614 	.word	0x08010614
 8005650:	08010690 	.word	0x08010690
 8005654:	08010668 	.word	0x08010668

08005658 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	6039      	str	r1, [r7, #0]
 8005662:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	2b08      	cmp	r3, #8
 8005668:	d907      	bls.n	800567a <memp_free+0x22>
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <memp_free+0x44>)
 800566c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005670:	490b      	ldr	r1, [pc, #44]	; (80056a0 <memp_free+0x48>)
 8005672:	480c      	ldr	r0, [pc, #48]	; (80056a4 <memp_free+0x4c>)
 8005674:	f009 fb9a 	bl	800edac <iprintf>
 8005678:	e00c      	b.n	8005694 <memp_free+0x3c>

  if (mem == NULL) {
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <memp_free+0x50>)
 8005684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff ff9a 	bl	80055c4 <do_memp_free_pool>
 8005690:	e000      	b.n	8005694 <memp_free+0x3c>
    return;
 8005692:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	08010614 	.word	0x08010614
 80056a0:	080106e4 	.word	0x080106e4
 80056a4:	08010668 	.word	0x08010668
 80056a8:	08012dd4 	.word	0x08012dd4

080056ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <netif_add+0x26>
 80056d0:	4b57      	ldr	r3, [pc, #348]	; (8005830 <netif_add+0x174>)
 80056d2:	f240 1227 	movw	r2, #295	; 0x127
 80056d6:	4957      	ldr	r1, [pc, #348]	; (8005834 <netif_add+0x178>)
 80056d8:	4857      	ldr	r0, [pc, #348]	; (8005838 <netif_add+0x17c>)
 80056da:	f009 fb67 	bl	800edac <iprintf>
 80056de:	2300      	movs	r3, #0
 80056e0:	e0a2      	b.n	8005828 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d108      	bne.n	80056fa <netif_add+0x3e>
 80056e8:	4b51      	ldr	r3, [pc, #324]	; (8005830 <netif_add+0x174>)
 80056ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 80056ee:	4953      	ldr	r1, [pc, #332]	; (800583c <netif_add+0x180>)
 80056f0:	4851      	ldr	r0, [pc, #324]	; (8005838 <netif_add+0x17c>)
 80056f2:	f009 fb5b 	bl	800edac <iprintf>
 80056f6:	2300      	movs	r3, #0
 80056f8:	e096      	b.n	8005828 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005700:	4b4f      	ldr	r3, [pc, #316]	; (8005840 <netif_add+0x184>)
 8005702:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800570a:	4b4d      	ldr	r3, [pc, #308]	; (8005840 <netif_add+0x184>)
 800570c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005714:	4b4a      	ldr	r3, [pc, #296]	; (8005840 <netif_add+0x184>)
 8005716:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a45      	ldr	r2, [pc, #276]	; (8005844 <netif_add+0x188>)
 800572e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a3a      	ldr	r2, [r7, #32]
 8005748:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800574a:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <netif_add+0x18c>)
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005758:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f913 	bl	800598c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	4798      	blx	r3
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <netif_add+0xba>
    return NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	e058      	b.n	8005828 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800577c:	2bff      	cmp	r3, #255	; 0xff
 800577e:	d103      	bne.n	8005788 <netif_add+0xcc>
        netif->num = 0;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800578c:	4b2f      	ldr	r3, [pc, #188]	; (800584c <netif_add+0x190>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e02b      	b.n	80057ec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <netif_add+0xee>
 800579c:	4b24      	ldr	r3, [pc, #144]	; (8005830 <netif_add+0x174>)
 800579e:	f240 128b 	movw	r2, #395	; 0x18b
 80057a2:	492b      	ldr	r1, [pc, #172]	; (8005850 <netif_add+0x194>)
 80057a4:	4824      	ldr	r0, [pc, #144]	; (8005838 <netif_add+0x17c>)
 80057a6:	f009 fb01 	bl	800edac <iprintf>
        num_netifs++;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3301      	adds	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2bff      	cmp	r3, #255	; 0xff
 80057b4:	dd06      	ble.n	80057c4 <netif_add+0x108>
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <netif_add+0x174>)
 80057b8:	f240 128d 	movw	r2, #397	; 0x18d
 80057bc:	4925      	ldr	r1, [pc, #148]	; (8005854 <netif_add+0x198>)
 80057be:	481e      	ldr	r0, [pc, #120]	; (8005838 <netif_add+0x17c>)
 80057c0:	f009 faf4 	bl	800edac <iprintf>
        if (netif2->num == netif->num) {
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d108      	bne.n	80057e6 <netif_add+0x12a>
          netif->num++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057da:	3301      	adds	r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80057e4:	e005      	b.n	80057f2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1d0      	bne.n	8005794 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1be      	bne.n	8005776 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057fe:	2bfe      	cmp	r3, #254	; 0xfe
 8005800:	d103      	bne.n	800580a <netif_add+0x14e>
    netif_num = 0;
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <netif_add+0x18c>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e006      	b.n	8005818 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005810:	3301      	adds	r3, #1
 8005812:	b2da      	uxtb	r2, r3
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <netif_add+0x18c>)
 8005816:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <netif_add+0x190>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005820:	4a0a      	ldr	r2, [pc, #40]	; (800584c <netif_add+0x190>)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	08010700 	.word	0x08010700
 8005834:	08010794 	.word	0x08010794
 8005838:	08010750 	.word	0x08010750
 800583c:	080107b0 	.word	0x080107b0
 8005840:	08012e38 	.word	0x08012e38
 8005844:	08005c67 	.word	0x08005c67
 8005848:	200000fc 	.word	0x200000fc
 800584c:	20008404 	.word	0x20008404
 8005850:	080107d4 	.word	0x080107d4
 8005854:	080107e8 	.word	0x080107e8

08005858 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f002 fb53 	bl	8007f10 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f006 ff4b 	bl	800c708 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <netif_do_set_ipaddr+0x20>
 800588e:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <netif_do_set_ipaddr+0x88>)
 8005890:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005894:	491c      	ldr	r1, [pc, #112]	; (8005908 <netif_do_set_ipaddr+0x8c>)
 8005896:	481d      	ldr	r0, [pc, #116]	; (800590c <netif_do_set_ipaddr+0x90>)
 8005898:	f009 fa88 	bl	800edac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <netif_do_set_ipaddr+0x34>
 80058a2:	4b18      	ldr	r3, [pc, #96]	; (8005904 <netif_do_set_ipaddr+0x88>)
 80058a4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80058a8:	4917      	ldr	r1, [pc, #92]	; (8005908 <netif_do_set_ipaddr+0x8c>)
 80058aa:	4818      	ldr	r0, [pc, #96]	; (800590c <netif_do_set_ipaddr+0x90>)
 80058ac:	f009 fa7e 	bl	800edac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3304      	adds	r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d01c      	beq.n	80058f8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3304      	adds	r3, #4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80058ce:	f107 0314 	add.w	r3, r7, #20
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ffbf 	bl	8005858 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <netif_do_set_ipaddr+0x6a>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	e000      	b.n	80058e8 <netif_do_set_ipaddr+0x6c>
 80058e6:	2300      	movs	r3, #0
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80058ec:	2101      	movs	r1, #1
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f8d2 	bl	8005a98 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	08010700 	.word	0x08010700
 8005908:	08010818 	.word	0x08010818
 800590c:	08010750 	.word	0x08010750

08005910 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3308      	adds	r3, #8
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d00a      	beq.n	8005940 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <netif_do_set_netmask+0x26>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	e000      	b.n	8005938 <netif_do_set_netmask+0x28>
 8005936:	2300      	movs	r3, #0
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	330c      	adds	r3, #12
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d00a      	beq.n	800597e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <netif_do_set_gw+0x26>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	e000      	b.n	8005976 <netif_do_set_gw+0x28>
 8005974:	2300      	movs	r3, #0
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <netif_set_addr+0x90>)
 80059aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80059b2:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <netif_set_addr+0x90>)
 80059b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80059bc:	4b17      	ldr	r3, [pc, #92]	; (8005a1c <netif_set_addr+0x90>)
 80059be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <netif_set_addr+0x42>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <netif_set_addr+0x46>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <netif_set_addr+0x48>
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d006      	beq.n	80059ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80059dc:	f107 0310 	add.w	r3, r7, #16
 80059e0:	461a      	mov	r2, r3
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ff49 	bl	800587c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff ff8e 	bl	8005910 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff ffa8 	bl	800594e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005a04:	f107 0310 	add.w	r3, r7, #16
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff ff35 	bl	800587c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005a12:	bf00      	nop
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08012e38 	.word	0x08012e38

08005a20 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005a28:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <netif_set_default+0x1c>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20008408 	.word	0x20008408

08005a40 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <netif_set_up+0x1e>
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <netif_set_up+0x4c>)
 8005a50:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005a54:	490e      	ldr	r1, [pc, #56]	; (8005a90 <netif_set_up+0x50>)
 8005a56:	480f      	ldr	r0, [pc, #60]	; (8005a94 <netif_set_up+0x54>)
 8005a58:	f009 f9a8 	bl	800edac <iprintf>
 8005a5c:	e013      	b.n	8005a86 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10c      	bne.n	8005a86 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a7e:	2103      	movs	r1, #3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f809 	bl	8005a98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08010700 	.word	0x08010700
 8005a90:	08010888 	.word	0x08010888
 8005a94:	08010750 	.word	0x08010750

08005a98 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <netif_issue_reports+0x20>
 8005aaa:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <netif_issue_reports+0x74>)
 8005aac:	f240 326d 	movw	r2, #877	; 0x36d
 8005ab0:	4917      	ldr	r1, [pc, #92]	; (8005b10 <netif_issue_reports+0x78>)
 8005ab2:	4818      	ldr	r0, [pc, #96]	; (8005b14 <netif_issue_reports+0x7c>)
 8005ab4:	f009 f97a 	bl	800edac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01e      	beq.n	8005b04 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005acc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d017      	beq.n	8005b04 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d013      	beq.n	8005b06 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f007 fd6d 	bl	800d5dc <etharp_request>
 8005b02:	e000      	b.n	8005b06 <netif_issue_reports+0x6e>
    return;
 8005b04:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	08010700 	.word	0x08010700
 8005b10:	080108a4 	.word	0x080108a4
 8005b14:	08010750 	.word	0x08010750

08005b18 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <netif_set_down+0x1e>
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <netif_set_down+0x58>)
 8005b28:	f240 329b 	movw	r2, #923	; 0x39b
 8005b2c:	4911      	ldr	r1, [pc, #68]	; (8005b74 <netif_set_down+0x5c>)
 8005b2e:	4812      	ldr	r0, [pc, #72]	; (8005b78 <netif_set_down+0x60>)
 8005b30:	f009 f93c 	bl	800edac <iprintf>
 8005b34:	e019      	b.n	8005b6a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d012      	beq.n	8005b6a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f007 f8f7 	bl	800cd58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	08010700 	.word	0x08010700
 8005b74:	080108c8 	.word	0x080108c8
 8005b78:	08010750 	.word	0x08010750

08005b7c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <netif_set_link_up+0x1e>
 8005b8a:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <netif_set_link_up+0x5c>)
 8005b8c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005b90:	4912      	ldr	r1, [pc, #72]	; (8005bdc <netif_set_link_up+0x60>)
 8005b92:	4813      	ldr	r0, [pc, #76]	; (8005be0 <netif_set_link_up+0x64>)
 8005b94:	f009 f90a 	bl	800edac <iprintf>
 8005b98:	e01b      	b.n	8005bd2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d114      	bne.n	8005bd2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005bba:	2103      	movs	r1, #3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff6b 	bl	8005a98 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <netif_set_link_up+0x56>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	08010700 	.word	0x08010700
 8005bdc:	080108e8 	.word	0x080108e8
 8005be0:	08010750 	.word	0x08010750

08005be4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <netif_set_link_down+0x1e>
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <netif_set_link_down+0x54>)
 8005bf4:	f240 4206 	movw	r2, #1030	; 0x406
 8005bf8:	4910      	ldr	r1, [pc, #64]	; (8005c3c <netif_set_link_down+0x58>)
 8005bfa:	4811      	ldr	r0, [pc, #68]	; (8005c40 <netif_set_link_down+0x5c>)
 8005bfc:	f009 f8d6 	bl	800edac <iprintf>
 8005c00:	e017      	b.n	8005c32 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d010      	beq.n	8005c32 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c16:	f023 0304 	bic.w	r3, r3, #4
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <netif_set_link_down+0x4e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	08010700 	.word	0x08010700
 8005c3c:	0801090c 	.word	0x0801090c
 8005c40:	08010750 	.word	0x08010750

08005c44 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	61da      	str	r2, [r3, #28]
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005c72:	f06f 030b 	mvn.w	r3, #11
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <netif_get_by_index+0x48>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e00c      	b.n	8005cb6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	79fa      	ldrb	r2, [r7, #7]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d101      	bne.n	8005cb0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	e006      	b.n	8005cbe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ef      	bne.n	8005c9c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20008404 	.word	0x20008404

08005cd0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <pbuf_free_ooseq+0x38>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <pbuf_free_ooseq+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	e00a      	b.n	8005cfa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f002 f94d 	bl	8007f8c <tcp_free_ooseq>
      return;
 8005cf2:	e005      	b.n	8005d00 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f1      	bne.n	8005ce4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	2000840c 	.word	0x2000840c
 8005d0c:	20008414 	.word	0x20008414

08005d10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d14:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <pbuf_pool_is_empty+0x14>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	2000840c 	.word	0x2000840c

08005d28 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4611      	mov	r1, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	460b      	mov	r3, r1
 8005d38:	80fb      	strh	r3, [r7, #6]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88ba      	ldrh	r2, [r7, #4]
 8005d54:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005d56:	8b3b      	ldrh	r3, [r7, #24]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	7f3a      	ldrb	r2, [r7, #28]
 8005d62:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	73da      	strb	r2, [r3, #15]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	; 0x30
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	4603      	mov	r3, r0
 8005d84:	71fb      	strb	r3, [r7, #7]
 8005d86:	460b      	mov	r3, r1
 8005d88:	80bb      	strh	r3, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005d92:	887b      	ldrh	r3, [r7, #2]
 8005d94:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d98:	d07f      	beq.n	8005e9a <pbuf_alloc+0x11e>
 8005d9a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d9e:	f300 80c8 	bgt.w	8005f32 <pbuf_alloc+0x1b6>
 8005da2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005da6:	d010      	beq.n	8005dca <pbuf_alloc+0x4e>
 8005da8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005dac:	f300 80c1 	bgt.w	8005f32 <pbuf_alloc+0x1b6>
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <pbuf_alloc+0x3e>
 8005db4:	2b41      	cmp	r3, #65	; 0x41
 8005db6:	f040 80bc 	bne.w	8005f32 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005dba:	887a      	ldrh	r2, [r7, #2]
 8005dbc:	88bb      	ldrh	r3, [r7, #4]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f000 f8d1 	bl	8005f68 <pbuf_alloc_reference>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005dc8:	e0bd      	b.n	8005f46 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005dd2:	88bb      	ldrh	r3, [r7, #4]
 8005dd4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005dd6:	2008      	movs	r0, #8
 8005dd8:	f7ff fbce 	bl	8005578 <memp_malloc>
 8005ddc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005de4:	f7ff ff94 	bl	8005d10 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005df0:	f000 faa8 	bl	8006344 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e0a7      	b.n	8005f48 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dfa:	3303      	adds	r3, #3
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8b7a      	ldrh	r2, [r7, #26]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bf28      	it	cs
 8005e10:	4613      	movcs	r3, r2
 8005e12:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e16:	3310      	adds	r3, #16
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	4618      	mov	r0, r3
 8005e24:	89f9      	ldrh	r1, [r7, #14]
 8005e26:	8b7a      	ldrh	r2, [r7, #26]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	887b      	ldrh	r3, [r7, #2]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	4601      	mov	r1, r0
 8005e34:	6938      	ldr	r0, [r7, #16]
 8005e36:	f7ff ff77 	bl	8005d28 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d006      	beq.n	8005e54 <pbuf_alloc+0xd8>
 8005e46:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4c:	4941      	ldr	r1, [pc, #260]	; (8005f54 <pbuf_alloc+0x1d8>)
 8005e4e:	4842      	ldr	r0, [pc, #264]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005e50:	f008 ffac 	bl	800edac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e56:	3303      	adds	r3, #3
 8005e58:	f023 0303 	bic.w	r3, r3, #3
 8005e5c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005e60:	d106      	bne.n	8005e70 <pbuf_alloc+0xf4>
 8005e62:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005e64:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005e68:	493c      	ldr	r1, [pc, #240]	; (8005f5c <pbuf_alloc+0x1e0>)
 8005e6a:	483b      	ldr	r0, [pc, #236]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005e6c:	f008 ff9e 	bl	800edac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	e002      	b.n	8005e82 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005e86:	8b7a      	ldrh	r2, [r7, #26]
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005e92:	8b7b      	ldrh	r3, [r7, #26]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d19e      	bne.n	8005dd6 <pbuf_alloc+0x5a>
      break;
 8005e98:	e055      	b.n	8005f46 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005e9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e9c:	3303      	adds	r3, #3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f023 0303 	bic.w	r3, r3, #3
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	88bb      	ldrh	r3, [r7, #4]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005eb6:	8b3b      	ldrh	r3, [r7, #24]
 8005eb8:	3310      	adds	r3, #16
 8005eba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ebc:	8b3a      	ldrh	r2, [r7, #24]
 8005ebe:	88bb      	ldrh	r3, [r7, #4]
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d306      	bcc.n	8005ed8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005eca:	8afa      	ldrh	r2, [r7, #22]
 8005ecc:	88bb      	ldrh	r3, [r7, #4]
 8005ece:	3303      	adds	r3, #3
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d201      	bcs.n	8005edc <pbuf_alloc+0x160>
        return NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e035      	b.n	8005f48 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f9ba 	bl	8005258 <mem_malloc>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <pbuf_alloc+0x174>
        return NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e02b      	b.n	8005f48 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3303      	adds	r3, #3
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	4618      	mov	r0, r3
 8005f00:	88b9      	ldrh	r1, [r7, #4]
 8005f02:	88ba      	ldrh	r2, [r7, #4]
 8005f04:	2300      	movs	r3, #0
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f12:	f7ff ff09 	bl	8005d28 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d010      	beq.n	8005f44 <pbuf_alloc+0x1c8>
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005f24:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005f28:	490d      	ldr	r1, [pc, #52]	; (8005f60 <pbuf_alloc+0x1e4>)
 8005f2a:	480b      	ldr	r0, [pc, #44]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005f2c:	f008 ff3e 	bl	800edac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005f30:	e008      	b.n	8005f44 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005f34:	f240 1227 	movw	r2, #295	; 0x127
 8005f38:	490a      	ldr	r1, [pc, #40]	; (8005f64 <pbuf_alloc+0x1e8>)
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005f3c:	f008 ff36 	bl	800edac <iprintf>
      return NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e001      	b.n	8005f48 <pbuf_alloc+0x1cc>
      break;
 8005f44:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3728      	adds	r7, #40	; 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	08010930 	.word	0x08010930
 8005f54:	08010960 	.word	0x08010960
 8005f58:	08010990 	.word	0x08010990
 8005f5c:	080109b8 	.word	0x080109b8
 8005f60:	080109ec 	.word	0x080109ec
 8005f64:	08010a18 	.word	0x08010a18

08005f68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
 8005f74:	4613      	mov	r3, r2
 8005f76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005f78:	883b      	ldrh	r3, [r7, #0]
 8005f7a:	2b41      	cmp	r3, #65	; 0x41
 8005f7c:	d009      	beq.n	8005f92 <pbuf_alloc_reference+0x2a>
 8005f7e:	883b      	ldrh	r3, [r7, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d006      	beq.n	8005f92 <pbuf_alloc_reference+0x2a>
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <pbuf_alloc_reference+0x5c>)
 8005f86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005f8a:	490f      	ldr	r1, [pc, #60]	; (8005fc8 <pbuf_alloc_reference+0x60>)
 8005f8c:	480f      	ldr	r0, [pc, #60]	; (8005fcc <pbuf_alloc_reference+0x64>)
 8005f8e:	f008 ff0d 	bl	800edac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005f92:	2007      	movs	r0, #7
 8005f94:	f7ff faf0 	bl	8005578 <memp_malloc>
 8005f98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e00b      	b.n	8005fbc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005fa4:	8879      	ldrh	r1, [r7, #2]
 8005fa6:	887a      	ldrh	r2, [r7, #2]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	883b      	ldrh	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff feb7 	bl	8005d28 <pbuf_init_alloced_pbuf>
  return p;
 8005fba:	68fb      	ldr	r3, [r7, #12]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08010930 	.word	0x08010930
 8005fc8:	08010a34 	.word	0x08010a34
 8005fcc:	08010990 	.word	0x08010990

08005fd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	81bb      	strh	r3, [r7, #12]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005fe8:	8a7b      	ldrh	r3, [r7, #18]
 8005fea:	3303      	adds	r3, #3
 8005fec:	f023 0203 	bic.w	r2, r3, #3
 8005ff0:	89bb      	ldrh	r3, [r7, #12]
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d901      	bls.n	8005ffe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e018      	b.n	8006030 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006004:	8a7b      	ldrh	r3, [r7, #18]
 8006006:	3303      	adds	r3, #3
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	4413      	add	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e001      	b.n	8006018 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	89b9      	ldrh	r1, [r7, #12]
 800601c:	89ba      	ldrh	r2, [r7, #12]
 800601e:	2302      	movs	r3, #2
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	460b      	mov	r3, r1
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	f7ff fe7d 	bl	8005d28 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800602e:	687b      	ldr	r3, [r7, #4]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <pbuf_realloc+0x20>
 800604a:	4b3a      	ldr	r3, [pc, #232]	; (8006134 <pbuf_realloc+0xfc>)
 800604c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006050:	4939      	ldr	r1, [pc, #228]	; (8006138 <pbuf_realloc+0x100>)
 8006052:	483a      	ldr	r0, [pc, #232]	; (800613c <pbuf_realloc+0x104>)
 8006054:	f008 feaa 	bl	800edac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	891b      	ldrh	r3, [r3, #8]
 800605c:	887a      	ldrh	r2, [r7, #2]
 800605e:	429a      	cmp	r2, r3
 8006060:	d263      	bcs.n	800612a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	891a      	ldrh	r2, [r3, #8]
 8006066:	887b      	ldrh	r3, [r7, #2]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800606c:	887b      	ldrh	r3, [r7, #2]
 800606e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006074:	e018      	b.n	80060a8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	895b      	ldrh	r3, [r3, #10]
 800607a:	897a      	ldrh	r2, [r7, #10]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	891a      	ldrh	r2, [r3, #8]
 8006084:	893b      	ldrh	r3, [r7, #8]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <pbuf_realloc+0x70>
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <pbuf_realloc+0xfc>)
 800609c:	f240 12af 	movw	r2, #431	; 0x1af
 80060a0:	4927      	ldr	r1, [pc, #156]	; (8006140 <pbuf_realloc+0x108>)
 80060a2:	4826      	ldr	r0, [pc, #152]	; (800613c <pbuf_realloc+0x104>)
 80060a4:	f008 fe82 	bl	800edac <iprintf>
  while (rem_len > q->len) {
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	895b      	ldrh	r3, [r3, #10]
 80060ac:	897a      	ldrh	r2, [r7, #10]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d8e1      	bhi.n	8006076 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d121      	bne.n	8006102 <pbuf_realloc+0xca>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	895b      	ldrh	r3, [r3, #10]
 80060c2:	897a      	ldrh	r2, [r7, #10]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d01c      	beq.n	8006102 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	7b5b      	ldrb	r3, [r3, #13]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	897b      	ldrh	r3, [r7, #10]
 80060e0:	4413      	add	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7fe ffba 	bl	8005060 <mem_trim>
 80060ec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <pbuf_realloc+0xca>
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <pbuf_realloc+0xfc>)
 80060f6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80060fa:	4912      	ldr	r1, [pc, #72]	; (8006144 <pbuf_realloc+0x10c>)
 80060fc:	480f      	ldr	r0, [pc, #60]	; (800613c <pbuf_realloc+0x104>)
 80060fe:	f008 fe55 	bl	800edac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	897a      	ldrh	r2, [r7, #10]
 8006106:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	895a      	ldrh	r2, [r3, #10]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f911 	bl	8006344 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	e000      	b.n	800612c <pbuf_realloc+0xf4>
    return;
 800612a:	bf00      	nop

}
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	08010930 	.word	0x08010930
 8006138:	08010a48 	.word	0x08010a48
 800613c:	08010990 	.word	0x08010990
 8006140:	08010a60 	.word	0x08010a60
 8006144:	08010a78 	.word	0x08010a78

08006148 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <pbuf_add_header_impl+0x22>
 800615c:	4b2b      	ldr	r3, [pc, #172]	; (800620c <pbuf_add_header_impl+0xc4>)
 800615e:	f240 12df 	movw	r2, #479	; 0x1df
 8006162:	492b      	ldr	r1, [pc, #172]	; (8006210 <pbuf_add_header_impl+0xc8>)
 8006164:	482b      	ldr	r0, [pc, #172]	; (8006214 <pbuf_add_header_impl+0xcc>)
 8006166:	f008 fe21 	bl	800edac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <pbuf_add_header_impl+0x30>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006176:	d301      	bcc.n	800617c <pbuf_add_header_impl+0x34>
    return 1;
 8006178:	2301      	movs	r3, #1
 800617a:	e043      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <pbuf_add_header_impl+0x3e>
    return 0;
 8006182:	2300      	movs	r3, #0
 8006184:	e03e      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	891a      	ldrh	r2, [r3, #8]
 800618e:	8a7b      	ldrh	r3, [r7, #18]
 8006190:	4413      	add	r3, r2
 8006192:	b29b      	uxth	r3, r3
 8006194:	8a7a      	ldrh	r2, [r7, #18]
 8006196:	429a      	cmp	r2, r3
 8006198:	d901      	bls.n	800619e <pbuf_add_header_impl+0x56>
    return 1;
 800619a:	2301      	movs	r3, #1
 800619c:	e032      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	7b1b      	ldrb	r3, [r3, #12]
 80061a2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80061a4:	8a3b      	ldrh	r3, [r7, #16]
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	425b      	negs	r3, r3
 80061b6:	4413      	add	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3310      	adds	r3, #16
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d20d      	bcs.n	80061e0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e01d      	b.n	8006204 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	425b      	negs	r3, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	e001      	b.n	80061e0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	e011      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	895a      	ldrh	r2, [r3, #10]
 80061ea:	8a7b      	ldrh	r3, [r7, #18]
 80061ec:	4413      	add	r3, r2
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	891a      	ldrh	r2, [r3, #8]
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	4413      	add	r3, r2
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	811a      	strh	r2, [r3, #8]


  return 0;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	08010930 	.word	0x08010930
 8006210:	08010a94 	.word	0x08010a94
 8006214:	08010990 	.word	0x08010990

08006218 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006222:	2200      	movs	r2, #0
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ff8e 	bl	8006148 <pbuf_add_header_impl>
 800622c:	4603      	mov	r3, r0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <pbuf_remove_header+0x1e>
 8006248:	4b20      	ldr	r3, [pc, #128]	; (80062cc <pbuf_remove_header+0x94>)
 800624a:	f240 224b 	movw	r2, #587	; 0x24b
 800624e:	4920      	ldr	r1, [pc, #128]	; (80062d0 <pbuf_remove_header+0x98>)
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <pbuf_remove_header+0x9c>)
 8006252:	f008 fdab 	bl	800edac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <pbuf_remove_header+0x2c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006262:	d301      	bcc.n	8006268 <pbuf_remove_header+0x30>
    return 1;
 8006264:	2301      	movs	r3, #1
 8006266:	e02c      	b.n	80062c2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <pbuf_remove_header+0x3a>
    return 0;
 800626e:	2300      	movs	r3, #0
 8006270:	e027      	b.n	80062c2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	895b      	ldrh	r3, [r3, #10]
 800627a:	89fa      	ldrh	r2, [r7, #14]
 800627c:	429a      	cmp	r2, r3
 800627e:	d908      	bls.n	8006292 <pbuf_remove_header+0x5a>
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <pbuf_remove_header+0x94>)
 8006282:	f240 2255 	movw	r2, #597	; 0x255
 8006286:	4914      	ldr	r1, [pc, #80]	; (80062d8 <pbuf_remove_header+0xa0>)
 8006288:	4812      	ldr	r0, [pc, #72]	; (80062d4 <pbuf_remove_header+0x9c>)
 800628a:	f008 fd8f 	bl	800edac <iprintf>
 800628e:	2301      	movs	r3, #1
 8006290:	e017      	b.n	80062c2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	895a      	ldrh	r2, [r3, #10]
 80062a8:	89fb      	ldrh	r3, [r7, #14]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	891a      	ldrh	r2, [r3, #8]
 80062b6:	89fb      	ldrh	r3, [r7, #14]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	08010930 	.word	0x08010930
 80062d0:	08010a94 	.word	0x08010a94
 80062d4:	08010990 	.word	0x08010990
 80062d8:	08010aa0 	.word	0x08010aa0

080062dc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
 80062e8:	4613      	mov	r3, r2
 80062ea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80062ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da08      	bge.n	8006306 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80062f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f8:	425b      	negs	r3, r3
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff9b 	bl	8006238 <pbuf_remove_header>
 8006302:	4603      	mov	r3, r0
 8006304:	e007      	b.n	8006316 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800630a:	787a      	ldrb	r2, [r7, #1]
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ff1a 	bl	8006148 <pbuf_add_header_impl>
 8006314:	4603      	mov	r3, r0
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800632a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800632e:	2201      	movs	r2, #1
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ffd2 	bl	80062dc <pbuf_header_impl>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <pbuf_free+0x22>
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <pbuf_free+0xf8>)
 800635a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800635e:	4938      	ldr	r1, [pc, #224]	; (8006440 <pbuf_free+0xfc>)
 8006360:	4838      	ldr	r0, [pc, #224]	; (8006444 <pbuf_free+0x100>)
 8006362:	f008 fd23 	bl	800edac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006366:	2300      	movs	r3, #0
 8006368:	e063      	b.n	8006432 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800636e:	e05c      	b.n	800642a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7b9b      	ldrb	r3, [r3, #14]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <pbuf_free+0x42>
 8006378:	4b30      	ldr	r3, [pc, #192]	; (800643c <pbuf_free+0xf8>)
 800637a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800637e:	4932      	ldr	r1, [pc, #200]	; (8006448 <pbuf_free+0x104>)
 8006380:	4830      	ldr	r0, [pc, #192]	; (8006444 <pbuf_free+0x100>)
 8006382:	f008 fd13 	bl	800edac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7b9b      	ldrb	r3, [r3, #14]
 800638a:	3b01      	subs	r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	739a      	strb	r2, [r3, #14]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7b9b      	ldrb	r3, [r3, #14]
 8006396:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006398:	7dbb      	ldrb	r3, [r7, #22]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d143      	bne.n	8006426 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	7b1b      	ldrb	r3, [r3, #12]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7b5b      	ldrb	r3, [r3, #13]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d011      	beq.n	80063de <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <pbuf_free+0x90>
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <pbuf_free+0xf8>)
 80063c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80063cc:	491f      	ldr	r1, [pc, #124]	; (800644c <pbuf_free+0x108>)
 80063ce:	481d      	ldr	r0, [pc, #116]	; (8006444 <pbuf_free+0x100>)
 80063d0:	f008 fcec 	bl	800edac <iprintf>
        pc->custom_free_function(p);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
 80063dc:	e01d      	b.n	800641a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d104      	bne.n	80063ee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	2008      	movs	r0, #8
 80063e8:	f7ff f936 	bl	8005658 <memp_free>
 80063ec:	e015      	b.n	800641a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d104      	bne.n	80063fe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	2007      	movs	r0, #7
 80063f8:	f7ff f92e 	bl	8005658 <memp_free>
 80063fc:	e00d      	b.n	800641a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <pbuf_free+0xc8>
          mem_free(p);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fe fdc1 	bl	8004f8c <mem_free>
 800640a:	e006      	b.n	800641a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <pbuf_free+0xf8>)
 800640e:	f240 320f 	movw	r2, #783	; 0x30f
 8006412:	490f      	ldr	r1, [pc, #60]	; (8006450 <pbuf_free+0x10c>)
 8006414:	480b      	ldr	r0, [pc, #44]	; (8006444 <pbuf_free+0x100>)
 8006416:	f008 fcc9 	bl	800edac <iprintf>
        }
      }
      count++;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	3301      	adds	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	e001      	b.n	800642a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d19f      	bne.n	8006370 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	08010930 	.word	0x08010930
 8006440:	08010a94 	.word	0x08010a94
 8006444:	08010990 	.word	0x08010990
 8006448:	08010ac0 	.word	0x08010ac0
 800644c:	08010ad8 	.word	0x08010ad8
 8006450:	08010afc 	.word	0x08010afc

08006454 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006460:	e005      	b.n	800646e <pbuf_clen+0x1a>
    ++len;
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	3301      	adds	r3, #1
 8006466:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1f6      	bne.n	8006462 <pbuf_clen+0xe>
  }
  return len;
 8006474:	89fb      	ldrh	r3, [r7, #14]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7b9b      	ldrb	r3, [r3, #14]
 8006496:	3301      	adds	r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7b9b      	ldrb	r3, [r3, #14]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <pbuf_ref+0x30>
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <pbuf_ref+0x38>)
 80064a8:	f240 3242 	movw	r2, #834	; 0x342
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <pbuf_ref+0x3c>)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <pbuf_ref+0x40>)
 80064b0:	f008 fc7c 	bl	800edac <iprintf>
  }
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	08010930 	.word	0x08010930
 80064c0:	08010b10 	.word	0x08010b10
 80064c4:	08010990 	.word	0x08010990

080064c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <pbuf_cat+0x16>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <pbuf_cat+0x26>
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <pbuf_cat+0x98>)
 80064e0:	f240 3259 	movw	r2, #857	; 0x359
 80064e4:	491f      	ldr	r1, [pc, #124]	; (8006564 <pbuf_cat+0x9c>)
 80064e6:	4820      	ldr	r0, [pc, #128]	; (8006568 <pbuf_cat+0xa0>)
 80064e8:	f008 fc60 	bl	800edac <iprintf>
 80064ec:	e034      	b.n	8006558 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e00a      	b.n	800650a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	891a      	ldrh	r2, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	891b      	ldrh	r3, [r3, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	891a      	ldrh	r2, [r3, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	895b      	ldrh	r3, [r3, #10]
 800651a:	429a      	cmp	r2, r3
 800651c:	d006      	beq.n	800652c <pbuf_cat+0x64>
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <pbuf_cat+0x98>)
 8006520:	f240 3262 	movw	r2, #866	; 0x362
 8006524:	4911      	ldr	r1, [pc, #68]	; (800656c <pbuf_cat+0xa4>)
 8006526:	4810      	ldr	r0, [pc, #64]	; (8006568 <pbuf_cat+0xa0>)
 8006528:	f008 fc40 	bl	800edac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <pbuf_cat+0x7a>
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <pbuf_cat+0x98>)
 8006536:	f240 3263 	movw	r2, #867	; 0x363
 800653a:	490d      	ldr	r1, [pc, #52]	; (8006570 <pbuf_cat+0xa8>)
 800653c:	480a      	ldr	r0, [pc, #40]	; (8006568 <pbuf_cat+0xa0>)
 800653e:	f008 fc35 	bl	800edac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	891a      	ldrh	r2, [r3, #8]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	891b      	ldrh	r3, [r3, #8]
 800654a:	4413      	add	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	08010930 	.word	0x08010930
 8006564:	08010b24 	.word	0x08010b24
 8006568:	08010990 	.word	0x08010990
 800656c:	08010b5c 	.word	0x08010b5c
 8006570:	08010b8c 	.word	0x08010b8c

08006574 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ffa1 	bl	80064c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006586:	6838      	ldr	r0, [r7, #0]
 8006588:	f7ff ff7c 	bl	8006484 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800658c:	bf00      	nop
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <pbuf_copy+0x2a>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <pbuf_copy+0x2a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	891a      	ldrh	r2, [r3, #8]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	891b      	ldrh	r3, [r3, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d209      	bcs.n	80065d2 <pbuf_copy+0x3e>
 80065be:	4b57      	ldr	r3, [pc, #348]	; (800671c <pbuf_copy+0x188>)
 80065c0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80065c4:	4956      	ldr	r1, [pc, #344]	; (8006720 <pbuf_copy+0x18c>)
 80065c6:	4857      	ldr	r0, [pc, #348]	; (8006724 <pbuf_copy+0x190>)
 80065c8:	f008 fbf0 	bl	800edac <iprintf>
 80065cc:	f06f 030f 	mvn.w	r3, #15
 80065d0:	e09f      	b.n	8006712 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	895b      	ldrh	r3, [r3, #10]
 80065d6:	461a      	mov	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	1ad2      	subs	r2, r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	895b      	ldrh	r3, [r3, #10]
 80065e0:	4619      	mov	r1, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1acb      	subs	r3, r1, r3
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d306      	bcc.n	80065f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	895b      	ldrh	r3, [r3, #10]
 80065ee:	461a      	mov	r2, r3
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e005      	b.n	8006604 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	895b      	ldrh	r3, [r3, #10]
 80065fc:	461a      	mov	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	18d0      	adds	r0, r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4619      	mov	r1, r3
 8006618:	f008 fb98 	bl	800ed4c <memcpy>
    offset_to += len;
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	895b      	ldrh	r3, [r3, #10]
 8006630:	461a      	mov	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4293      	cmp	r3, r2
 8006636:	d906      	bls.n	8006646 <pbuf_copy+0xb2>
 8006638:	4b38      	ldr	r3, [pc, #224]	; (800671c <pbuf_copy+0x188>)
 800663a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800663e:	493a      	ldr	r1, [pc, #232]	; (8006728 <pbuf_copy+0x194>)
 8006640:	4838      	ldr	r0, [pc, #224]	; (8006724 <pbuf_copy+0x190>)
 8006642:	f008 fbb3 	bl	800edac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	895b      	ldrh	r3, [r3, #10]
 800664a:	461a      	mov	r2, r3
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4293      	cmp	r3, r2
 8006650:	d906      	bls.n	8006660 <pbuf_copy+0xcc>
 8006652:	4b32      	ldr	r3, [pc, #200]	; (800671c <pbuf_copy+0x188>)
 8006654:	f240 32da 	movw	r2, #986	; 0x3da
 8006658:	4934      	ldr	r1, [pc, #208]	; (800672c <pbuf_copy+0x198>)
 800665a:	4832      	ldr	r0, [pc, #200]	; (8006724 <pbuf_copy+0x190>)
 800665c:	f008 fba6 	bl	800edac <iprintf>
    if (offset_from >= p_from->len) {
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	895b      	ldrh	r3, [r3, #10]
 8006664:	461a      	mov	r2, r3
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4293      	cmp	r3, r2
 800666a:	d304      	bcc.n	8006676 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	895b      	ldrh	r3, [r3, #10]
 800667a:	461a      	mov	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	4293      	cmp	r3, r2
 8006680:	d114      	bne.n	80066ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10c      	bne.n	80066ac <pbuf_copy+0x118>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <pbuf_copy+0x118>
 8006698:	4b20      	ldr	r3, [pc, #128]	; (800671c <pbuf_copy+0x188>)
 800669a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800669e:	4924      	ldr	r1, [pc, #144]	; (8006730 <pbuf_copy+0x19c>)
 80066a0:	4820      	ldr	r0, [pc, #128]	; (8006724 <pbuf_copy+0x190>)
 80066a2:	f008 fb83 	bl	800edac <iprintf>
 80066a6:	f06f 030f 	mvn.w	r3, #15
 80066aa:	e032      	b.n	8006712 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d013      	beq.n	80066da <pbuf_copy+0x146>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	895a      	ldrh	r2, [r3, #10]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	891b      	ldrh	r3, [r3, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d10d      	bne.n	80066da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <pbuf_copy+0x146>
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <pbuf_copy+0x188>)
 80066c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80066cc:	4919      	ldr	r1, [pc, #100]	; (8006734 <pbuf_copy+0x1a0>)
 80066ce:	4815      	ldr	r0, [pc, #84]	; (8006724 <pbuf_copy+0x190>)
 80066d0:	f008 fb6c 	bl	800edac <iprintf>
 80066d4:	f06f 0305 	mvn.w	r3, #5
 80066d8:	e01b      	b.n	8006712 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d013      	beq.n	8006708 <pbuf_copy+0x174>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	895a      	ldrh	r2, [r3, #10]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	891b      	ldrh	r3, [r3, #8]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d10d      	bne.n	8006708 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <pbuf_copy+0x174>
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <pbuf_copy+0x188>)
 80066f6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80066fa:	490e      	ldr	r1, [pc, #56]	; (8006734 <pbuf_copy+0x1a0>)
 80066fc:	4809      	ldr	r0, [pc, #36]	; (8006724 <pbuf_copy+0x190>)
 80066fe:	f008 fb55 	bl	800edac <iprintf>
 8006702:	f06f 0305 	mvn.w	r3, #5
 8006706:	e004      	b.n	8006712 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f47f af61 	bne.w	80065d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	08010930 	.word	0x08010930
 8006720:	08010bd8 	.word	0x08010bd8
 8006724:	08010990 	.word	0x08010990
 8006728:	08010c08 	.word	0x08010c08
 800672c:	08010c20 	.word	0x08010c20
 8006730:	08010c3c 	.word	0x08010c3c
 8006734:	08010c4c 	.word	0x08010c4c

08006738 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	460b      	mov	r3, r1
 8006748:	80fb      	strh	r3, [r7, #6]
 800674a:	4613      	mov	r3, r2
 800674c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d108      	bne.n	800676e <pbuf_copy_partial+0x36>
 800675c:	4b2b      	ldr	r3, [pc, #172]	; (800680c <pbuf_copy_partial+0xd4>)
 800675e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006762:	492b      	ldr	r1, [pc, #172]	; (8006810 <pbuf_copy_partial+0xd8>)
 8006764:	482b      	ldr	r0, [pc, #172]	; (8006814 <pbuf_copy_partial+0xdc>)
 8006766:	f008 fb21 	bl	800edac <iprintf>
 800676a:	2300      	movs	r3, #0
 800676c:	e04a      	b.n	8006804 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <pbuf_copy_partial+0x4e>
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <pbuf_copy_partial+0xd4>)
 8006776:	f240 420b 	movw	r2, #1035	; 0x40b
 800677a:	4927      	ldr	r1, [pc, #156]	; (8006818 <pbuf_copy_partial+0xe0>)
 800677c:	4825      	ldr	r0, [pc, #148]	; (8006814 <pbuf_copy_partial+0xdc>)
 800677e:	f008 fb15 	bl	800edac <iprintf>
 8006782:	2300      	movs	r3, #0
 8006784:	e03e      	b.n	8006804 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e034      	b.n	80067f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800678c:	88bb      	ldrh	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <pbuf_copy_partial+0x70>
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	895b      	ldrh	r3, [r3, #10]
 8006796:	88ba      	ldrh	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d305      	bcc.n	80067a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	895b      	ldrh	r3, [r3, #10]
 80067a0:	88ba      	ldrh	r2, [r7, #4]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	80bb      	strh	r3, [r7, #4]
 80067a6:	e023      	b.n	80067f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	895a      	ldrh	r2, [r3, #10]
 80067ac:	88bb      	ldrh	r3, [r7, #4]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80067b2:	8b3a      	ldrh	r2, [r7, #24]
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d901      	bls.n	80067be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80067be:	8b7b      	ldrh	r3, [r7, #26]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	18d0      	adds	r0, r2, r3
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	88bb      	ldrh	r3, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	8b3a      	ldrh	r2, [r7, #24]
 80067ce:	4619      	mov	r1, r3
 80067d0:	f008 fabc 	bl	800ed4c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80067d4:	8afa      	ldrh	r2, [r7, #22]
 80067d6:	8b3b      	ldrh	r3, [r7, #24]
 80067d8:	4413      	add	r3, r2
 80067da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80067dc:	8b7a      	ldrh	r2, [r7, #26]
 80067de:	8b3b      	ldrh	r3, [r7, #24]
 80067e0:	4413      	add	r3, r2
 80067e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80067e4:	88fa      	ldrh	r2, [r7, #6]
 80067e6:	8b3b      	ldrh	r3, [r7, #24]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <pbuf_copy_partial+0xca>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1c4      	bne.n	800678c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006802:	8afb      	ldrh	r3, [r7, #22]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	08010930 	.word	0x08010930
 8006810:	08010c78 	.word	0x08010c78
 8006814:	08010990 	.word	0x08010990
 8006818:	08010c98 	.word	0x08010c98

0800681c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	603a      	str	r2, [r7, #0]
 8006826:	71fb      	strb	r3, [r7, #7]
 8006828:	460b      	mov	r3, r1
 800682a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	8919      	ldrh	r1, [r3, #8]
 8006830:	88ba      	ldrh	r2, [r7, #4]
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff faa1 	bl	8005d7c <pbuf_alloc>
 800683a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <pbuf_clone+0x2a>
    return NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	e011      	b.n	800686a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff fea3 	bl	8006594 <pbuf_copy>
 800684e:	4603      	mov	r3, r0
 8006850:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006852:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <pbuf_clone+0x4c>
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <pbuf_clone+0x58>)
 800685c:	f240 5224 	movw	r2, #1316	; 0x524
 8006860:	4905      	ldr	r1, [pc, #20]	; (8006878 <pbuf_clone+0x5c>)
 8006862:	4806      	ldr	r0, [pc, #24]	; (800687c <pbuf_clone+0x60>)
 8006864:	f008 faa2 	bl	800edac <iprintf>
  return q;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08010930 	.word	0x08010930
 8006878:	08010da4 	.word	0x08010da4
 800687c:	08010990 	.word	0x08010990

08006880 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006884:	f008 fb20 	bl	800eec8 <rand>
 8006888:	4603      	mov	r3, r0
 800688a:	b29b      	uxth	r3, r3
 800688c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006890:	b29b      	uxth	r3, r3
 8006892:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006896:	b29a      	uxth	r2, r3
 8006898:	4b01      	ldr	r3, [pc, #4]	; (80068a0 <tcp_init+0x20>)
 800689a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800689c:	bf00      	nop
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000020 	.word	0x20000020

080068a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7d1b      	ldrb	r3, [r3, #20]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <tcp_free+0x1c>
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <tcp_free+0x2c>)
 80068b6:	22d4      	movs	r2, #212	; 0xd4
 80068b8:	4906      	ldr	r1, [pc, #24]	; (80068d4 <tcp_free+0x30>)
 80068ba:	4807      	ldr	r0, [pc, #28]	; (80068d8 <tcp_free+0x34>)
 80068bc:	f008 fa76 	bl	800edac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	2001      	movs	r0, #1
 80068c4:	f7fe fec8 	bl	8005658 <memp_free>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	08010e30 	.word	0x08010e30
 80068d4:	08010e60 	.word	0x08010e60
 80068d8:	08010e74 	.word	0x08010e74

080068dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	7d1b      	ldrb	r3, [r3, #20]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d105      	bne.n	80068f8 <tcp_free_listen+0x1c>
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <tcp_free_listen+0x2c>)
 80068ee:	22df      	movs	r2, #223	; 0xdf
 80068f0:	4906      	ldr	r1, [pc, #24]	; (800690c <tcp_free_listen+0x30>)
 80068f2:	4807      	ldr	r0, [pc, #28]	; (8006910 <tcp_free_listen+0x34>)
 80068f4:	f008 fa5a 	bl	800edac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	2002      	movs	r0, #2
 80068fc:	f7fe feac 	bl	8005658 <memp_free>
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	08010e30 	.word	0x08010e30
 800690c:	08010e9c 	.word	0x08010e9c
 8006910:	08010e74 	.word	0x08010e74

08006914 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006918:	f000 fea2 	bl	8007660 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <tcp_tmr+0x28>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <tcp_tmr+0x28>)
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <tcp_tmr+0x28>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006934:	f000 fb54 	bl	8006fe0 <tcp_slowtmr>
  }
}
 8006938:	bf00      	nop
 800693a:	bd80      	pop	{r7, pc}
 800693c:	200000fd 	.word	0x200000fd

08006940 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <tcp_remove_listener+0x1c>
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <tcp_remove_listener+0x48>)
 8006952:	22ff      	movs	r2, #255	; 0xff
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <tcp_remove_listener+0x4c>)
 8006956:	480e      	ldr	r0, [pc, #56]	; (8006990 <tcp_remove_listener+0x50>)
 8006958:	f008 fa28 	bl	800edac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e00a      	b.n	8006978 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d102      	bne.n	8006972 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f1      	bne.n	8006962 <tcp_remove_listener+0x22>
    }
  }
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	08010e30 	.word	0x08010e30
 800698c:	08010eb8 	.word	0x08010eb8
 8006990:	08010e74 	.word	0x08010e74

08006994 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <tcp_listen_closed+0x1c>
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <tcp_listen_closed+0x60>)
 80069a4:	f240 1211 	movw	r2, #273	; 0x111
 80069a8:	4913      	ldr	r1, [pc, #76]	; (80069f8 <tcp_listen_closed+0x64>)
 80069aa:	4814      	ldr	r0, [pc, #80]	; (80069fc <tcp_listen_closed+0x68>)
 80069ac:	f008 f9fe 	bl	800edac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	7d1b      	ldrb	r3, [r3, #20]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d006      	beq.n	80069c6 <tcp_listen_closed+0x32>
 80069b8:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <tcp_listen_closed+0x60>)
 80069ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80069be:	4910      	ldr	r1, [pc, #64]	; (8006a00 <tcp_listen_closed+0x6c>)
 80069c0:	480e      	ldr	r0, [pc, #56]	; (80069fc <tcp_listen_closed+0x68>)
 80069c2:	f008 f9f3 	bl	800edac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069c6:	2301      	movs	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e00b      	b.n	80069e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80069cc:	4a0d      	ldr	r2, [pc, #52]	; (8006a04 <tcp_listen_closed+0x70>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ffb1 	bl	8006940 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3301      	adds	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d9f0      	bls.n	80069cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	08010e30 	.word	0x08010e30
 80069f8:	08010ee0 	.word	0x08010ee0
 80069fc:	08010e74 	.word	0x08010e74
 8006a00:	08010eec 	.word	0x08010eec
 8006a04:	08012e10 	.word	0x08012e10

08006a08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <tcp_close_shutdown+0x20>
 8006a1a:	4b63      	ldr	r3, [pc, #396]	; (8006ba8 <tcp_close_shutdown+0x1a0>)
 8006a1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006a20:	4962      	ldr	r1, [pc, #392]	; (8006bac <tcp_close_shutdown+0x1a4>)
 8006a22:	4863      	ldr	r0, [pc, #396]	; (8006bb0 <tcp_close_shutdown+0x1a8>)
 8006a24:	f008 f9c2 	bl	800edac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d066      	beq.n	8006afc <tcp_close_shutdown+0xf4>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7d1b      	ldrb	r3, [r3, #20]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d003      	beq.n	8006a3e <tcp_close_shutdown+0x36>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7d1b      	ldrb	r3, [r3, #20]
 8006a3a:	2b07      	cmp	r3, #7
 8006a3c:	d15e      	bne.n	8006afc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <tcp_close_shutdown+0x48>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a4e:	d055      	beq.n	8006afc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8b5b      	ldrh	r3, [r3, #26]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <tcp_close_shutdown+0x62>
 8006a5c:	4b52      	ldr	r3, [pc, #328]	; (8006ba8 <tcp_close_shutdown+0x1a0>)
 8006a5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006a62:	4954      	ldr	r1, [pc, #336]	; (8006bb4 <tcp_close_shutdown+0x1ac>)
 8006a64:	4852      	ldr	r0, [pc, #328]	; (8006bb0 <tcp_close_shutdown+0x1a8>)
 8006a66:	f008 f9a1 	bl	800edac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a72:	687d      	ldr	r5, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	8ad2      	ldrh	r2, [r2, #22]
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	8b09      	ldrh	r1, [r1, #24]
 8006a80:	9102      	str	r1, [sp, #8]
 8006a82:	9201      	str	r2, [sp, #4]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	462b      	mov	r3, r5
 8006a88:	4622      	mov	r2, r4
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f004 fe8d 	bl	800b7ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 f8c6 	bl	8007c24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a98:	4b47      	ldr	r3, [pc, #284]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d105      	bne.n	8006aae <tcp_close_shutdown+0xa6>
 8006aa2:	4b45      	ldr	r3, [pc, #276]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4a43      	ldr	r2, [pc, #268]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	e013      	b.n	8006ad6 <tcp_close_shutdown+0xce>
 8006aae:	4b42      	ldr	r3, [pc, #264]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e00c      	b.n	8006ad0 <tcp_close_shutdown+0xc8>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d104      	bne.n	8006aca <tcp_close_shutdown+0xc2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	60da      	str	r2, [r3, #12]
 8006ac8:	e005      	b.n	8006ad6 <tcp_close_shutdown+0xce>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ef      	bne.n	8006ab6 <tcp_close_shutdown+0xae>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <tcp_close_shutdown+0x1b4>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006ae2:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <tcp_close_shutdown+0x1b8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d102      	bne.n	8006af2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006aec:	f003 fd5a 	bl	800a5a4 <tcp_trigger_input_pcb_close>
 8006af0:	e002      	b.n	8006af8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fed6 	bl	80068a4 <tcp_free>
      }
      return ERR_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e050      	b.n	8006b9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7d1b      	ldrb	r3, [r3, #20]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d03b      	beq.n	8006b7c <tcp_close_shutdown+0x174>
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	dc44      	bgt.n	8006b92 <tcp_close_shutdown+0x18a>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <tcp_close_shutdown+0x10a>
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d02a      	beq.n	8006b66 <tcp_close_shutdown+0x15e>
 8006b10:	e03f      	b.n	8006b92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8adb      	ldrh	r3, [r3, #22]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d021      	beq.n	8006b5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b1a:	4b2a      	ldr	r3, [pc, #168]	; (8006bc4 <tcp_close_shutdown+0x1bc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d105      	bne.n	8006b30 <tcp_close_shutdown+0x128>
 8006b24:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <tcp_close_shutdown+0x1bc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4a26      	ldr	r2, [pc, #152]	; (8006bc4 <tcp_close_shutdown+0x1bc>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e013      	b.n	8006b58 <tcp_close_shutdown+0x150>
 8006b30:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <tcp_close_shutdown+0x1bc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	e00c      	b.n	8006b52 <tcp_close_shutdown+0x14a>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d104      	bne.n	8006b4c <tcp_close_shutdown+0x144>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	e005      	b.n	8006b58 <tcp_close_shutdown+0x150>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1ef      	bne.n	8006b38 <tcp_close_shutdown+0x130>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fea0 	bl	80068a4 <tcp_free>
      break;
 8006b64:	e01a      	b.n	8006b9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff ff14 	bl	8006994 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4816      	ldr	r0, [pc, #88]	; (8006bc8 <tcp_close_shutdown+0x1c0>)
 8006b70:	f001 f8a8 	bl	8007cc4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff feb1 	bl	80068dc <tcp_free_listen>
      break;
 8006b7a:	e00f      	b.n	8006b9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <tcp_close_shutdown+0x1b0>)
 8006b80:	f001 f8a0 	bl	8007cc4 <tcp_pcb_remove>
 8006b84:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <tcp_close_shutdown+0x1b4>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fe8a 	bl	80068a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006b90:	e004      	b.n	8006b9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f81a 	bl	8006bcc <tcp_close_shutdown_fin>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	e000      	b.n	8006b9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	08010e30 	.word	0x08010e30
 8006bac:	08010f04 	.word	0x08010f04
 8006bb0:	08010e74 	.word	0x08010e74
 8006bb4:	08010f24 	.word	0x08010f24
 8006bb8:	20008414 	.word	0x20008414
 8006bbc:	20008410 	.word	0x20008410
 8006bc0:	20008428 	.word	0x20008428
 8006bc4:	20008420 	.word	0x20008420
 8006bc8:	2000841c 	.word	0x2000841c

08006bcc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <tcp_close_shutdown_fin+0x1c>
 8006bda:	4b2e      	ldr	r3, [pc, #184]	; (8006c94 <tcp_close_shutdown_fin+0xc8>)
 8006bdc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006be0:	492d      	ldr	r1, [pc, #180]	; (8006c98 <tcp_close_shutdown_fin+0xcc>)
 8006be2:	482e      	ldr	r0, [pc, #184]	; (8006c9c <tcp_close_shutdown_fin+0xd0>)
 8006be4:	f008 f8e2 	bl	800edac <iprintf>

  switch (pcb->state) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
 8006bec:	2b07      	cmp	r3, #7
 8006bee:	d020      	beq.n	8006c32 <tcp_close_shutdown_fin+0x66>
 8006bf0:	2b07      	cmp	r3, #7
 8006bf2:	dc2b      	bgt.n	8006c4c <tcp_close_shutdown_fin+0x80>
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d002      	beq.n	8006bfe <tcp_close_shutdown_fin+0x32>
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d00d      	beq.n	8006c18 <tcp_close_shutdown_fin+0x4c>
 8006bfc:	e026      	b.n	8006c4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f003 fee2 	bl	800a9c8 <tcp_send_fin>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11f      	bne.n	8006c50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2205      	movs	r2, #5
 8006c14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c16:	e01b      	b.n	8006c50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f003 fed5 	bl	800a9c8 <tcp_send_fin>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d114      	bne.n	8006c54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2205      	movs	r2, #5
 8006c2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c30:	e010      	b.n	8006c54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f003 fec8 	bl	800a9c8 <tcp_send_fin>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2209      	movs	r2, #9
 8006c48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c4a:	e005      	b.n	8006c58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e01c      	b.n	8006c8a <tcp_close_shutdown_fin+0xbe>
      break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <tcp_close_shutdown_fin+0x8e>
      break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <tcp_close_shutdown_fin+0x8e>
      break;
 8006c58:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f003 ffee 	bl	800ac44 <tcp_output>
 8006c68:	e00d      	b.n	8006c86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d108      	bne.n	8006c86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8b5b      	ldrh	r3, [r3, #26]
 8006c78:	f043 0308 	orr.w	r3, r3, #8
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e001      	b.n	8006c8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	08010e30 	.word	0x08010e30
 8006c98:	08010ee0 	.word	0x08010ee0
 8006c9c:	08010e74 	.word	0x08010e74

08006ca0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <tcp_close+0x22>
 8006cae:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <tcp_close+0x4c>)
 8006cb0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006cb4:	490e      	ldr	r1, [pc, #56]	; (8006cf0 <tcp_close+0x50>)
 8006cb6:	480f      	ldr	r0, [pc, #60]	; (8006cf4 <tcp_close+0x54>)
 8006cb8:	f008 f878 	bl	800edac <iprintf>
 8006cbc:	f06f 030f 	mvn.w	r3, #15
 8006cc0:	e00f      	b.n	8006ce2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	7d1b      	ldrb	r3, [r3, #20]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d006      	beq.n	8006cd8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8b5b      	ldrh	r3, [r3, #26]
 8006cce:	f043 0310 	orr.w	r3, r3, #16
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006cd8:	2101      	movs	r1, #1
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fe94 	bl	8006a08 <tcp_close_shutdown>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	08010e30 	.word	0x08010e30
 8006cf0:	08010f40 	.word	0x08010f40
 8006cf4:	08010e74 	.word	0x08010e74

08006cf8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08e      	sub	sp, #56	; 0x38
 8006cfc:	af04      	add	r7, sp, #16
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d107      	bne.n	8006d18 <tcp_abandon+0x20>
 8006d08:	4b52      	ldr	r3, [pc, #328]	; (8006e54 <tcp_abandon+0x15c>)
 8006d0a:	f240 223d 	movw	r2, #573	; 0x23d
 8006d0e:	4952      	ldr	r1, [pc, #328]	; (8006e58 <tcp_abandon+0x160>)
 8006d10:	4852      	ldr	r0, [pc, #328]	; (8006e5c <tcp_abandon+0x164>)
 8006d12:	f008 f84b 	bl	800edac <iprintf>
 8006d16:	e099      	b.n	8006e4c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7d1b      	ldrb	r3, [r3, #20]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <tcp_abandon+0x36>
 8006d20:	4b4c      	ldr	r3, [pc, #304]	; (8006e54 <tcp_abandon+0x15c>)
 8006d22:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006d26:	494e      	ldr	r1, [pc, #312]	; (8006e60 <tcp_abandon+0x168>)
 8006d28:	484c      	ldr	r0, [pc, #304]	; (8006e5c <tcp_abandon+0x164>)
 8006d2a:	f008 f83f 	bl	800edac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7d1b      	ldrb	r3, [r3, #20]
 8006d32:	2b0a      	cmp	r3, #10
 8006d34:	d107      	bne.n	8006d46 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	484a      	ldr	r0, [pc, #296]	; (8006e64 <tcp_abandon+0x16c>)
 8006d3a:	f000 ffc3 	bl	8007cc4 <tcp_pcb_remove>
    tcp_free(pcb);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fdb0 	bl	80068a4 <tcp_free>
 8006d44:	e082      	b.n	8006e4c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d52:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7d1b      	ldrb	r3, [r3, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d126      	bne.n	8006dbe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8adb      	ldrh	r3, [r3, #22]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d02e      	beq.n	8006dd6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d78:	4b3b      	ldr	r3, [pc, #236]	; (8006e68 <tcp_abandon+0x170>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d105      	bne.n	8006d8e <tcp_abandon+0x96>
 8006d82:	4b39      	ldr	r3, [pc, #228]	; (8006e68 <tcp_abandon+0x170>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4a37      	ldr	r2, [pc, #220]	; (8006e68 <tcp_abandon+0x170>)
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	e013      	b.n	8006db6 <tcp_abandon+0xbe>
 8006d8e:	4b36      	ldr	r3, [pc, #216]	; (8006e68 <tcp_abandon+0x170>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	e00c      	b.n	8006db0 <tcp_abandon+0xb8>
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d104      	bne.n	8006daa <tcp_abandon+0xb2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	60da      	str	r2, [r3, #12]
 8006da8:	e005      	b.n	8006db6 <tcp_abandon+0xbe>
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ef      	bne.n	8006d96 <tcp_abandon+0x9e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	60da      	str	r2, [r3, #12]
 8006dbc:	e00b      	b.n	8006dd6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8adb      	ldrh	r3, [r3, #22]
 8006dc6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4828      	ldr	r0, [pc, #160]	; (8006e6c <tcp_abandon+0x174>)
 8006dcc:	f000 ff7a 	bl	8007cc4 <tcp_pcb_remove>
 8006dd0:	4b27      	ldr	r3, [pc, #156]	; (8006e70 <tcp_abandon+0x178>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fd1c 	bl	8007820 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fd13 	bl	8007820 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fd0a 	bl	8007820 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	8b12      	ldrh	r2, [r2, #24]
 8006e1c:	9202      	str	r2, [sp, #8]
 8006e1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e20:	9201      	str	r2, [sp, #4]
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	460b      	mov	r3, r1
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	69b9      	ldr	r1, [r7, #24]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f004 fcbe 	bl	800b7ac <tcp_rst>
    }
    last_state = pcb->state;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fd34 	bl	80068a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <tcp_abandon+0x154>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f06f 010c 	mvn.w	r1, #12
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	4798      	blx	r3
  }
}
 8006e4c:	3728      	adds	r7, #40	; 0x28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08010e30 	.word	0x08010e30
 8006e58:	08010f74 	.word	0x08010f74
 8006e5c:	08010e74 	.word	0x08010e74
 8006e60:	08010f90 	.word	0x08010f90
 8006e64:	20008424 	.word	0x20008424
 8006e68:	20008420 	.word	0x20008420
 8006e6c:	20008414 	.word	0x20008414
 8006e70:	20008410 	.word	0x20008410

08006e74 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ff3a 	bl	8006cf8 <tcp_abandon>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <tcp_update_rcv_ann_wnd+0x1c>
 8006e9a:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e9c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006ea0:	4924      	ldr	r1, [pc, #144]	; (8006f34 <tcp_update_rcv_ann_wnd+0xa8>)
 8006ea2:	4825      	ldr	r0, [pc, #148]	; (8006f38 <tcp_update_rcv_ann_wnd+0xac>)
 8006ea4:	f007 ff82 	bl	800edac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006eb0:	4413      	add	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006ebc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006ec0:	bf28      	it	cs
 8006ec2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006ec6:	b292      	uxth	r2, r2
 8006ec8:	4413      	add	r3, r2
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	db08      	blt.n	8006ee4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	e020      	b.n	8006f26 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dd03      	ble.n	8006efa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ef8:	e014      	b.n	8006f24 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0c:	d306      	bcc.n	8006f1c <tcp_update_rcv_ann_wnd+0x90>
 8006f0e:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <tcp_update_rcv_ann_wnd+0xa4>)
 8006f10:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006f14:	4909      	ldr	r1, [pc, #36]	; (8006f3c <tcp_update_rcv_ann_wnd+0xb0>)
 8006f16:	4808      	ldr	r0, [pc, #32]	; (8006f38 <tcp_update_rcv_ann_wnd+0xac>)
 8006f18:	f007 ff48 	bl	800edac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006f24:	2300      	movs	r3, #0
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	08010e30 	.word	0x08010e30
 8006f34:	0801108c 	.word	0x0801108c
 8006f38:	08010e74 	.word	0x08010e74
 8006f3c:	080110b0 	.word	0x080110b0

08006f40 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d107      	bne.n	8006f62 <tcp_recved+0x22>
 8006f52:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <tcp_recved+0x90>)
 8006f54:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006f58:	491e      	ldr	r1, [pc, #120]	; (8006fd4 <tcp_recved+0x94>)
 8006f5a:	481f      	ldr	r0, [pc, #124]	; (8006fd8 <tcp_recved+0x98>)
 8006f5c:	f007 ff26 	bl	800edac <iprintf>
 8006f60:	e032      	b.n	8006fc8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7d1b      	ldrb	r3, [r3, #20]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d106      	bne.n	8006f78 <tcp_recved+0x38>
 8006f6a:	4b19      	ldr	r3, [pc, #100]	; (8006fd0 <tcp_recved+0x90>)
 8006f6c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006f70:	491a      	ldr	r1, [pc, #104]	; (8006fdc <tcp_recved+0x9c>)
 8006f72:	4819      	ldr	r0, [pc, #100]	; (8006fd8 <tcp_recved+0x98>)
 8006f74:	f007 ff1a 	bl	800edac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	4413      	add	r3, r2
 8006f80:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006f82:	89fb      	ldrh	r3, [r7, #14]
 8006f84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f88:	d804      	bhi.n	8006f94 <tcp_recved+0x54>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8e:	89fa      	ldrh	r2, [r7, #14]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d204      	bcs.n	8006f9e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f9c:	e002      	b.n	8006fa4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	89fa      	ldrh	r2, [r7, #14]
 8006fa2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff ff71 	bl	8006e8c <tcp_update_rcv_ann_wnd>
 8006faa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006fb2:	d309      	bcc.n	8006fc8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8b5b      	ldrh	r3, [r3, #26]
 8006fb8:	f043 0302 	orr.w	r3, r3, #2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f003 fe3e 	bl	800ac44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	08010e30 	.word	0x08010e30
 8006fd4:	080110cc 	.word	0x080110cc
 8006fd8:	08010e74 	.word	0x08010e74
 8006fdc:	080110e4 	.word	0x080110e4

08006fe0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006fe0:	b5b0      	push	{r4, r5, r7, lr}
 8006fe2:	b090      	sub	sp, #64	; 0x40
 8006fe4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006fec:	4b94      	ldr	r3, [pc, #592]	; (8007240 <tcp_slowtmr+0x260>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a93      	ldr	r2, [pc, #588]	; (8007240 <tcp_slowtmr+0x260>)
 8006ff4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006ff6:	4b93      	ldr	r3, [pc, #588]	; (8007244 <tcp_slowtmr+0x264>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	4b91      	ldr	r3, [pc, #580]	; (8007244 <tcp_slowtmr+0x264>)
 8007000:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007006:	4b90      	ldr	r3, [pc, #576]	; (8007248 <tcp_slowtmr+0x268>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800700c:	e29f      	b.n	800754e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	7d1b      	ldrb	r3, [r3, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <tcp_slowtmr+0x44>
 8007016:	4b8d      	ldr	r3, [pc, #564]	; (800724c <tcp_slowtmr+0x26c>)
 8007018:	f240 42be 	movw	r2, #1214	; 0x4be
 800701c:	498c      	ldr	r1, [pc, #560]	; (8007250 <tcp_slowtmr+0x270>)
 800701e:	488d      	ldr	r0, [pc, #564]	; (8007254 <tcp_slowtmr+0x274>)
 8007020:	f007 fec4 	bl	800edac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	7d1b      	ldrb	r3, [r3, #20]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d106      	bne.n	800703a <tcp_slowtmr+0x5a>
 800702c:	4b87      	ldr	r3, [pc, #540]	; (800724c <tcp_slowtmr+0x26c>)
 800702e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007032:	4989      	ldr	r1, [pc, #548]	; (8007258 <tcp_slowtmr+0x278>)
 8007034:	4887      	ldr	r0, [pc, #540]	; (8007254 <tcp_slowtmr+0x274>)
 8007036:	f007 feb9 	bl	800edac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	7d1b      	ldrb	r3, [r3, #20]
 800703e:	2b0a      	cmp	r3, #10
 8007040:	d106      	bne.n	8007050 <tcp_slowtmr+0x70>
 8007042:	4b82      	ldr	r3, [pc, #520]	; (800724c <tcp_slowtmr+0x26c>)
 8007044:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007048:	4984      	ldr	r1, [pc, #528]	; (800725c <tcp_slowtmr+0x27c>)
 800704a:	4882      	ldr	r0, [pc, #520]	; (8007254 <tcp_slowtmr+0x274>)
 800704c:	f007 feae 	bl	800edac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	7f9a      	ldrb	r2, [r3, #30]
 8007054:	4b7b      	ldr	r3, [pc, #492]	; (8007244 <tcp_slowtmr+0x264>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d105      	bne.n	8007068 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007066:	e272      	b.n	800754e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007068:	4b76      	ldr	r3, [pc, #472]	; (8007244 <tcp_slowtmr+0x264>)
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	7d1b      	ldrb	r3, [r3, #20]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d10a      	bne.n	800709a <tcp_slowtmr+0xba>
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800708a:	2b05      	cmp	r3, #5
 800708c:	d905      	bls.n	800709a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800708e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007092:	3301      	adds	r3, #1
 8007094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007098:	e11e      	b.n	80072d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070a0:	2b0b      	cmp	r3, #11
 80070a2:	d905      	bls.n	80070b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80070a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a8:	3301      	adds	r3, #1
 80070aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070ae:	e113      	b.n	80072d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d075      	beq.n	80071a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <tcp_slowtmr+0xf0>
 80070c2:	4b62      	ldr	r3, [pc, #392]	; (800724c <tcp_slowtmr+0x26c>)
 80070c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80070c8:	4965      	ldr	r1, [pc, #404]	; (8007260 <tcp_slowtmr+0x280>)
 80070ca:	4862      	ldr	r0, [pc, #392]	; (8007254 <tcp_slowtmr+0x274>)
 80070cc:	f007 fe6e 	bl	800edac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <tcp_slowtmr+0x106>
 80070d8:	4b5c      	ldr	r3, [pc, #368]	; (800724c <tcp_slowtmr+0x26c>)
 80070da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80070de:	4961      	ldr	r1, [pc, #388]	; (8007264 <tcp_slowtmr+0x284>)
 80070e0:	485c      	ldr	r0, [pc, #368]	; (8007254 <tcp_slowtmr+0x274>)
 80070e2:	f007 fe63 	bl	800edac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80070ec:	2b0b      	cmp	r3, #11
 80070ee:	d905      	bls.n	80070fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80070f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f4:	3301      	adds	r3, #1
 80070f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070fa:	e0ed      	b.n	80072d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007102:	3b01      	subs	r3, #1
 8007104:	4a58      	ldr	r2, [pc, #352]	; (8007268 <tcp_slowtmr+0x288>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007110:	7c7a      	ldrb	r2, [r7, #17]
 8007112:	429a      	cmp	r2, r3
 8007114:	d907      	bls.n	8007126 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800711c:	3301      	adds	r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800712c:	7c7a      	ldrb	r2, [r7, #17]
 800712e:	429a      	cmp	r2, r3
 8007130:	f200 80d2 	bhi.w	80072d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007134:	2301      	movs	r3, #1
 8007136:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713e:	2b00      	cmp	r3, #0
 8007140:	d108      	bne.n	8007154 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007144:	f004 fc26 	bl	800b994 <tcp_zero_window_probe>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d014      	beq.n	8007178 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800714e:	2300      	movs	r3, #0
 8007150:	623b      	str	r3, [r7, #32]
 8007152:	e011      	b.n	8007178 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800715a:	4619      	mov	r1, r3
 800715c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800715e:	f003 faeb 	bl	800a738 <tcp_split_unsent_seg>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800716a:	f003 fd6b 	bl	800ac44 <tcp_output>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80ac 	beq.w	80072d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800718e:	2b06      	cmp	r3, #6
 8007190:	f200 80a2 	bhi.w	80072d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800719a:	3301      	adds	r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80071a4:	e098      	b.n	80072d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	db0f      	blt.n	80071d0 <tcp_slowtmr+0x1f0>
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80071b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d008      	beq.n	80071d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3301      	adds	r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	b21a      	sxth	r2, r3
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80071dc:	429a      	cmp	r2, r3
 80071de:	db7b      	blt.n	80072d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80071e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071e2:	f004 f821 	bl	800b228 <tcp_rexmit_rto_prepare>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <tcp_slowtmr+0x21c>
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d171      	bne.n	80072d8 <tcp_slowtmr+0x2f8>
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d06d      	beq.n	80072d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	7d1b      	ldrb	r3, [r3, #20]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d03a      	beq.n	800727a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800720a:	2b0c      	cmp	r3, #12
 800720c:	bf28      	it	cs
 800720e:	230c      	movcs	r3, #12
 8007210:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007218:	10db      	asrs	r3, r3, #3
 800721a:	b21b      	sxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007224:	4413      	add	r3, r2
 8007226:	7efa      	ldrb	r2, [r7, #27]
 8007228:	4910      	ldr	r1, [pc, #64]	; (800726c <tcp_slowtmr+0x28c>)
 800722a:	5c8a      	ldrb	r2, [r1, r2]
 800722c:	4093      	lsls	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007236:	4293      	cmp	r3, r2
 8007238:	dc1a      	bgt.n	8007270 <tcp_slowtmr+0x290>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	b21a      	sxth	r2, r3
 800723e:	e019      	b.n	8007274 <tcp_slowtmr+0x294>
 8007240:	20008418 	.word	0x20008418
 8007244:	200000fe 	.word	0x200000fe
 8007248:	20008414 	.word	0x20008414
 800724c:	08010e30 	.word	0x08010e30
 8007250:	08011174 	.word	0x08011174
 8007254:	08010e74 	.word	0x08010e74
 8007258:	080111a0 	.word	0x080111a0
 800725c:	080111cc 	.word	0x080111cc
 8007260:	080111fc 	.word	0x080111fc
 8007264:	08011230 	.word	0x08011230
 8007268:	08012e08 	.word	0x08012e08
 800726c:	08012df8 	.word	0x08012df8
 8007270:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	2200      	movs	r2, #0
 800727e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800728c:	4293      	cmp	r3, r2
 800728e:	bf28      	it	cs
 8007290:	4613      	movcs	r3, r2
 8007292:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007294:	8a7b      	ldrh	r3, [r7, #18]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d206      	bcs.n	80072c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80072d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d4:	f004 f818 	bl	800b308 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	7d1b      	ldrb	r3, [r3, #20]
 80072dc:	2b06      	cmp	r3, #6
 80072de:	d111      	bne.n	8007304 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	8b5b      	ldrh	r3, [r3, #26]
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072ec:	4b9d      	ldr	r3, [pc, #628]	; (8007564 <tcp_slowtmr+0x584>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b28      	cmp	r3, #40	; 0x28
 80072f8:	d904      	bls.n	8007304 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80072fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072fe:	3301      	adds	r3, #1
 8007300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	7a5b      	ldrb	r3, [r3, #9]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d04c      	beq.n	80073aa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007314:	2b04      	cmp	r3, #4
 8007316:	d003      	beq.n	8007320 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800731c:	2b07      	cmp	r3, #7
 800731e:	d144      	bne.n	80073aa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007320:	4b90      	ldr	r3, [pc, #576]	; (8007564 <tcp_slowtmr+0x584>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007330:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007334:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007338:	498b      	ldr	r1, [pc, #556]	; (8007568 <tcp_slowtmr+0x588>)
 800733a:	fba1 1303 	umull	r1, r3, r1, r3
 800733e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007340:	429a      	cmp	r2, r3
 8007342:	d90a      	bls.n	800735a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007348:	3301      	adds	r3, #1
 800734a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800734e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007352:	3301      	adds	r3, #1
 8007354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007358:	e027      	b.n	80073aa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800735a:	4b82      	ldr	r3, [pc, #520]	; (8007564 <tcp_slowtmr+0x584>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007370:	4618      	mov	r0, r3
 8007372:	4b7e      	ldr	r3, [pc, #504]	; (800756c <tcp_slowtmr+0x58c>)
 8007374:	fb03 f300 	mul.w	r3, r3, r0
 8007378:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800737a:	497b      	ldr	r1, [pc, #492]	; (8007568 <tcp_slowtmr+0x588>)
 800737c:	fba1 1303 	umull	r1, r3, r1, r3
 8007380:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007382:	429a      	cmp	r2, r3
 8007384:	d911      	bls.n	80073aa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007388:	f004 fac4 	bl	800b914 <tcp_keepalive>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007392:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80073a0:	3301      	adds	r3, #1
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d011      	beq.n	80073d6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80073b2:	4b6c      	ldr	r3, [pc, #432]	; (8007564 <tcp_slowtmr+0x584>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80073c2:	4619      	mov	r1, r3
 80073c4:	460b      	mov	r3, r1
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	440b      	add	r3, r1
 80073ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d302      	bcc.n	80073d6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80073d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d2:	f000 fddb 	bl	8007f8c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	7d1b      	ldrb	r3, [r3, #20]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d10b      	bne.n	80073f6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073de:	4b61      	ldr	r3, [pc, #388]	; (8007564 <tcp_slowtmr+0x584>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b28      	cmp	r3, #40	; 0x28
 80073ea:	d904      	bls.n	80073f6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80073ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f0:	3301      	adds	r3, #1
 80073f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	7d1b      	ldrb	r3, [r3, #20]
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	d10b      	bne.n	8007416 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80073fe:	4b59      	ldr	r3, [pc, #356]	; (8007564 <tcp_slowtmr+0x584>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2bf0      	cmp	r3, #240	; 0xf0
 800740a:	d904      	bls.n	8007416 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007410:	3301      	adds	r3, #1
 8007412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800741a:	2b00      	cmp	r3, #0
 800741c:	d060      	beq.n	80074e0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007428:	f000 fbfc 	bl	8007c24 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007432:	4b4f      	ldr	r3, [pc, #316]	; (8007570 <tcp_slowtmr+0x590>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007438:	429a      	cmp	r2, r3
 800743a:	d106      	bne.n	800744a <tcp_slowtmr+0x46a>
 800743c:	4b4d      	ldr	r3, [pc, #308]	; (8007574 <tcp_slowtmr+0x594>)
 800743e:	f240 526d 	movw	r2, #1389	; 0x56d
 8007442:	494d      	ldr	r1, [pc, #308]	; (8007578 <tcp_slowtmr+0x598>)
 8007444:	484d      	ldr	r0, [pc, #308]	; (800757c <tcp_slowtmr+0x59c>)
 8007446:	f007 fcb1 	bl	800edac <iprintf>
        prev->next = pcb->next;
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	60da      	str	r2, [r3, #12]
 8007452:	e00f      	b.n	8007474 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007454:	4b46      	ldr	r3, [pc, #280]	; (8007570 <tcp_slowtmr+0x590>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745a:	429a      	cmp	r2, r3
 800745c:	d006      	beq.n	800746c <tcp_slowtmr+0x48c>
 800745e:	4b45      	ldr	r3, [pc, #276]	; (8007574 <tcp_slowtmr+0x594>)
 8007460:	f240 5271 	movw	r2, #1393	; 0x571
 8007464:	4946      	ldr	r1, [pc, #280]	; (8007580 <tcp_slowtmr+0x5a0>)
 8007466:	4845      	ldr	r0, [pc, #276]	; (800757c <tcp_slowtmr+0x59c>)
 8007468:	f007 fca0 	bl	800edac <iprintf>
        tcp_active_pcbs = pcb->next;
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	4a3f      	ldr	r2, [pc, #252]	; (8007570 <tcp_slowtmr+0x590>)
 8007472:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007478:	2b00      	cmp	r3, #0
 800747a:	d013      	beq.n	80074a4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007484:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	3304      	adds	r3, #4
 800748a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748c:	8ad2      	ldrh	r2, [r2, #22]
 800748e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007490:	8b09      	ldrh	r1, [r1, #24]
 8007492:	9102      	str	r1, [sp, #8]
 8007494:	9201      	str	r2, [sp, #4]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	462b      	mov	r3, r5
 800749a:	4622      	mov	r2, r4
 800749c:	4601      	mov	r1, r0
 800749e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074a0:	f004 f984 	bl	800b7ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	7d1b      	ldrb	r3, [r3, #20]
 80074ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80074ba:	6838      	ldr	r0, [r7, #0]
 80074bc:	f7ff f9f2 	bl	80068a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80074c0:	4b30      	ldr	r3, [pc, #192]	; (8007584 <tcp_slowtmr+0x5a4>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <tcp_slowtmr+0x4f6>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f06f 010c 	mvn.w	r1, #12
 80074d2:	68b8      	ldr	r0, [r7, #8]
 80074d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80074d6:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <tcp_slowtmr+0x5a4>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d037      	beq.n	800754e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80074de:	e590      	b.n	8007002 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	7f1b      	ldrb	r3, [r3, #28]
 80074ee:	3301      	adds	r3, #1
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	7f1a      	ldrb	r2, [r3, #28]
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	7f5b      	ldrb	r3, [r3, #29]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d325      	bcc.n	800754e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <tcp_slowtmr+0x5a4>)
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <tcp_slowtmr+0x550>
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007520:	6912      	ldr	r2, [r2, #16]
 8007522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800752e:	e002      	b.n	8007536 <tcp_slowtmr+0x556>
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <tcp_slowtmr+0x5a4>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d000      	beq.n	8007540 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800753e:	e560      	b.n	8007002 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007540:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754a:	f003 fb7b 	bl	800ac44 <tcp_output>
  while (pcb != NULL) {
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	f47f ad5c 	bne.w	800700e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <tcp_slowtmr+0x5a8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007560:	e067      	b.n	8007632 <tcp_slowtmr+0x652>
 8007562:	bf00      	nop
 8007564:	20008418 	.word	0x20008418
 8007568:	10624dd3 	.word	0x10624dd3
 800756c:	000124f8 	.word	0x000124f8
 8007570:	20008414 	.word	0x20008414
 8007574:	08010e30 	.word	0x08010e30
 8007578:	08011268 	.word	0x08011268
 800757c:	08010e74 	.word	0x08010e74
 8007580:	08011294 	.word	0x08011294
 8007584:	20008410 	.word	0x20008410
 8007588:	20008424 	.word	0x20008424
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	7d1b      	ldrb	r3, [r3, #20]
 8007590:	2b0a      	cmp	r3, #10
 8007592:	d006      	beq.n	80075a2 <tcp_slowtmr+0x5c2>
 8007594:	4b2b      	ldr	r3, [pc, #172]	; (8007644 <tcp_slowtmr+0x664>)
 8007596:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800759a:	492b      	ldr	r1, [pc, #172]	; (8007648 <tcp_slowtmr+0x668>)
 800759c:	482b      	ldr	r0, [pc, #172]	; (800764c <tcp_slowtmr+0x66c>)
 800759e:	f007 fc05 	bl	800edac <iprintf>
    pcb_remove = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80075a8:	4b29      	ldr	r3, [pc, #164]	; (8007650 <tcp_slowtmr+0x670>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2bf0      	cmp	r3, #240	; 0xf0
 80075b4:	d904      	bls.n	80075c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80075b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ba:	3301      	adds	r3, #1
 80075bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d02f      	beq.n	8007628 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80075c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ca:	f000 fb2b 	bl	8007c24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d010      	beq.n	80075f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <tcp_slowtmr+0x674>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d106      	bne.n	80075ec <tcp_slowtmr+0x60c>
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <tcp_slowtmr+0x664>)
 80075e0:	f240 52af 	movw	r2, #1455	; 0x5af
 80075e4:	491c      	ldr	r1, [pc, #112]	; (8007658 <tcp_slowtmr+0x678>)
 80075e6:	4819      	ldr	r0, [pc, #100]	; (800764c <tcp_slowtmr+0x66c>)
 80075e8:	f007 fbe0 	bl	800edac <iprintf>
        prev->next = pcb->next;
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	60da      	str	r2, [r3, #12]
 80075f4:	e00f      	b.n	8007616 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80075f6:	4b17      	ldr	r3, [pc, #92]	; (8007654 <tcp_slowtmr+0x674>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d006      	beq.n	800760e <tcp_slowtmr+0x62e>
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <tcp_slowtmr+0x664>)
 8007602:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007606:	4915      	ldr	r1, [pc, #84]	; (800765c <tcp_slowtmr+0x67c>)
 8007608:	4810      	ldr	r0, [pc, #64]	; (800764c <tcp_slowtmr+0x66c>)
 800760a:	f007 fbcf 	bl	800edac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	4a10      	ldr	r2, [pc, #64]	; (8007654 <tcp_slowtmr+0x674>)
 8007614:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007618:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007620:	69f8      	ldr	r0, [r7, #28]
 8007622:	f7ff f93f 	bl	80068a4 <tcp_free>
 8007626:	e004      	b.n	8007632 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1a9      	bne.n	800758c <tcp_slowtmr+0x5ac>
    }
  }
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3730      	adds	r7, #48	; 0x30
 800763e:	46bd      	mov	sp, r7
 8007640:	bdb0      	pop	{r4, r5, r7, pc}
 8007642:	bf00      	nop
 8007644:	08010e30 	.word	0x08010e30
 8007648:	080112c0 	.word	0x080112c0
 800764c:	08010e74 	.word	0x08010e74
 8007650:	20008418 	.word	0x20008418
 8007654:	20008424 	.word	0x20008424
 8007658:	080112f0 	.word	0x080112f0
 800765c:	08011318 	.word	0x08011318

08007660 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007666:	4b2d      	ldr	r3, [pc, #180]	; (800771c <tcp_fasttmr+0xbc>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	b2da      	uxtb	r2, r3
 800766e:	4b2b      	ldr	r3, [pc, #172]	; (800771c <tcp_fasttmr+0xbc>)
 8007670:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007672:	4b2b      	ldr	r3, [pc, #172]	; (8007720 <tcp_fasttmr+0xc0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007678:	e048      	b.n	800770c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7f9a      	ldrb	r2, [r3, #30]
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <tcp_fasttmr+0xbc>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d03f      	beq.n	8007706 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <tcp_fasttmr+0xbc>)
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8b5b      	ldrh	r3, [r3, #26]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d010      	beq.n	80076bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8b5b      	ldrh	r3, [r3, #26]
 800769e:	f043 0302 	orr.w	r3, r3, #2
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f003 facb 	bl	800ac44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8b5b      	ldrh	r3, [r3, #26]
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8b5b      	ldrh	r3, [r3, #26]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8b5b      	ldrh	r3, [r3, #26]
 80076cc:	f023 0308 	bic.w	r3, r3, #8
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff fa78 	bl	8006bcc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <tcp_fasttmr+0xc4>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f819 	bl	8007728 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <tcp_fasttmr+0xc4>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d000      	beq.n	8007700 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80076fe:	e7b8      	b.n	8007672 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	e002      	b.n	800770c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1b3      	bne.n	800767a <tcp_fasttmr+0x1a>
    }
  }
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200000fe 	.word	0x200000fe
 8007720:	20008414 	.word	0x20008414
 8007724:	20008410 	.word	0x20008410

08007728 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <tcp_process_refused_data+0x22>
 8007736:	4b37      	ldr	r3, [pc, #220]	; (8007814 <tcp_process_refused_data+0xec>)
 8007738:	f240 6209 	movw	r2, #1545	; 0x609
 800773c:	4936      	ldr	r1, [pc, #216]	; (8007818 <tcp_process_refused_data+0xf0>)
 800773e:	4837      	ldr	r0, [pc, #220]	; (800781c <tcp_process_refused_data+0xf4>)
 8007740:	f007 fb34 	bl	800edac <iprintf>
 8007744:	f06f 030f 	mvn.w	r3, #15
 8007748:	e060      	b.n	800780c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800774e:	7b5b      	ldrb	r3, [r3, #13]
 8007750:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007756:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <tcp_process_refused_data+0x58>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6918      	ldr	r0, [r3, #16]
 8007772:	2300      	movs	r3, #0
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	47a0      	blx	r4
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]
 800777e:	e007      	b.n	8007790 <tcp_process_refused_data+0x68>
 8007780:	2300      	movs	r3, #0
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	2000      	movs	r0, #0
 8007788:	f000 f8a4 	bl	80078d4 <tcp_recv_null>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d12a      	bne.n	80077ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d033      	beq.n	800780a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80077aa:	d005      	beq.n	80077b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b0:	3301      	adds	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <tcp_process_refused_data+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6918      	ldr	r0, [r3, #16]
 80077cc:	2300      	movs	r3, #0
 80077ce:	2200      	movs	r2, #0
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	47a0      	blx	r4
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]
 80077d8:	e001      	b.n	80077de <tcp_process_refused_data+0xb6>
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80077de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e2:	f113 0f0d 	cmn.w	r3, #13
 80077e6:	d110      	bne.n	800780a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80077e8:	f06f 030c 	mvn.w	r3, #12
 80077ec:	e00e      	b.n	800780c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80077ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f2:	f113 0f0d 	cmn.w	r3, #13
 80077f6:	d102      	bne.n	80077fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80077f8:	f06f 030c 	mvn.w	r3, #12
 80077fc:	e006      	b.n	800780c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007804:	f06f 0304 	mvn.w	r3, #4
 8007808:	e000      	b.n	800780c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	bd90      	pop	{r4, r7, pc}
 8007814:	08010e30 	.word	0x08010e30
 8007818:	08011340 	.word	0x08011340
 800781c:	08010e74 	.word	0x08010e74

08007820 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007828:	e007      	b.n	800783a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f80a 	bl	800784a <tcp_seg_free>
    seg = next;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f4      	bne.n	800782a <tcp_segs_free+0xa>
  }
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe fd6d 	bl	8006344 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	2003      	movs	r0, #3
 800786e:	f7fd fef3 	bl	8005658 <memp_free>
  }
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <tcp_seg_copy+0x1c>
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <tcp_seg_copy+0x4c>)
 800788c:	f240 6282 	movw	r2, #1666	; 0x682
 8007890:	490e      	ldr	r1, [pc, #56]	; (80078cc <tcp_seg_copy+0x50>)
 8007892:	480f      	ldr	r0, [pc, #60]	; (80078d0 <tcp_seg_copy+0x54>)
 8007894:	f007 fa8a 	bl	800edac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007898:	2003      	movs	r0, #3
 800789a:	f7fd fe6d 	bl	8005578 <memp_malloc>
 800789e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <tcp_seg_copy+0x2e>
    return NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	e00a      	b.n	80078c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80078aa:	2210      	movs	r2, #16
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f007 fa4c 	bl	800ed4c <memcpy>
  pbuf_ref(cseg->p);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fde3 	bl	8006484 <pbuf_ref>
  return cseg;
 80078be:	68fb      	ldr	r3, [r7, #12]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	08010e30 	.word	0x08010e30
 80078cc:	08011384 	.word	0x08011384
 80078d0:	08010e74 	.word	0x08010e74

080078d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <tcp_recv_null+0x28>
 80078e8:	4b12      	ldr	r3, [pc, #72]	; (8007934 <tcp_recv_null+0x60>)
 80078ea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80078ee:	4912      	ldr	r1, [pc, #72]	; (8007938 <tcp_recv_null+0x64>)
 80078f0:	4812      	ldr	r0, [pc, #72]	; (800793c <tcp_recv_null+0x68>)
 80078f2:	f007 fa5b 	bl	800edac <iprintf>
 80078f6:	f06f 030f 	mvn.w	r3, #15
 80078fa:	e016      	b.n	800792a <tcp_recv_null+0x56>

  if (p != NULL) {
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	891b      	ldrh	r3, [r3, #8]
 8007906:	4619      	mov	r1, r3
 8007908:	68b8      	ldr	r0, [r7, #8]
 800790a:	f7ff fb19 	bl	8006f40 <tcp_recved>
    pbuf_free(p);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fe fd18 	bl	8006344 <pbuf_free>
 8007914:	e008      	b.n	8007928 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800791e:	68b8      	ldr	r0, [r7, #8]
 8007920:	f7ff f9be 	bl	8006ca0 <tcp_close>
 8007924:	4603      	mov	r3, r0
 8007926:	e000      	b.n	800792a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	08010e30 	.word	0x08010e30
 8007938:	080113a0 	.word	0x080113a0
 800793c:	08010e74 	.word	0x08010e74

08007940 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	db01      	blt.n	8007956 <tcp_kill_prio+0x16>
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	e000      	b.n	8007958 <tcp_kill_prio+0x18>
 8007956:	237f      	movs	r3, #127	; 0x7f
 8007958:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d034      	beq.n	80079ca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	3b01      	subs	r3, #1
 8007964:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800796e:	4b19      	ldr	r3, [pc, #100]	; (80079d4 <tcp_kill_prio+0x94>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e01f      	b.n	80079b6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	7d5b      	ldrb	r3, [r3, #21]
 800797a:	7afa      	ldrb	r2, [r7, #11]
 800797c:	429a      	cmp	r2, r3
 800797e:	d80c      	bhi.n	800799a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007984:	7afa      	ldrb	r2, [r7, #11]
 8007986:	429a      	cmp	r2, r3
 8007988:	d112      	bne.n	80079b0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <tcp_kill_prio+0x98>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	429a      	cmp	r2, r3
 8007998:	d80a      	bhi.n	80079b0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800799a:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <tcp_kill_prio+0x98>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	7d5b      	ldrb	r3, [r3, #21]
 80079ae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1dc      	bne.n	8007976 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80079c2:	6938      	ldr	r0, [r7, #16]
 80079c4:	f7ff fa56 	bl	8006e74 <tcp_abort>
 80079c8:	e000      	b.n	80079cc <tcp_kill_prio+0x8c>
    return;
 80079ca:	bf00      	nop
  }
}
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20008414 	.word	0x20008414
 80079d8:	20008418 	.word	0x20008418

080079dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d009      	beq.n	8007a00 <tcp_kill_state+0x24>
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	d006      	beq.n	8007a00 <tcp_kill_state+0x24>
 80079f2:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <tcp_kill_state+0x80>)
 80079f4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80079f8:	4919      	ldr	r1, [pc, #100]	; (8007a60 <tcp_kill_state+0x84>)
 80079fa:	481a      	ldr	r0, [pc, #104]	; (8007a64 <tcp_kill_state+0x88>)
 80079fc:	f007 f9d6 	bl	800edac <iprintf>

  inactivity = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a08:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <tcp_kill_state+0x8c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	e017      	b.n	8007a40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	7d1b      	ldrb	r3, [r3, #20]
 8007a14:	79fa      	ldrb	r2, [r7, #7]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d10f      	bne.n	8007a3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a1a:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <tcp_kill_state+0x90>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d807      	bhi.n	8007a3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <tcp_kill_state+0x90>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e4      	bne.n	8007a10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6938      	ldr	r0, [r7, #16]
 8007a50:	f7ff f952 	bl	8006cf8 <tcp_abandon>
  }
}
 8007a54:	bf00      	nop
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	08010e30 	.word	0x08010e30
 8007a60:	080113bc 	.word	0x080113bc
 8007a64:	08010e74 	.word	0x08010e74
 8007a68:	20008414 	.word	0x20008414
 8007a6c:	20008418 	.word	0x20008418

08007a70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <tcp_kill_timewait+0x58>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e012      	b.n	8007aac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a86:	4b11      	ldr	r3, [pc, #68]	; (8007acc <tcp_kill_timewait+0x5c>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d807      	bhi.n	8007aa6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <tcp_kill_timewait+0x5c>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e9      	bne.n	8007a86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ab8:	68b8      	ldr	r0, [r7, #8]
 8007aba:	f7ff f9db 	bl	8006e74 <tcp_abort>
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20008424 	.word	0x20008424
 8007acc:	20008418 	.word	0x20008418

08007ad0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007ad6:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <tcp_handle_closepend+0x48>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007adc:	e014      	b.n	8007b08 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8b5b      	ldrh	r3, [r3, #26]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8b5b      	ldrh	r3, [r3, #26]
 8007af4:	f023 0308 	bic.w	r3, r3, #8
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff f864 	bl	8006bcc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e7      	bne.n	8007ade <tcp_handle_closepend+0xe>
  }
}
 8007b0e:	bf00      	nop
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20008414 	.word	0x20008414

08007b1c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b26:	2001      	movs	r0, #1
 8007b28:	f7fd fd26 	bl	8005578 <memp_malloc>
 8007b2c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d126      	bne.n	8007b82 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007b34:	f7ff ffcc 	bl	8007ad0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007b38:	f7ff ff9a 	bl	8007a70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	f7fd fd1b 	bl	8005578 <memp_malloc>
 8007b42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d11b      	bne.n	8007b82 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b4a:	2009      	movs	r0, #9
 8007b4c:	f7ff ff46 	bl	80079dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b50:	2001      	movs	r0, #1
 8007b52:	f7fd fd11 	bl	8005578 <memp_malloc>
 8007b56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d111      	bne.n	8007b82 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b5e:	2008      	movs	r0, #8
 8007b60:	f7ff ff3c 	bl	80079dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b64:	2001      	movs	r0, #1
 8007b66:	f7fd fd07 	bl	8005578 <memp_malloc>
 8007b6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d107      	bne.n	8007b82 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fee3 	bl	8007940 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	f7fd fcfc 	bl	8005578 <memp_malloc>
 8007b80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d03f      	beq.n	8007c08 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b88:	229c      	movs	r2, #156	; 0x9c
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f007 f905 	bl	800ed9c <memset>
    pcb->prio = prio;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	79fa      	ldrb	r2, [r7, #7]
 8007b96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007bbe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2206      	movs	r2, #6
 8007bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2206      	movs	r2, #6
 8007bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bd4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <tcp_alloc+0xf8>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <tcp_alloc+0xfc>)
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007bf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <tcp_alloc+0x100>)
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4a07      	ldr	r2, [pc, #28]	; (8007c20 <tcp_alloc+0x104>)
 8007c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20008418 	.word	0x20008418
 8007c18:	200000fe 	.word	0x200000fe
 8007c1c:	080078d5 	.word	0x080078d5
 8007c20:	006ddd00 	.word	0x006ddd00

08007c24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <tcp_pcb_purge+0x1e>
 8007c32:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <tcp_pcb_purge+0x94>)
 8007c34:	f640 0251 	movw	r2, #2129	; 0x851
 8007c38:	4920      	ldr	r1, [pc, #128]	; (8007cbc <tcp_pcb_purge+0x98>)
 8007c3a:	4821      	ldr	r0, [pc, #132]	; (8007cc0 <tcp_pcb_purge+0x9c>)
 8007c3c:	f007 f8b6 	bl	800edac <iprintf>
 8007c40:	e037      	b.n	8007cb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7d1b      	ldrb	r3, [r3, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d033      	beq.n	8007cb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007c4e:	2b0a      	cmp	r3, #10
 8007c50:	d02f      	beq.n	8007cb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d02b      	beq.n	8007cb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fb6c 	bl	8006344 <pbuf_free>
      pcb->refused_data = NULL;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f986 	bl	8007f8c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c86:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fdc7 	bl	8007820 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fdc2 	bl	8007820 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	66da      	str	r2, [r3, #108]	; 0x6c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	08010e30 	.word	0x08010e30
 8007cbc:	0801147c 	.word	0x0801147c
 8007cc0:	08010e74 	.word	0x08010e74

08007cc4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <tcp_pcb_remove+0x1e>
 8007cd4:	4b3e      	ldr	r3, [pc, #248]	; (8007dd0 <tcp_pcb_remove+0x10c>)
 8007cd6:	f640 0283 	movw	r2, #2179	; 0x883
 8007cda:	493e      	ldr	r1, [pc, #248]	; (8007dd4 <tcp_pcb_remove+0x110>)
 8007cdc:	483e      	ldr	r0, [pc, #248]	; (8007dd8 <tcp_pcb_remove+0x114>)
 8007cde:	f007 f865 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <tcp_pcb_remove+0x32>
 8007ce8:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <tcp_pcb_remove+0x10c>)
 8007cea:	f640 0284 	movw	r2, #2180	; 0x884
 8007cee:	493b      	ldr	r1, [pc, #236]	; (8007ddc <tcp_pcb_remove+0x118>)
 8007cf0:	4839      	ldr	r0, [pc, #228]	; (8007dd8 <tcp_pcb_remove+0x114>)
 8007cf2:	f007 f85b 	bl	800edac <iprintf>

  TCP_RMV(pcblist, pcb);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d105      	bne.n	8007d0c <tcp_pcb_remove+0x48>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e013      	b.n	8007d34 <tcp_pcb_remove+0x70>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e00c      	b.n	8007d2e <tcp_pcb_remove+0x6a>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d104      	bne.n	8007d28 <tcp_pcb_remove+0x64>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	e005      	b.n	8007d34 <tcp_pcb_remove+0x70>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1ef      	bne.n	8007d14 <tcp_pcb_remove+0x50>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007d3a:	6838      	ldr	r0, [r7, #0]
 8007d3c:	f7ff ff72 	bl	8007c24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	7d1b      	ldrb	r3, [r3, #20]
 8007d44:	2b0a      	cmp	r3, #10
 8007d46:	d013      	beq.n	8007d70 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d00f      	beq.n	8007d70 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	8b5b      	ldrh	r3, [r3, #26]
 8007d54:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	8b5b      	ldrh	r3, [r3, #26]
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d6a:	6838      	ldr	r0, [r7, #0]
 8007d6c:	f002 ff6a 	bl	800ac44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	7d1b      	ldrb	r3, [r3, #20]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d020      	beq.n	8007dba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <tcp_pcb_remove+0xca>
 8007d80:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <tcp_pcb_remove+0x10c>)
 8007d82:	f640 0293 	movw	r2, #2195	; 0x893
 8007d86:	4916      	ldr	r1, [pc, #88]	; (8007de0 <tcp_pcb_remove+0x11c>)
 8007d88:	4813      	ldr	r0, [pc, #76]	; (8007dd8 <tcp_pcb_remove+0x114>)
 8007d8a:	f007 f80f 	bl	800edac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d006      	beq.n	8007da4 <tcp_pcb_remove+0xe0>
 8007d96:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <tcp_pcb_remove+0x10c>)
 8007d98:	f640 0294 	movw	r2, #2196	; 0x894
 8007d9c:	4911      	ldr	r1, [pc, #68]	; (8007de4 <tcp_pcb_remove+0x120>)
 8007d9e:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <tcp_pcb_remove+0x114>)
 8007da0:	f007 f804 	bl	800edac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <tcp_pcb_remove+0xf6>
 8007dac:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <tcp_pcb_remove+0x10c>)
 8007dae:	f640 0296 	movw	r2, #2198	; 0x896
 8007db2:	490d      	ldr	r1, [pc, #52]	; (8007de8 <tcp_pcb_remove+0x124>)
 8007db4:	4808      	ldr	r0, [pc, #32]	; (8007dd8 <tcp_pcb_remove+0x114>)
 8007db6:	f006 fff9 	bl	800edac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08010e30 	.word	0x08010e30
 8007dd4:	08011498 	.word	0x08011498
 8007dd8:	08010e74 	.word	0x08010e74
 8007ddc:	080114b4 	.word	0x080114b4
 8007de0:	080114d4 	.word	0x080114d4
 8007de4:	080114ec 	.word	0x080114ec
 8007de8:	08011508 	.word	0x08011508

08007dec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <tcp_next_iss+0x1c>
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <tcp_next_iss+0x38>)
 8007dfc:	f640 02af 	movw	r2, #2223	; 0x8af
 8007e00:	4909      	ldr	r1, [pc, #36]	; (8007e28 <tcp_next_iss+0x3c>)
 8007e02:	480a      	ldr	r0, [pc, #40]	; (8007e2c <tcp_next_iss+0x40>)
 8007e04:	f006 ffd2 	bl	800edac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <tcp_next_iss+0x44>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <tcp_next_iss+0x48>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4413      	add	r3, r2
 8007e12:	4a07      	ldr	r2, [pc, #28]	; (8007e30 <tcp_next_iss+0x44>)
 8007e14:	6013      	str	r3, [r2, #0]
  return iss;
 8007e16:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <tcp_next_iss+0x44>)
 8007e18:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	08010e30 	.word	0x08010e30
 8007e28:	08011520 	.word	0x08011520
 8007e2c:	08010e74 	.word	0x08010e74
 8007e30:	20000024 	.word	0x20000024
 8007e34:	20008418 	.word	0x20008418

08007e38 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <tcp_eff_send_mss_netif+0x22>
 8007e4c:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <tcp_eff_send_mss_netif+0x68>)
 8007e4e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007e52:	4914      	ldr	r1, [pc, #80]	; (8007ea4 <tcp_eff_send_mss_netif+0x6c>)
 8007e54:	4814      	ldr	r0, [pc, #80]	; (8007ea8 <tcp_eff_send_mss_netif+0x70>)
 8007e56:	f006 ffa9 	bl	800edac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007e60:	89fb      	ldrh	r3, [r7, #14]
 8007e62:	e019      	b.n	8007e98 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e68:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007e6a:	8afb      	ldrh	r3, [r7, #22]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d012      	beq.n	8007e96 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007e70:	2328      	movs	r3, #40	; 0x28
 8007e72:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007e74:	8afa      	ldrh	r2, [r7, #22]
 8007e76:	8abb      	ldrh	r3, [r7, #20]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d904      	bls.n	8007e86 <tcp_eff_send_mss_netif+0x4e>
 8007e7c:	8afa      	ldrh	r2, [r7, #22]
 8007e7e:	8abb      	ldrh	r3, [r7, #20]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	e000      	b.n	8007e88 <tcp_eff_send_mss_netif+0x50>
 8007e86:	2300      	movs	r3, #0
 8007e88:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007e8a:	8a7a      	ldrh	r2, [r7, #18]
 8007e8c:	89fb      	ldrh	r3, [r7, #14]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	bf28      	it	cs
 8007e92:	4613      	movcs	r3, r2
 8007e94:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007e96:	89fb      	ldrh	r3, [r7, #14]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	08010e30 	.word	0x08010e30
 8007ea4:	0801153c 	.word	0x0801153c
 8007ea8:	08010e74 	.word	0x08010e74

08007eac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d119      	bne.n	8007ef4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007ec0:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007ec2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007ec6:	4910      	ldr	r1, [pc, #64]	; (8007f08 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007ec8:	4810      	ldr	r0, [pc, #64]	; (8007f0c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007eca:	f006 ff6f 	bl	800edac <iprintf>

  while (pcb != NULL) {
 8007ece:	e011      	b.n	8007ef4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d108      	bne.n	8007eee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7fe ffc6 	bl	8006e74 <tcp_abort>
      pcb = next;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	e002      	b.n	8007ef4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ea      	bne.n	8007ed0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	08010e30 	.word	0x08010e30
 8007f08:	08011564 	.word	0x08011564
 8007f0c:	08010e74 	.word	0x08010e74

08007f10 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d02a      	beq.n	8007f76 <tcp_netif_ip_addr_changed+0x66>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d026      	beq.n	8007f76 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007f28:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <tcp_netif_ip_addr_changed+0x70>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff ffbc 	bl	8007eac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007f34:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <tcp_netif_ip_addr_changed+0x74>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ffb6 	bl	8007eac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d017      	beq.n	8007f76 <tcp_netif_ip_addr_changed+0x66>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d013      	beq.n	8007f76 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <tcp_netif_ip_addr_changed+0x78>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e00c      	b.n	8007f70 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d103      	bne.n	8007f6a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1ef      	bne.n	8007f56 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20008414 	.word	0x20008414
 8007f84:	20008420 	.word	0x20008420
 8007f88:	2000841c 	.word	0x2000841c

08007f8c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fc3d 	bl	8007820 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b08d      	sub	sp, #52	; 0x34
 8007fb8:	af04      	add	r7, sp, #16
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <tcp_input+0x1c>
 8007fc4:	4b9b      	ldr	r3, [pc, #620]	; (8008234 <tcp_input+0x280>)
 8007fc6:	2283      	movs	r2, #131	; 0x83
 8007fc8:	499b      	ldr	r1, [pc, #620]	; (8008238 <tcp_input+0x284>)
 8007fca:	489c      	ldr	r0, [pc, #624]	; (800823c <tcp_input+0x288>)
 8007fcc:	f006 feee 	bl	800edac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	4a9a      	ldr	r2, [pc, #616]	; (8008240 <tcp_input+0x28c>)
 8007fd6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	895b      	ldrh	r3, [r3, #10]
 8007fdc:	2b13      	cmp	r3, #19
 8007fde:	f240 83c4 	bls.w	800876a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fe2:	4b98      	ldr	r3, [pc, #608]	; (8008244 <tcp_input+0x290>)
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	4a97      	ldr	r2, [pc, #604]	; (8008244 <tcp_input+0x290>)
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f005 ff2b 	bl	800de48 <ip4_addr_isbroadcast_u32>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f040 83ba 	bne.w	800876e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007ffa:	4b92      	ldr	r3, [pc, #584]	; (8008244 <tcp_input+0x290>)
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008002:	2be0      	cmp	r3, #224	; 0xe0
 8008004:	f000 83b3 	beq.w	800876e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008008:	4b8d      	ldr	r3, [pc, #564]	; (8008240 <tcp_input+0x28c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	899b      	ldrh	r3, [r3, #12]
 800800e:	b29b      	uxth	r3, r3
 8008010:	4618      	mov	r0, r3
 8008012:	f7fc fe39 	bl	8004c88 <lwip_htons>
 8008016:	4603      	mov	r3, r0
 8008018:	0b1b      	lsrs	r3, r3, #12
 800801a:	b29b      	uxth	r3, r3
 800801c:	b2db      	uxtb	r3, r3
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008022:	7cbb      	ldrb	r3, [r7, #18]
 8008024:	2b13      	cmp	r3, #19
 8008026:	f240 83a4 	bls.w	8008772 <tcp_input+0x7be>
 800802a:	7cbb      	ldrb	r3, [r7, #18]
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	891b      	ldrh	r3, [r3, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	f200 839d 	bhi.w	8008772 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008038:	7cbb      	ldrb	r3, [r7, #18]
 800803a:	b29b      	uxth	r3, r3
 800803c:	3b14      	subs	r3, #20
 800803e:	b29a      	uxth	r2, r3
 8008040:	4b81      	ldr	r3, [pc, #516]	; (8008248 <tcp_input+0x294>)
 8008042:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008044:	4b81      	ldr	r3, [pc, #516]	; (800824c <tcp_input+0x298>)
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	895a      	ldrh	r2, [r3, #10]
 800804e:	7cbb      	ldrb	r3, [r7, #18]
 8008050:	b29b      	uxth	r3, r3
 8008052:	429a      	cmp	r2, r3
 8008054:	d309      	bcc.n	800806a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008056:	4b7c      	ldr	r3, [pc, #496]	; (8008248 <tcp_input+0x294>)
 8008058:	881a      	ldrh	r2, [r3, #0]
 800805a:	4b7d      	ldr	r3, [pc, #500]	; (8008250 <tcp_input+0x29c>)
 800805c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800805e:	7cbb      	ldrb	r3, [r7, #18]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe f8e8 	bl	8006238 <pbuf_remove_header>
 8008068:	e04e      	b.n	8008108 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <tcp_input+0xca>
 8008072:	4b70      	ldr	r3, [pc, #448]	; (8008234 <tcp_input+0x280>)
 8008074:	22c2      	movs	r2, #194	; 0xc2
 8008076:	4977      	ldr	r1, [pc, #476]	; (8008254 <tcp_input+0x2a0>)
 8008078:	4870      	ldr	r0, [pc, #448]	; (800823c <tcp_input+0x288>)
 800807a:	f006 fe97 	bl	800edac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800807e:	2114      	movs	r1, #20
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fe f8d9 	bl	8006238 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	895a      	ldrh	r2, [r3, #10]
 800808a:	4b71      	ldr	r3, [pc, #452]	; (8008250 <tcp_input+0x29c>)
 800808c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800808e:	4b6e      	ldr	r3, [pc, #440]	; (8008248 <tcp_input+0x294>)
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	4b6f      	ldr	r3, [pc, #444]	; (8008250 <tcp_input+0x29c>)
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800809a:	4b6d      	ldr	r3, [pc, #436]	; (8008250 <tcp_input+0x29c>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fe f8c9 	bl	8006238 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	895b      	ldrh	r3, [r3, #10]
 80080ac:	8a3a      	ldrh	r2, [r7, #16]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	f200 8361 	bhi.w	8008776 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4a64      	ldr	r2, [pc, #400]	; (800824c <tcp_input+0x298>)
 80080bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	8a3a      	ldrh	r2, [r7, #16]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe f8b6 	bl	8006238 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	891a      	ldrh	r2, [r3, #8]
 80080d0:	8a3b      	ldrh	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	895b      	ldrh	r3, [r3, #10]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <tcp_input+0x13a>
 80080e2:	4b54      	ldr	r3, [pc, #336]	; (8008234 <tcp_input+0x280>)
 80080e4:	22df      	movs	r2, #223	; 0xdf
 80080e6:	495c      	ldr	r1, [pc, #368]	; (8008258 <tcp_input+0x2a4>)
 80080e8:	4854      	ldr	r0, [pc, #336]	; (800823c <tcp_input+0x288>)
 80080ea:	f006 fe5f 	bl	800edac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	891a      	ldrh	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	891b      	ldrh	r3, [r3, #8]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d005      	beq.n	8008108 <tcp_input+0x154>
 80080fc:	4b4d      	ldr	r3, [pc, #308]	; (8008234 <tcp_input+0x280>)
 80080fe:	22e0      	movs	r2, #224	; 0xe0
 8008100:	4956      	ldr	r1, [pc, #344]	; (800825c <tcp_input+0x2a8>)
 8008102:	484e      	ldr	r0, [pc, #312]	; (800823c <tcp_input+0x288>)
 8008104:	f006 fe52 	bl	800edac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008108:	4b4d      	ldr	r3, [pc, #308]	; (8008240 <tcp_input+0x28c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	4a4b      	ldr	r2, [pc, #300]	; (8008240 <tcp_input+0x28c>)
 8008112:	6814      	ldr	r4, [r2, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f7fc fdb7 	bl	8004c88 <lwip_htons>
 800811a:	4603      	mov	r3, r0
 800811c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800811e:	4b48      	ldr	r3, [pc, #288]	; (8008240 <tcp_input+0x28c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	885b      	ldrh	r3, [r3, #2]
 8008124:	b29b      	uxth	r3, r3
 8008126:	4a46      	ldr	r2, [pc, #280]	; (8008240 <tcp_input+0x28c>)
 8008128:	6814      	ldr	r4, [r2, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fc fdac 	bl	8004c88 <lwip_htons>
 8008130:	4603      	mov	r3, r0
 8008132:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008134:	4b42      	ldr	r3, [pc, #264]	; (8008240 <tcp_input+0x28c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	4a41      	ldr	r2, [pc, #260]	; (8008240 <tcp_input+0x28c>)
 800813c:	6814      	ldr	r4, [r2, #0]
 800813e:	4618      	mov	r0, r3
 8008140:	f7fc fdb7 	bl	8004cb2 <lwip_htonl>
 8008144:	4603      	mov	r3, r0
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6863      	ldr	r3, [r4, #4]
 800814a:	4a45      	ldr	r2, [pc, #276]	; (8008260 <tcp_input+0x2ac>)
 800814c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800814e:	4b3c      	ldr	r3, [pc, #240]	; (8008240 <tcp_input+0x28c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	4a3a      	ldr	r2, [pc, #232]	; (8008240 <tcp_input+0x28c>)
 8008156:	6814      	ldr	r4, [r2, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f7fc fdaa 	bl	8004cb2 <lwip_htonl>
 800815e:	4603      	mov	r3, r0
 8008160:	60a3      	str	r3, [r4, #8]
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	4a3f      	ldr	r2, [pc, #252]	; (8008264 <tcp_input+0x2b0>)
 8008166:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008168:	4b35      	ldr	r3, [pc, #212]	; (8008240 <tcp_input+0x28c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	89db      	ldrh	r3, [r3, #14]
 800816e:	b29b      	uxth	r3, r3
 8008170:	4a33      	ldr	r2, [pc, #204]	; (8008240 <tcp_input+0x28c>)
 8008172:	6814      	ldr	r4, [r2, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7fc fd87 	bl	8004c88 <lwip_htons>
 800817a:	4603      	mov	r3, r0
 800817c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800817e:	4b30      	ldr	r3, [pc, #192]	; (8008240 <tcp_input+0x28c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	899b      	ldrh	r3, [r3, #12]
 8008184:	b29b      	uxth	r3, r3
 8008186:	4618      	mov	r0, r3
 8008188:	f7fc fd7e 	bl	8004c88 <lwip_htons>
 800818c:	4603      	mov	r3, r0
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008194:	b2da      	uxtb	r2, r3
 8008196:	4b34      	ldr	r3, [pc, #208]	; (8008268 <tcp_input+0x2b4>)
 8008198:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	891a      	ldrh	r2, [r3, #8]
 800819e:	4b33      	ldr	r3, [pc, #204]	; (800826c <tcp_input+0x2b8>)
 80081a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80081a2:	4b31      	ldr	r3, [pc, #196]	; (8008268 <tcp_input+0x2b4>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <tcp_input+0x214>
    tcplen++;
 80081ae:	4b2f      	ldr	r3, [pc, #188]	; (800826c <tcp_input+0x2b8>)
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	4b2d      	ldr	r3, [pc, #180]	; (800826c <tcp_input+0x2b8>)
 80081b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	891a      	ldrh	r2, [r3, #8]
 80081be:	4b2b      	ldr	r3, [pc, #172]	; (800826c <tcp_input+0x2b8>)
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	f200 82d9 	bhi.w	800877a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081cc:	4b28      	ldr	r3, [pc, #160]	; (8008270 <tcp_input+0x2bc>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e09d      	b.n	8008310 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	7d1b      	ldrb	r3, [r3, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <tcp_input+0x234>
 80081dc:	4b15      	ldr	r3, [pc, #84]	; (8008234 <tcp_input+0x280>)
 80081de:	22fb      	movs	r2, #251	; 0xfb
 80081e0:	4924      	ldr	r1, [pc, #144]	; (8008274 <tcp_input+0x2c0>)
 80081e2:	4816      	ldr	r0, [pc, #88]	; (800823c <tcp_input+0x288>)
 80081e4:	f006 fde2 	bl	800edac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	7d1b      	ldrb	r3, [r3, #20]
 80081ec:	2b0a      	cmp	r3, #10
 80081ee:	d105      	bne.n	80081fc <tcp_input+0x248>
 80081f0:	4b10      	ldr	r3, [pc, #64]	; (8008234 <tcp_input+0x280>)
 80081f2:	22fc      	movs	r2, #252	; 0xfc
 80081f4:	4920      	ldr	r1, [pc, #128]	; (8008278 <tcp_input+0x2c4>)
 80081f6:	4811      	ldr	r0, [pc, #68]	; (800823c <tcp_input+0x288>)
 80081f8:	f006 fdd8 	bl	800edac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d105      	bne.n	8008210 <tcp_input+0x25c>
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <tcp_input+0x280>)
 8008206:	22fd      	movs	r2, #253	; 0xfd
 8008208:	491c      	ldr	r1, [pc, #112]	; (800827c <tcp_input+0x2c8>)
 800820a:	480c      	ldr	r0, [pc, #48]	; (800823c <tcp_input+0x288>)
 800820c:	f006 fdce 	bl	800edac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	7a1b      	ldrb	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d033      	beq.n	8008280 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	7a1a      	ldrb	r2, [r3, #8]
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <tcp_input+0x290>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008224:	3301      	adds	r3, #1
 8008226:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008228:	429a      	cmp	r2, r3
 800822a:	d029      	beq.n	8008280 <tcp_input+0x2cc>
      prev = pcb;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	61bb      	str	r3, [r7, #24]
      continue;
 8008230:	e06b      	b.n	800830a <tcp_input+0x356>
 8008232:	bf00      	nop
 8008234:	08011598 	.word	0x08011598
 8008238:	080115cc 	.word	0x080115cc
 800823c:	080115e4 	.word	0x080115e4
 8008240:	20000110 	.word	0x20000110
 8008244:	20004ed0 	.word	0x20004ed0
 8008248:	20000114 	.word	0x20000114
 800824c:	20000118 	.word	0x20000118
 8008250:	20000116 	.word	0x20000116
 8008254:	0801160c 	.word	0x0801160c
 8008258:	0801161c 	.word	0x0801161c
 800825c:	08011628 	.word	0x08011628
 8008260:	20000120 	.word	0x20000120
 8008264:	20000124 	.word	0x20000124
 8008268:	2000012c 	.word	0x2000012c
 800826c:	2000012a 	.word	0x2000012a
 8008270:	20008414 	.word	0x20008414
 8008274:	08011648 	.word	0x08011648
 8008278:	08011670 	.word	0x08011670
 800827c:	0801169c 	.word	0x0801169c
    }

    if (pcb->remote_port == tcphdr->src &&
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	8b1a      	ldrh	r2, [r3, #24]
 8008284:	4b94      	ldr	r3, [pc, #592]	; (80084d8 <tcp_input+0x524>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	429a      	cmp	r2, r3
 800828e:	d13a      	bne.n	8008306 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	8ada      	ldrh	r2, [r3, #22]
 8008294:	4b90      	ldr	r3, [pc, #576]	; (80084d8 <tcp_input+0x524>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800829c:	429a      	cmp	r2, r3
 800829e:	d132      	bne.n	8008306 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	4b8d      	ldr	r3, [pc, #564]	; (80084dc <tcp_input+0x528>)
 80082a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d12c      	bne.n	8008306 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4b8a      	ldr	r3, [pc, #552]	; (80084dc <tcp_input+0x528>)
 80082b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d126      	bne.n	8008306 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d106      	bne.n	80082d0 <tcp_input+0x31c>
 80082c2:	4b87      	ldr	r3, [pc, #540]	; (80084e0 <tcp_input+0x52c>)
 80082c4:	f240 120d 	movw	r2, #269	; 0x10d
 80082c8:	4986      	ldr	r1, [pc, #536]	; (80084e4 <tcp_input+0x530>)
 80082ca:	4887      	ldr	r0, [pc, #540]	; (80084e8 <tcp_input+0x534>)
 80082cc:	f006 fd6e 	bl	800edac <iprintf>
      if (prev != NULL) {
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <tcp_input+0x338>
        prev->next = pcb->next;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80082de:	4b83      	ldr	r3, [pc, #524]	; (80084ec <tcp_input+0x538>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80082e6:	4a81      	ldr	r2, [pc, #516]	; (80084ec <tcp_input+0x538>)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d111      	bne.n	800831a <tcp_input+0x366>
 80082f6:	4b7a      	ldr	r3, [pc, #488]	; (80084e0 <tcp_input+0x52c>)
 80082f8:	f240 1215 	movw	r2, #277	; 0x115
 80082fc:	497c      	ldr	r1, [pc, #496]	; (80084f0 <tcp_input+0x53c>)
 80082fe:	487a      	ldr	r0, [pc, #488]	; (80084e8 <tcp_input+0x534>)
 8008300:	f006 fd54 	bl	800edac <iprintf>
      break;
 8008304:	e009      	b.n	800831a <tcp_input+0x366>
    }
    prev = pcb;
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f47f af5e 	bne.w	80081d4 <tcp_input+0x220>
 8008318:	e000      	b.n	800831c <tcp_input+0x368>
      break;
 800831a:	bf00      	nop
  }

  if (pcb == NULL) {
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 8095 	bne.w	800844e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008324:	4b73      	ldr	r3, [pc, #460]	; (80084f4 <tcp_input+0x540>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	e03f      	b.n	80083ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	2b0a      	cmp	r3, #10
 8008332:	d006      	beq.n	8008342 <tcp_input+0x38e>
 8008334:	4b6a      	ldr	r3, [pc, #424]	; (80084e0 <tcp_input+0x52c>)
 8008336:	f240 121f 	movw	r2, #287	; 0x11f
 800833a:	496f      	ldr	r1, [pc, #444]	; (80084f8 <tcp_input+0x544>)
 800833c:	486a      	ldr	r0, [pc, #424]	; (80084e8 <tcp_input+0x534>)
 800833e:	f006 fd35 	bl	800edac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	7a1b      	ldrb	r3, [r3, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d009      	beq.n	800835e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	7a1a      	ldrb	r2, [r3, #8]
 800834e:	4b63      	ldr	r3, [pc, #396]	; (80084dc <tcp_input+0x528>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008356:	3301      	adds	r3, #1
 8008358:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800835a:	429a      	cmp	r2, r3
 800835c:	d122      	bne.n	80083a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	8b1a      	ldrh	r2, [r3, #24]
 8008362:	4b5d      	ldr	r3, [pc, #372]	; (80084d8 <tcp_input+0x524>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	429a      	cmp	r2, r3
 800836c:	d11b      	bne.n	80083a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	8ada      	ldrh	r2, [r3, #22]
 8008372:	4b59      	ldr	r3, [pc, #356]	; (80084d8 <tcp_input+0x524>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800837a:	429a      	cmp	r2, r3
 800837c:	d113      	bne.n	80083a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	4b56      	ldr	r3, [pc, #344]	; (80084dc <tcp_input+0x528>)
 8008384:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008386:	429a      	cmp	r2, r3
 8008388:	d10d      	bne.n	80083a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	4b53      	ldr	r3, [pc, #332]	; (80084dc <tcp_input+0x528>)
 8008390:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008392:	429a      	cmp	r2, r3
 8008394:	d107      	bne.n	80083a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008396:	69f8      	ldr	r0, [r7, #28]
 8008398:	f000 fb54 	bl	8008a44 <tcp_timewait_input>
        }
        pbuf_free(p);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7fd ffd1 	bl	8006344 <pbuf_free>
        return;
 80083a2:	e1f0      	b.n	8008786 <tcp_input+0x7d2>
        continue;
 80083a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1bc      	bne.n	800832c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083b6:	4b51      	ldr	r3, [pc, #324]	; (80084fc <tcp_input+0x548>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	e02a      	b.n	8008414 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	7a1b      	ldrb	r3, [r3, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00c      	beq.n	80083e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	7a1a      	ldrb	r2, [r3, #8]
 80083ca:	4b44      	ldr	r3, [pc, #272]	; (80084dc <tcp_input+0x528>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083d2:	3301      	adds	r3, #1
 80083d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d002      	beq.n	80083e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	61bb      	str	r3, [r7, #24]
        continue;
 80083de:	e016      	b.n	800840e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	8ada      	ldrh	r2, [r3, #22]
 80083e4:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <tcp_input+0x524>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	885b      	ldrh	r3, [r3, #2]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d10c      	bne.n	800840a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	4b39      	ldr	r3, [pc, #228]	; (80084dc <tcp_input+0x528>)
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d00f      	beq.n	800841c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <tcp_input+0x46a>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d009      	beq.n	800841e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1d1      	bne.n	80083be <tcp_input+0x40a>
 800841a:	e000      	b.n	800841e <tcp_input+0x46a>
            break;
 800841c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d014      	beq.n	800844e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008432:	4b32      	ldr	r3, [pc, #200]	; (80084fc <tcp_input+0x548>)
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800843a:	4a30      	ldr	r2, [pc, #192]	; (80084fc <tcp_input+0x548>)
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008440:	6978      	ldr	r0, [r7, #20]
 8008442:	f000 fa01 	bl	8008848 <tcp_listen_input>
      }
      pbuf_free(p);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fd ff7c 	bl	8006344 <pbuf_free>
      return;
 800844c:	e19b      	b.n	8008786 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8160 	beq.w	8008716 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008456:	4b2a      	ldr	r3, [pc, #168]	; (8008500 <tcp_input+0x54c>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	891a      	ldrh	r2, [r3, #8]
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <tcp_input+0x54c>)
 8008462:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008464:	4a26      	ldr	r2, [pc, #152]	; (8008500 <tcp_input+0x54c>)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <tcp_input+0x524>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a24      	ldr	r2, [pc, #144]	; (8008500 <tcp_input+0x54c>)
 8008470:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008472:	4b24      	ldr	r3, [pc, #144]	; (8008504 <tcp_input+0x550>)
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008478:	4b23      	ldr	r3, [pc, #140]	; (8008508 <tcp_input+0x554>)
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800847e:	4b23      	ldr	r3, [pc, #140]	; (800850c <tcp_input+0x558>)
 8008480:	2200      	movs	r2, #0
 8008482:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008484:	4b22      	ldr	r3, [pc, #136]	; (8008510 <tcp_input+0x55c>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d006      	beq.n	800849e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	7b5b      	ldrb	r3, [r3, #13]
 8008494:	f043 0301 	orr.w	r3, r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d038      	beq.n	8008518 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084a6:	69f8      	ldr	r0, [r7, #28]
 80084a8:	f7ff f93e 	bl	8007728 <tcp_process_refused_data>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f113 0f0d 	cmn.w	r3, #13
 80084b2:	d007      	beq.n	80084c4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d02d      	beq.n	8008518 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80084bc:	4b15      	ldr	r3, [pc, #84]	; (8008514 <tcp_input+0x560>)
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d029      	beq.n	8008518 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f040 8104 	bne.w	80086d6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80084ce:	69f8      	ldr	r0, [r7, #28]
 80084d0:	f003 f9be 	bl	800b850 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80084d4:	e0ff      	b.n	80086d6 <tcp_input+0x722>
 80084d6:	bf00      	nop
 80084d8:	20000110 	.word	0x20000110
 80084dc:	20004ed0 	.word	0x20004ed0
 80084e0:	08011598 	.word	0x08011598
 80084e4:	080116c4 	.word	0x080116c4
 80084e8:	080115e4 	.word	0x080115e4
 80084ec:	20008414 	.word	0x20008414
 80084f0:	080116f0 	.word	0x080116f0
 80084f4:	20008424 	.word	0x20008424
 80084f8:	0801171c 	.word	0x0801171c
 80084fc:	2000841c 	.word	0x2000841c
 8008500:	20000100 	.word	0x20000100
 8008504:	20000130 	.word	0x20000130
 8008508:	2000012d 	.word	0x2000012d
 800850c:	20000128 	.word	0x20000128
 8008510:	2000012c 	.word	0x2000012c
 8008514:	2000012a 	.word	0x2000012a
      }
    }
    tcp_input_pcb = pcb;
 8008518:	4a9c      	ldr	r2, [pc, #624]	; (800878c <tcp_input+0x7d8>)
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800851e:	69f8      	ldr	r0, [r7, #28]
 8008520:	f000 fb0a 	bl	8008b38 <tcp_process>
 8008524:	4603      	mov	r3, r0
 8008526:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800852c:	f113 0f0d 	cmn.w	r3, #13
 8008530:	f000 80d3 	beq.w	80086da <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008534:	4b96      	ldr	r3, [pc, #600]	; (8008790 <tcp_input+0x7dc>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d015      	beq.n	800856c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008546:	2b00      	cmp	r3, #0
 8008548:	d008      	beq.n	800855c <tcp_input+0x5a8>
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	6912      	ldr	r2, [r2, #16]
 8008554:	f06f 010d 	mvn.w	r1, #13
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800855c:	69f9      	ldr	r1, [r7, #28]
 800855e:	488d      	ldr	r0, [pc, #564]	; (8008794 <tcp_input+0x7e0>)
 8008560:	f7ff fbb0 	bl	8007cc4 <tcp_pcb_remove>
        tcp_free(pcb);
 8008564:	69f8      	ldr	r0, [r7, #28]
 8008566:	f7fe f99d 	bl	80068a4 <tcp_free>
 800856a:	e0c1      	b.n	80086f0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008570:	4b89      	ldr	r3, [pc, #548]	; (8008798 <tcp_input+0x7e4>)
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01d      	beq.n	80085b4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008578:	4b87      	ldr	r3, [pc, #540]	; (8008798 <tcp_input+0x7e4>)
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <tcp_input+0x5ea>
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	6910      	ldr	r0, [r2, #16]
 8008592:	89fa      	ldrh	r2, [r7, #14]
 8008594:	69f9      	ldr	r1, [r7, #28]
 8008596:	4798      	blx	r3
 8008598:	4603      	mov	r3, r0
 800859a:	74fb      	strb	r3, [r7, #19]
 800859c:	e001      	b.n	80085a2 <tcp_input+0x5ee>
 800859e:	2300      	movs	r3, #0
 80085a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80085a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085a6:	f113 0f0d 	cmn.w	r3, #13
 80085aa:	f000 8098 	beq.w	80086de <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80085ae:	4b7a      	ldr	r3, [pc, #488]	; (8008798 <tcp_input+0x7e4>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80085b4:	69f8      	ldr	r0, [r7, #28]
 80085b6:	f000 f907 	bl	80087c8 <tcp_input_delayed_close>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8090 	bne.w	80086e2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80085c2:	4b76      	ldr	r3, [pc, #472]	; (800879c <tcp_input+0x7e8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d041      	beq.n	800864e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d006      	beq.n	80085e0 <tcp_input+0x62c>
 80085d2:	4b73      	ldr	r3, [pc, #460]	; (80087a0 <tcp_input+0x7ec>)
 80085d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80085d8:	4972      	ldr	r1, [pc, #456]	; (80087a4 <tcp_input+0x7f0>)
 80085da:	4873      	ldr	r0, [pc, #460]	; (80087a8 <tcp_input+0x7f4>)
 80085dc:	f006 fbe6 	bl	800edac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	8b5b      	ldrh	r3, [r3, #26]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80085ec:	4b6b      	ldr	r3, [pc, #428]	; (800879c <tcp_input+0x7e8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd fea7 	bl	8006344 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80085f6:	69f8      	ldr	r0, [r7, #28]
 80085f8:	f7fe fc3c 	bl	8006e74 <tcp_abort>
            goto aborted;
 80085fc:	e078      	b.n	80086f0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <tcp_input+0x66e>
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	6918      	ldr	r0, [r3, #16]
 8008612:	4b62      	ldr	r3, [pc, #392]	; (800879c <tcp_input+0x7e8>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	69f9      	ldr	r1, [r7, #28]
 800861a:	47a0      	blx	r4
 800861c:	4603      	mov	r3, r0
 800861e:	74fb      	strb	r3, [r7, #19]
 8008620:	e008      	b.n	8008634 <tcp_input+0x680>
 8008622:	4b5e      	ldr	r3, [pc, #376]	; (800879c <tcp_input+0x7e8>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	2300      	movs	r3, #0
 8008628:	69f9      	ldr	r1, [r7, #28]
 800862a:	2000      	movs	r0, #0
 800862c:	f7ff f952 	bl	80078d4 <tcp_recv_null>
 8008630:	4603      	mov	r3, r0
 8008632:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008634:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008638:	f113 0f0d 	cmn.w	r3, #13
 800863c:	d053      	beq.n	80086e6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800863e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008646:	4b55      	ldr	r3, [pc, #340]	; (800879c <tcp_input+0x7e8>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800864e:	4b50      	ldr	r3, [pc, #320]	; (8008790 <tcp_input+0x7dc>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d030      	beq.n	80086bc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008666:	7b5a      	ldrb	r2, [r3, #13]
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800866c:	f042 0220 	orr.w	r2, r2, #32
 8008670:	b2d2      	uxtb	r2, r2
 8008672:	735a      	strb	r2, [r3, #13]
 8008674:	e022      	b.n	80086bc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800867e:	d005      	beq.n	800868c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008684:	3301      	adds	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <tcp_input+0x6fa>
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	6918      	ldr	r0, [r3, #16]
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	47a0      	blx	r4
 80086a8:	4603      	mov	r3, r0
 80086aa:	74fb      	strb	r3, [r7, #19]
 80086ac:	e001      	b.n	80086b2 <tcp_input+0x6fe>
 80086ae:	2300      	movs	r3, #0
 80086b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80086b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086b6:	f113 0f0d 	cmn.w	r3, #13
 80086ba:	d016      	beq.n	80086ea <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80086bc:	4b33      	ldr	r3, [pc, #204]	; (800878c <tcp_input+0x7d8>)
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80086c2:	69f8      	ldr	r0, [r7, #28]
 80086c4:	f000 f880 	bl	80087c8 <tcp_input_delayed_close>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10f      	bne.n	80086ee <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80086ce:	69f8      	ldr	r0, [r7, #28]
 80086d0:	f002 fab8 	bl	800ac44 <tcp_output>
 80086d4:	e00c      	b.n	80086f0 <tcp_input+0x73c>
        goto aborted;
 80086d6:	bf00      	nop
 80086d8:	e00a      	b.n	80086f0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80086da:	bf00      	nop
 80086dc:	e008      	b.n	80086f0 <tcp_input+0x73c>
              goto aborted;
 80086de:	bf00      	nop
 80086e0:	e006      	b.n	80086f0 <tcp_input+0x73c>
          goto aborted;
 80086e2:	bf00      	nop
 80086e4:	e004      	b.n	80086f0 <tcp_input+0x73c>
            goto aborted;
 80086e6:	bf00      	nop
 80086e8:	e002      	b.n	80086f0 <tcp_input+0x73c>
              goto aborted;
 80086ea:	bf00      	nop
 80086ec:	e000      	b.n	80086f0 <tcp_input+0x73c>
          goto aborted;
 80086ee:	bf00      	nop
    tcp_input_pcb = NULL;
 80086f0:	4b26      	ldr	r3, [pc, #152]	; (800878c <tcp_input+0x7d8>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80086f6:	4b29      	ldr	r3, [pc, #164]	; (800879c <tcp_input+0x7e8>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80086fc:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <tcp_input+0x7f8>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d03f      	beq.n	8008784 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8008704:	4b29      	ldr	r3, [pc, #164]	; (80087ac <tcp_input+0x7f8>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fd fe1b 	bl	8006344 <pbuf_free>
      inseg.p = NULL;
 800870e:	4b27      	ldr	r3, [pc, #156]	; (80087ac <tcp_input+0x7f8>)
 8008710:	2200      	movs	r2, #0
 8008712:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008714:	e036      	b.n	8008784 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008716:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <tcp_input+0x7fc>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	899b      	ldrh	r3, [r3, #12]
 800871c:	b29b      	uxth	r3, r3
 800871e:	4618      	mov	r0, r3
 8008720:	f7fc fab2 	bl	8004c88 <lwip_htons>
 8008724:	4603      	mov	r3, r0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d118      	bne.n	8008762 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008730:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <tcp_input+0x800>)
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <tcp_input+0x804>)
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	4b20      	ldr	r3, [pc, #128]	; (80087bc <tcp_input+0x808>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008740:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <tcp_input+0x7fc>)
 8008742:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008748:	4a19      	ldr	r2, [pc, #100]	; (80087b0 <tcp_input+0x7fc>)
 800874a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800874c:	8812      	ldrh	r2, [r2, #0]
 800874e:	b292      	uxth	r2, r2
 8008750:	9202      	str	r2, [sp, #8]
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <tcp_input+0x80c>)
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <tcp_input+0x810>)
 800875a:	4602      	mov	r2, r0
 800875c:	2000      	movs	r0, #0
 800875e:	f003 f825 	bl	800b7ac <tcp_rst>
    pbuf_free(p);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7fd fdee 	bl	8006344 <pbuf_free>
  return;
 8008768:	e00c      	b.n	8008784 <tcp_input+0x7d0>
    goto dropped;
 800876a:	bf00      	nop
 800876c:	e006      	b.n	800877c <tcp_input+0x7c8>
    goto dropped;
 800876e:	bf00      	nop
 8008770:	e004      	b.n	800877c <tcp_input+0x7c8>
    goto dropped;
 8008772:	bf00      	nop
 8008774:	e002      	b.n	800877c <tcp_input+0x7c8>
      goto dropped;
 8008776:	bf00      	nop
 8008778:	e000      	b.n	800877c <tcp_input+0x7c8>
      goto dropped;
 800877a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fd fde1 	bl	8006344 <pbuf_free>
 8008782:	e000      	b.n	8008786 <tcp_input+0x7d2>
  return;
 8008784:	bf00      	nop
}
 8008786:	3724      	adds	r7, #36	; 0x24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}
 800878c:	20008428 	.word	0x20008428
 8008790:	2000012d 	.word	0x2000012d
 8008794:	20008414 	.word	0x20008414
 8008798:	20000128 	.word	0x20000128
 800879c:	20000130 	.word	0x20000130
 80087a0:	08011598 	.word	0x08011598
 80087a4:	0801174c 	.word	0x0801174c
 80087a8:	080115e4 	.word	0x080115e4
 80087ac:	20000100 	.word	0x20000100
 80087b0:	20000110 	.word	0x20000110
 80087b4:	20000124 	.word	0x20000124
 80087b8:	2000012a 	.word	0x2000012a
 80087bc:	20000120 	.word	0x20000120
 80087c0:	20004ee0 	.word	0x20004ee0
 80087c4:	20004ee4 	.word	0x20004ee4

080087c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d106      	bne.n	80087e4 <tcp_input_delayed_close+0x1c>
 80087d6:	4b17      	ldr	r3, [pc, #92]	; (8008834 <tcp_input_delayed_close+0x6c>)
 80087d8:	f240 225a 	movw	r2, #602	; 0x25a
 80087dc:	4916      	ldr	r1, [pc, #88]	; (8008838 <tcp_input_delayed_close+0x70>)
 80087de:	4817      	ldr	r0, [pc, #92]	; (800883c <tcp_input_delayed_close+0x74>)
 80087e0:	f006 fae4 	bl	800edac <iprintf>

  if (recv_flags & TF_CLOSED) {
 80087e4:	4b16      	ldr	r3, [pc, #88]	; (8008840 <tcp_input_delayed_close+0x78>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01c      	beq.n	800882a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	8b5b      	ldrh	r3, [r3, #26]
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10d      	bne.n	8008818 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <tcp_input_delayed_close+0x50>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6912      	ldr	r2, [r2, #16]
 8008810:	f06f 010e 	mvn.w	r1, #14
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	480a      	ldr	r0, [pc, #40]	; (8008844 <tcp_input_delayed_close+0x7c>)
 800881c:	f7ff fa52 	bl	8007cc4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe f83f 	bl	80068a4 <tcp_free>
    return 1;
 8008826:	2301      	movs	r3, #1
 8008828:	e000      	b.n	800882c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	08011598 	.word	0x08011598
 8008838:	08011768 	.word	0x08011768
 800883c:	080115e4 	.word	0x080115e4
 8008840:	2000012d 	.word	0x2000012d
 8008844:	20008414 	.word	0x20008414

08008848 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008848:	b590      	push	{r4, r7, lr}
 800884a:	b08b      	sub	sp, #44	; 0x2c
 800884c:	af04      	add	r7, sp, #16
 800884e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008850:	4b6f      	ldr	r3, [pc, #444]	; (8008a10 <tcp_listen_input+0x1c8>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 80d2 	bne.w	8008a02 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <tcp_listen_input+0x2a>
 8008864:	4b6b      	ldr	r3, [pc, #428]	; (8008a14 <tcp_listen_input+0x1cc>)
 8008866:	f240 2281 	movw	r2, #641	; 0x281
 800886a:	496b      	ldr	r1, [pc, #428]	; (8008a18 <tcp_listen_input+0x1d0>)
 800886c:	486b      	ldr	r0, [pc, #428]	; (8008a1c <tcp_listen_input+0x1d4>)
 800886e:	f006 fa9d 	bl	800edac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008872:	4b67      	ldr	r3, [pc, #412]	; (8008a10 <tcp_listen_input+0x1c8>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b00      	cmp	r3, #0
 800887c:	d019      	beq.n	80088b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800887e:	4b68      	ldr	r3, [pc, #416]	; (8008a20 <tcp_listen_input+0x1d8>)
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	4b68      	ldr	r3, [pc, #416]	; (8008a24 <tcp_listen_input+0x1dc>)
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	4b67      	ldr	r3, [pc, #412]	; (8008a28 <tcp_listen_input+0x1e0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800888e:	4b67      	ldr	r3, [pc, #412]	; (8008a2c <tcp_listen_input+0x1e4>)
 8008890:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008892:	885b      	ldrh	r3, [r3, #2]
 8008894:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008896:	4a65      	ldr	r2, [pc, #404]	; (8008a2c <tcp_listen_input+0x1e4>)
 8008898:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800889a:	8812      	ldrh	r2, [r2, #0]
 800889c:	b292      	uxth	r2, r2
 800889e:	9202      	str	r2, [sp, #8]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	4b63      	ldr	r3, [pc, #396]	; (8008a30 <tcp_listen_input+0x1e8>)
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	4b63      	ldr	r3, [pc, #396]	; (8008a34 <tcp_listen_input+0x1ec>)
 80088a8:	4602      	mov	r2, r0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f002 ff7e 	bl	800b7ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80088b0:	e0a9      	b.n	8008a06 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80088b2:	4b57      	ldr	r3, [pc, #348]	; (8008a10 <tcp_listen_input+0x1c8>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80a3 	beq.w	8008a06 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	7d5b      	ldrb	r3, [r3, #21]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff f929 	bl	8007b1c <tcp_alloc>
 80088ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d111      	bne.n	80088f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <tcp_listen_input+0xa8>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6910      	ldr	r0, [r2, #16]
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	2100      	movs	r1, #0
 80088e8:	4798      	blx	r3
 80088ea:	4603      	mov	r3, r0
 80088ec:	73bb      	strb	r3, [r7, #14]
      return;
 80088ee:	e08b      	b.n	8008a08 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80088f0:	23f0      	movs	r3, #240	; 0xf0
 80088f2:	73bb      	strb	r3, [r7, #14]
      return;
 80088f4:	e088      	b.n	8008a08 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80088f6:	4b50      	ldr	r3, [pc, #320]	; (8008a38 <tcp_listen_input+0x1f0>)
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80088fe:	4b4e      	ldr	r3, [pc, #312]	; (8008a38 <tcp_listen_input+0x1f0>)
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	8ada      	ldrh	r2, [r3, #22]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800890e:	4b47      	ldr	r3, [pc, #284]	; (8008a2c <tcp_listen_input+0x1e4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29a      	uxth	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2203      	movs	r2, #3
 800891e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008920:	4b41      	ldr	r3, [pc, #260]	; (8008a28 <tcp_listen_input+0x1e0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f7ff fa5a 	bl	8007dec <tcp_next_iss>
 8008938:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008952:	4b35      	ldr	r3, [pc, #212]	; (8008a28 <tcp_listen_input+0x1e0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	1e5a      	subs	r2, r3, #1
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7a5b      	ldrb	r3, [r3, #9]
 800896e:	f003 030c 	and.w	r3, r3, #12
 8008972:	b2da      	uxtb	r2, r3
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7a1a      	ldrb	r2, [r3, #8]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008980:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <tcp_listen_input+0x1f4>)
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	60da      	str	r2, [r3, #12]
 8008988:	4a2c      	ldr	r2, [pc, #176]	; (8008a3c <tcp_listen_input+0x1f4>)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	f003 f8cf 	bl	800bb30 <tcp_timer_needed>
 8008992:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <tcp_listen_input+0x1f8>)
 8008994:	2201      	movs	r2, #1
 8008996:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008998:	6978      	ldr	r0, [r7, #20]
 800899a:	f001 fd8d 	bl	800a4b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800899e:	4b23      	ldr	r3, [pc, #140]	; (8008a2c <tcp_listen_input+0x1e4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	89db      	ldrh	r3, [r3, #14]
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	3304      	adds	r3, #4
 80089c0:	4618      	mov	r0, r3
 80089c2:	f004 ffab 	bl	800d91c <ip4_route>
 80089c6:	4601      	mov	r1, r0
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	3304      	adds	r3, #4
 80089cc:	461a      	mov	r2, r3
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff fa32 	bl	8007e38 <tcp_eff_send_mss_netif>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80089dc:	2112      	movs	r1, #18
 80089de:	6978      	ldr	r0, [r7, #20]
 80089e0:	f002 f842 	bl	800aa68 <tcp_enqueue_flags>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80089e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80089f0:	2100      	movs	r1, #0
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f7fe f980 	bl	8006cf8 <tcp_abandon>
      return;
 80089f8:	e006      	b.n	8008a08 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80089fa:	6978      	ldr	r0, [r7, #20]
 80089fc:	f002 f922 	bl	800ac44 <tcp_output>
  return;
 8008a00:	e001      	b.n	8008a06 <tcp_listen_input+0x1be>
    return;
 8008a02:	bf00      	nop
 8008a04:	e000      	b.n	8008a08 <tcp_listen_input+0x1c0>
  return;
 8008a06:	bf00      	nop
}
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	2000012c 	.word	0x2000012c
 8008a14:	08011598 	.word	0x08011598
 8008a18:	08011790 	.word	0x08011790
 8008a1c:	080115e4 	.word	0x080115e4
 8008a20:	20000124 	.word	0x20000124
 8008a24:	2000012a 	.word	0x2000012a
 8008a28:	20000120 	.word	0x20000120
 8008a2c:	20000110 	.word	0x20000110
 8008a30:	20004ee0 	.word	0x20004ee0
 8008a34:	20004ee4 	.word	0x20004ee4
 8008a38:	20004ed0 	.word	0x20004ed0
 8008a3c:	20008414 	.word	0x20008414
 8008a40:	20008410 	.word	0x20008410

08008a44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af04      	add	r7, sp, #16
 8008a4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008a4c:	4b2f      	ldr	r3, [pc, #188]	; (8008b0c <tcp_timewait_input+0xc8>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d153      	bne.n	8008b00 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <tcp_timewait_input+0x28>
 8008a5e:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <tcp_timewait_input+0xcc>)
 8008a60:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008a64:	492b      	ldr	r1, [pc, #172]	; (8008b14 <tcp_timewait_input+0xd0>)
 8008a66:	482c      	ldr	r0, [pc, #176]	; (8008b18 <tcp_timewait_input+0xd4>)
 8008a68:	f006 f9a0 	bl	800edac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008a6c:	4b27      	ldr	r3, [pc, #156]	; (8008b0c <tcp_timewait_input+0xc8>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d02a      	beq.n	8008ace <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008a78:	4b28      	ldr	r3, [pc, #160]	; (8008b1c <tcp_timewait_input+0xd8>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	db2d      	blt.n	8008ae2 <tcp_timewait_input+0x9e>
 8008a86:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <tcp_timewait_input+0xd8>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a92:	440b      	add	r3, r1
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dc23      	bgt.n	8008ae2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a9a:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <tcp_timewait_input+0xdc>)
 8008a9c:	6819      	ldr	r1, [r3, #0]
 8008a9e:	4b21      	ldr	r3, [pc, #132]	; (8008b24 <tcp_timewait_input+0xe0>)
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <tcp_timewait_input+0xd8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008aaa:	4b1f      	ldr	r3, [pc, #124]	; (8008b28 <tcp_timewait_input+0xe4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aae:	885b      	ldrh	r3, [r3, #2]
 8008ab0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ab2:	4a1d      	ldr	r2, [pc, #116]	; (8008b28 <tcp_timewait_input+0xe4>)
 8008ab4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ab6:	8812      	ldrh	r2, [r2, #0]
 8008ab8:	b292      	uxth	r2, r2
 8008aba:	9202      	str	r2, [sp, #8]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <tcp_timewait_input+0xe8>)
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <tcp_timewait_input+0xec>)
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f002 fe70 	bl	800b7ac <tcp_rst>
      return;
 8008acc:	e01b      	b.n	8008b06 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008ace:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <tcp_timewait_input+0xc8>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008ada:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <tcp_timewait_input+0xf0>)
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008ae2:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <tcp_timewait_input+0xe0>)
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00c      	beq.n	8008b04 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	8b5b      	ldrh	r3, [r3, #26]
 8008aee:	f043 0302 	orr.w	r3, r3, #2
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f002 f8a3 	bl	800ac44 <tcp_output>
  }
  return;
 8008afe:	e001      	b.n	8008b04 <tcp_timewait_input+0xc0>
    return;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <tcp_timewait_input+0xc2>
  return;
 8008b04:	bf00      	nop
}
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	2000012c 	.word	0x2000012c
 8008b10:	08011598 	.word	0x08011598
 8008b14:	080117b0 	.word	0x080117b0
 8008b18:	080115e4 	.word	0x080115e4
 8008b1c:	20000120 	.word	0x20000120
 8008b20:	20000124 	.word	0x20000124
 8008b24:	2000012a 	.word	0x2000012a
 8008b28:	20000110 	.word	0x20000110
 8008b2c:	20004ee0 	.word	0x20004ee0
 8008b30:	20004ee4 	.word	0x20004ee4
 8008b34:	20008418 	.word	0x20008418

08008b38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b08d      	sub	sp, #52	; 0x34
 8008b3c:	af04      	add	r7, sp, #16
 8008b3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <tcp_process+0x24>
 8008b4e:	4ba5      	ldr	r3, [pc, #660]	; (8008de4 <tcp_process+0x2ac>)
 8008b50:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008b54:	49a4      	ldr	r1, [pc, #656]	; (8008de8 <tcp_process+0x2b0>)
 8008b56:	48a5      	ldr	r0, [pc, #660]	; (8008dec <tcp_process+0x2b4>)
 8008b58:	f006 f928 	bl	800edac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008b5c:	4ba4      	ldr	r3, [pc, #656]	; (8008df0 <tcp_process+0x2b8>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d04e      	beq.n	8008c06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	7d1b      	ldrb	r3, [r3, #20]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d108      	bne.n	8008b82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b74:	4b9f      	ldr	r3, [pc, #636]	; (8008df4 <tcp_process+0x2bc>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d123      	bne.n	8008bc4 <tcp_process+0x8c>
        acceptable = 1;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	76fb      	strb	r3, [r7, #27]
 8008b80:	e020      	b.n	8008bc4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b86:	4b9c      	ldr	r3, [pc, #624]	; (8008df8 <tcp_process+0x2c0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d102      	bne.n	8008b94 <tcp_process+0x5c>
        acceptable = 1;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	76fb      	strb	r3, [r7, #27]
 8008b92:	e017      	b.n	8008bc4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008b94:	4b98      	ldr	r3, [pc, #608]	; (8008df8 <tcp_process+0x2c0>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	db10      	blt.n	8008bc4 <tcp_process+0x8c>
 8008ba2:	4b95      	ldr	r3, [pc, #596]	; (8008df8 <tcp_process+0x2c0>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008bae:	440b      	add	r3, r1
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dc06      	bgt.n	8008bc4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	8b5b      	ldrh	r3, [r3, #26]
 8008bba:	f043 0302 	orr.w	r3, r3, #2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008bc4:	7efb      	ldrb	r3, [r7, #27]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01b      	beq.n	8008c02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7d1b      	ldrb	r3, [r3, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <tcp_process+0xa8>
 8008bd2:	4b84      	ldr	r3, [pc, #528]	; (8008de4 <tcp_process+0x2ac>)
 8008bd4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008bd8:	4988      	ldr	r1, [pc, #544]	; (8008dfc <tcp_process+0x2c4>)
 8008bda:	4884      	ldr	r0, [pc, #528]	; (8008dec <tcp_process+0x2b4>)
 8008bdc:	f006 f8e6 	bl	800edac <iprintf>
      recv_flags |= TF_RESET;
 8008be0:	4b87      	ldr	r3, [pc, #540]	; (8008e00 <tcp_process+0x2c8>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f043 0308 	orr.w	r3, r3, #8
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	4b85      	ldr	r3, [pc, #532]	; (8008e00 <tcp_process+0x2c8>)
 8008bec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	8b5b      	ldrh	r3, [r3, #26]
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008bfc:	f06f 030d 	mvn.w	r3, #13
 8008c00:	e37a      	b.n	80092f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e378      	b.n	80092f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008c06:	4b7a      	ldr	r3, [pc, #488]	; (8008df0 <tcp_process+0x2b8>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d010      	beq.n	8008c34 <tcp_process+0xfc>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	7d1b      	ldrb	r3, [r3, #20]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d00c      	beq.n	8008c34 <tcp_process+0xfc>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7d1b      	ldrb	r3, [r3, #20]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d008      	beq.n	8008c34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8b5b      	ldrh	r3, [r3, #26]
 8008c26:	f043 0302 	orr.w	r3, r3, #2
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	e361      	b.n	80092f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8b5b      	ldrh	r3, [r3, #26]
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008c40:	4b70      	ldr	r3, [pc, #448]	; (8008e04 <tcp_process+0x2cc>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 fc2d 	bl	800a4b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	7d1b      	ldrb	r3, [r3, #20]
 8008c62:	3b02      	subs	r3, #2
 8008c64:	2b07      	cmp	r3, #7
 8008c66:	f200 8337 	bhi.w	80092d8 <tcp_process+0x7a0>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <tcp_process+0x138>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008ec1 	.word	0x08008ec1
 8008c78:	08009039 	.word	0x08009039
 8008c7c:	08009063 	.word	0x08009063
 8008c80:	08009187 	.word	0x08009187
 8008c84:	08009039 	.word	0x08009039
 8008c88:	08009213 	.word	0x08009213
 8008c8c:	080092a3 	.word	0x080092a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008c90:	4b57      	ldr	r3, [pc, #348]	; (8008df0 <tcp_process+0x2b8>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 80e4 	beq.w	8008e66 <tcp_process+0x32e>
 8008c9e:	4b54      	ldr	r3, [pc, #336]	; (8008df0 <tcp_process+0x2b8>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80dd 	beq.w	8008e66 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	4b50      	ldr	r3, [pc, #320]	; (8008df4 <tcp_process+0x2bc>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	f040 80d5 	bne.w	8008e66 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008cbc:	4b4e      	ldr	r3, [pc, #312]	; (8008df8 <tcp_process+0x2c0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008cce:	4b49      	ldr	r3, [pc, #292]	; (8008df4 <tcp_process+0x2bc>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008cd6:	4b4c      	ldr	r3, [pc, #304]	; (8008e08 <tcp_process+0x2d0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	89db      	ldrh	r3, [r3, #14]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008cf0:	4b41      	ldr	r3, [pc, #260]	; (8008df8 <tcp_process+0x2c0>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	1e5a      	subs	r2, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f004 fe07 	bl	800d91c <ip4_route>
 8008d0e:	4601      	mov	r1, r0
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	461a      	mov	r2, r3
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7ff f88e 	bl	8007e38 <tcp_eff_send_mss_netif>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d28:	009a      	lsls	r2, r3, #2
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	f241 111c 	movw	r1, #4380	; 0x111c
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf38      	it	cc
 8008d38:	460b      	movcc	r3, r1
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d204      	bcs.n	8008d48 <tcp_process+0x210>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	e00d      	b.n	8008d64 <tcp_process+0x22c>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d904      	bls.n	8008d60 <tcp_process+0x228>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	e001      	b.n	8008d64 <tcp_process+0x22c>
 8008d60:	f241 131c 	movw	r3, #4380	; 0x111c
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <tcp_process+0x24a>
 8008d74:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <tcp_process+0x2ac>)
 8008d76:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008d7a:	4924      	ldr	r1, [pc, #144]	; (8008e0c <tcp_process+0x2d4>)
 8008d7c:	481b      	ldr	r0, [pc, #108]	; (8008dec <tcp_process+0x2b4>)
 8008d7e:	f006 f815 	bl	800edac <iprintf>
        --pcb->snd_queuelen;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d111      	bne.n	8008dc2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <tcp_process+0x280>
 8008daa:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <tcp_process+0x2ac>)
 8008dac:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008db0:	4917      	ldr	r1, [pc, #92]	; (8008e10 <tcp_process+0x2d8>)
 8008db2:	480e      	ldr	r0, [pc, #56]	; (8008dec <tcp_process+0x2b4>)
 8008db4:	f005 fffa 	bl	800edac <iprintf>
          pcb->unsent = rseg->next;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	66da      	str	r2, [r3, #108]	; 0x6c
 8008dc0:	e003      	b.n	8008dca <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008dca:	69f8      	ldr	r0, [r7, #28]
 8008dcc:	f7fe fd3d 	bl	800784a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11d      	bne.n	8008e14 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dde:	861a      	strh	r2, [r3, #48]	; 0x30
 8008de0:	e01f      	b.n	8008e22 <tcp_process+0x2ea>
 8008de2:	bf00      	nop
 8008de4:	08011598 	.word	0x08011598
 8008de8:	080117d0 	.word	0x080117d0
 8008dec:	080115e4 	.word	0x080115e4
 8008df0:	2000012c 	.word	0x2000012c
 8008df4:	20000124 	.word	0x20000124
 8008df8:	20000120 	.word	0x20000120
 8008dfc:	080117ec 	.word	0x080117ec
 8008e00:	2000012d 	.word	0x2000012d
 8008e04:	20008418 	.word	0x20008418
 8008e08:	20000110 	.word	0x20000110
 8008e0c:	0801180c 	.word	0x0801180c
 8008e10:	08011824 	.word	0x08011824
        } else {
          pcb->rtime = 0;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <tcp_process+0x30a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6910      	ldr	r0, [r2, #16]
 8008e36:	2200      	movs	r2, #0
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4798      	blx	r3
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	76bb      	strb	r3, [r7, #26]
 8008e40:	e001      	b.n	8008e46 <tcp_process+0x30e>
 8008e42:	2300      	movs	r3, #0
 8008e44:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008e46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e4a:	f113 0f0d 	cmn.w	r3, #13
 8008e4e:	d102      	bne.n	8008e56 <tcp_process+0x31e>
          return ERR_ABRT;
 8008e50:	f06f 030c 	mvn.w	r3, #12
 8008e54:	e250      	b.n	80092f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	8b5b      	ldrh	r3, [r3, #26]
 8008e5a:	f043 0302 	orr.w	r3, r3, #2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008e64:	e23a      	b.n	80092dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008e66:	4b9d      	ldr	r3, [pc, #628]	; (80090dc <tcp_process+0x5a4>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 8234 	beq.w	80092dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e74:	4b9a      	ldr	r3, [pc, #616]	; (80090e0 <tcp_process+0x5a8>)
 8008e76:	6819      	ldr	r1, [r3, #0]
 8008e78:	4b9a      	ldr	r3, [pc, #616]	; (80090e4 <tcp_process+0x5ac>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b9a      	ldr	r3, [pc, #616]	; (80090e8 <tcp_process+0x5b0>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e84:	4b99      	ldr	r3, [pc, #612]	; (80090ec <tcp_process+0x5b4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e88:	885b      	ldrh	r3, [r3, #2]
 8008e8a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e8c:	4a97      	ldr	r2, [pc, #604]	; (80090ec <tcp_process+0x5b4>)
 8008e8e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e90:	8812      	ldrh	r2, [r2, #0]
 8008e92:	b292      	uxth	r2, r2
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	4b95      	ldr	r3, [pc, #596]	; (80090f0 <tcp_process+0x5b8>)
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4b95      	ldr	r3, [pc, #596]	; (80090f4 <tcp_process+0x5bc>)
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f002 fc83 	bl	800b7ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eac:	2b05      	cmp	r3, #5
 8008eae:	f200 8215 	bhi.w	80092dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f002 fa4d 	bl	800b358 <tcp_rexmit_rto>
      break;
 8008ebe:	e20d      	b.n	80092dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008ec0:	4b86      	ldr	r3, [pc, #536]	; (80090dc <tcp_process+0x5a4>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80a1 	beq.w	8009010 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ece:	4b84      	ldr	r3, [pc, #528]	; (80090e0 <tcp_process+0x5a8>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	db7e      	blt.n	8008fdc <tcp_process+0x4a4>
 8008ede:	4b80      	ldr	r3, [pc, #512]	; (80090e0 <tcp_process+0x5a8>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	dc77      	bgt.n	8008fdc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2204      	movs	r2, #4
 8008ef0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008efa:	23fa      	movs	r3, #250	; 0xfa
 8008efc:	76bb      	strb	r3, [r7, #26]
 8008efe:	e01d      	b.n	8008f3c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <tcp_process+0x3e0>
 8008f0a:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <tcp_process+0x5c0>)
 8008f0c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008f10:	497a      	ldr	r1, [pc, #488]	; (80090fc <tcp_process+0x5c4>)
 8008f12:	487b      	ldr	r0, [pc, #492]	; (8009100 <tcp_process+0x5c8>)
 8008f14:	f005 ff4a 	bl	800edac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <tcp_process+0x400>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	6910      	ldr	r0, [r2, #16]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	76bb      	strb	r3, [r7, #26]
 8008f36:	e001      	b.n	8008f3c <tcp_process+0x404>
 8008f38:	23f0      	movs	r3, #240	; 0xf0
 8008f3a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008f3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008f44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008f48:	f113 0f0d 	cmn.w	r3, #13
 8008f4c:	d002      	beq.n	8008f54 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fd ff90 	bl	8006e74 <tcp_abort>
            }
            return ERR_ABRT;
 8008f54:	f06f 030c 	mvn.w	r3, #12
 8008f58:	e1ce      	b.n	80092f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fae0 	bl	8009520 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008f60:	4b68      	ldr	r3, [pc, #416]	; (8009104 <tcp_process+0x5cc>)
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <tcp_process+0x43c>
            recv_acked--;
 8008f68:	4b66      	ldr	r3, [pc, #408]	; (8009104 <tcp_process+0x5cc>)
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	4b64      	ldr	r3, [pc, #400]	; (8009104 <tcp_process+0x5cc>)
 8008f72:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f78:	009a      	lsls	r2, r3, #2
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	f241 111c 	movw	r1, #4380	; 0x111c
 8008f84:	428b      	cmp	r3, r1
 8008f86:	bf38      	it	cc
 8008f88:	460b      	movcc	r3, r1
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d204      	bcs.n	8008f98 <tcp_process+0x460>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	e00d      	b.n	8008fb4 <tcp_process+0x47c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d904      	bls.n	8008fb0 <tcp_process+0x478>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	e001      	b.n	8008fb4 <tcp_process+0x47c>
 8008fb0:	f241 131c 	movw	r3, #4380	; 0x111c
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008fba:	4b53      	ldr	r3, [pc, #332]	; (8009108 <tcp_process+0x5d0>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d037      	beq.n	8009036 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8b5b      	ldrh	r3, [r3, #26]
 8008fca:	f043 0302 	orr.w	r3, r3, #2
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2207      	movs	r2, #7
 8008fd8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008fda:	e02c      	b.n	8009036 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fdc:	4b40      	ldr	r3, [pc, #256]	; (80090e0 <tcp_process+0x5a8>)
 8008fde:	6819      	ldr	r1, [r3, #0]
 8008fe0:	4b40      	ldr	r3, [pc, #256]	; (80090e4 <tcp_process+0x5ac>)
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4b40      	ldr	r3, [pc, #256]	; (80090e8 <tcp_process+0x5b0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fec:	4b3f      	ldr	r3, [pc, #252]	; (80090ec <tcp_process+0x5b4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ff0:	885b      	ldrh	r3, [r3, #2]
 8008ff2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ff4:	4a3d      	ldr	r2, [pc, #244]	; (80090ec <tcp_process+0x5b4>)
 8008ff6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ff8:	8812      	ldrh	r2, [r2, #0]
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	9202      	str	r2, [sp, #8]
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	4b3b      	ldr	r3, [pc, #236]	; (80090f0 <tcp_process+0x5b8>)
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4b3b      	ldr	r3, [pc, #236]	; (80090f4 <tcp_process+0x5bc>)
 8009006:	4602      	mov	r2, r0
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f002 fbcf 	bl	800b7ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800900e:	e167      	b.n	80092e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009010:	4b32      	ldr	r3, [pc, #200]	; (80090dc <tcp_process+0x5a4>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8161 	beq.w	80092e0 <tcp_process+0x7a8>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	1e5a      	subs	r2, r3, #1
 8009024:	4b30      	ldr	r3, [pc, #192]	; (80090e8 <tcp_process+0x5b0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	f040 8159 	bne.w	80092e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f002 f9b4 	bl	800b39c <tcp_rexmit>
      break;
 8009034:	e154      	b.n	80092e0 <tcp_process+0x7a8>
 8009036:	e153      	b.n	80092e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa71 	bl	8009520 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800903e:	4b32      	ldr	r3, [pc, #200]	; (8009108 <tcp_process+0x5d0>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 814c 	beq.w	80092e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	8b5b      	ldrh	r3, [r3, #26]
 8009050:	f043 0302 	orr.w	r3, r3, #2
 8009054:	b29a      	uxth	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2207      	movs	r2, #7
 800905e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009060:	e140      	b.n	80092e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa5c 	bl	8009520 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009068:	4b27      	ldr	r3, [pc, #156]	; (8009108 <tcp_process+0x5d0>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b00      	cmp	r3, #0
 8009072:	d071      	beq.n	8009158 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009074:	4b19      	ldr	r3, [pc, #100]	; (80090dc <tcp_process+0x5a4>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	d060      	beq.n	8009142 <tcp_process+0x60a>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009084:	4b16      	ldr	r3, [pc, #88]	; (80090e0 <tcp_process+0x5a8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d15a      	bne.n	8009142 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009090:	2b00      	cmp	r3, #0
 8009092:	d156      	bne.n	8009142 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8b5b      	ldrh	r3, [r3, #26]
 8009098:	f043 0302 	orr.w	r3, r3, #2
 800909c:	b29a      	uxth	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7fe fdbe 	bl	8007c24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80090a8:	4b18      	ldr	r3, [pc, #96]	; (800910c <tcp_process+0x5d4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d105      	bne.n	80090be <tcp_process+0x586>
 80090b2:	4b16      	ldr	r3, [pc, #88]	; (800910c <tcp_process+0x5d4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4a14      	ldr	r2, [pc, #80]	; (800910c <tcp_process+0x5d4>)
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	e02e      	b.n	800911c <tcp_process+0x5e4>
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <tcp_process+0x5d4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e027      	b.n	8009116 <tcp_process+0x5de>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d11f      	bne.n	8009110 <tcp_process+0x5d8>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	60da      	str	r2, [r3, #12]
 80090d8:	e020      	b.n	800911c <tcp_process+0x5e4>
 80090da:	bf00      	nop
 80090dc:	2000012c 	.word	0x2000012c
 80090e0:	20000124 	.word	0x20000124
 80090e4:	2000012a 	.word	0x2000012a
 80090e8:	20000120 	.word	0x20000120
 80090ec:	20000110 	.word	0x20000110
 80090f0:	20004ee0 	.word	0x20004ee0
 80090f4:	20004ee4 	.word	0x20004ee4
 80090f8:	08011598 	.word	0x08011598
 80090fc:	08011838 	.word	0x08011838
 8009100:	080115e4 	.word	0x080115e4
 8009104:	20000128 	.word	0x20000128
 8009108:	2000012d 	.word	0x2000012d
 800910c:	20008414 	.word	0x20008414
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1d4      	bne.n	80090c6 <tcp_process+0x58e>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	60da      	str	r2, [r3, #12]
 8009122:	4b77      	ldr	r3, [pc, #476]	; (8009300 <tcp_process+0x7c8>)
 8009124:	2201      	movs	r2, #1
 8009126:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	220a      	movs	r2, #10
 800912c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800912e:	4b75      	ldr	r3, [pc, #468]	; (8009304 <tcp_process+0x7cc>)
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	4a73      	ldr	r2, [pc, #460]	; (8009304 <tcp_process+0x7cc>)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	f002 fcf8 	bl	800bb30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009140:	e0d2      	b.n	80092e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	8b5b      	ldrh	r3, [r3, #26]
 8009146:	f043 0302 	orr.w	r3, r3, #2
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2208      	movs	r2, #8
 8009154:	751a      	strb	r2, [r3, #20]
      break;
 8009156:	e0c7      	b.n	80092e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009158:	4b6b      	ldr	r3, [pc, #428]	; (8009308 <tcp_process+0x7d0>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 0310 	and.w	r3, r3, #16
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 80c1 	beq.w	80092e8 <tcp_process+0x7b0>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800916a:	4b68      	ldr	r3, [pc, #416]	; (800930c <tcp_process+0x7d4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	f040 80ba 	bne.w	80092e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009178:	2b00      	cmp	r3, #0
 800917a:	f040 80b5 	bne.w	80092e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2206      	movs	r2, #6
 8009182:	751a      	strb	r2, [r3, #20]
      break;
 8009184:	e0b0      	b.n	80092e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f9ca 	bl	8009520 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800918c:	4b60      	ldr	r3, [pc, #384]	; (8009310 <tcp_process+0x7d8>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80a9 	beq.w	80092ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	8b5b      	ldrh	r3, [r3, #26]
 800919e:	f043 0302 	orr.w	r3, r3, #2
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7fe fd3b 	bl	8007c24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80091ae:	4b59      	ldr	r3, [pc, #356]	; (8009314 <tcp_process+0x7dc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d105      	bne.n	80091c4 <tcp_process+0x68c>
 80091b8:	4b56      	ldr	r3, [pc, #344]	; (8009314 <tcp_process+0x7dc>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	4a55      	ldr	r2, [pc, #340]	; (8009314 <tcp_process+0x7dc>)
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e013      	b.n	80091ec <tcp_process+0x6b4>
 80091c4:	4b53      	ldr	r3, [pc, #332]	; (8009314 <tcp_process+0x7dc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	e00c      	b.n	80091e6 <tcp_process+0x6ae>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d104      	bne.n	80091e0 <tcp_process+0x6a8>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	e005      	b.n	80091ec <tcp_process+0x6b4>
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1ef      	bne.n	80091cc <tcp_process+0x694>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	60da      	str	r2, [r3, #12]
 80091f2:	4b43      	ldr	r3, [pc, #268]	; (8009300 <tcp_process+0x7c8>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	220a      	movs	r2, #10
 80091fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80091fe:	4b41      	ldr	r3, [pc, #260]	; (8009304 <tcp_process+0x7cc>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60da      	str	r2, [r3, #12]
 8009206:	4a3f      	ldr	r2, [pc, #252]	; (8009304 <tcp_process+0x7cc>)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	f002 fc90 	bl	800bb30 <tcp_timer_needed>
      }
      break;
 8009210:	e06c      	b.n	80092ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f984 	bl	8009520 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009218:	4b3b      	ldr	r3, [pc, #236]	; (8009308 <tcp_process+0x7d0>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	d065      	beq.n	80092f0 <tcp_process+0x7b8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009228:	4b38      	ldr	r3, [pc, #224]	; (800930c <tcp_process+0x7d4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d15f      	bne.n	80092f0 <tcp_process+0x7b8>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d15b      	bne.n	80092f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe fcf3 	bl	8007c24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800923e:	4b35      	ldr	r3, [pc, #212]	; (8009314 <tcp_process+0x7dc>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d105      	bne.n	8009254 <tcp_process+0x71c>
 8009248:	4b32      	ldr	r3, [pc, #200]	; (8009314 <tcp_process+0x7dc>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	4a31      	ldr	r2, [pc, #196]	; (8009314 <tcp_process+0x7dc>)
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	e013      	b.n	800927c <tcp_process+0x744>
 8009254:	4b2f      	ldr	r3, [pc, #188]	; (8009314 <tcp_process+0x7dc>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	e00c      	b.n	8009276 <tcp_process+0x73e>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	429a      	cmp	r2, r3
 8009264:	d104      	bne.n	8009270 <tcp_process+0x738>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	60da      	str	r2, [r3, #12]
 800926e:	e005      	b.n	800927c <tcp_process+0x744>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1ef      	bne.n	800925c <tcp_process+0x724>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	60da      	str	r2, [r3, #12]
 8009282:	4b1f      	ldr	r3, [pc, #124]	; (8009300 <tcp_process+0x7c8>)
 8009284:	2201      	movs	r2, #1
 8009286:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	220a      	movs	r2, #10
 800928c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800928e:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <tcp_process+0x7cc>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	4a1b      	ldr	r2, [pc, #108]	; (8009304 <tcp_process+0x7cc>)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	f002 fc48 	bl	800bb30 <tcp_timer_needed>
      }
      break;
 80092a0:	e026      	b.n	80092f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f93c 	bl	8009520 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80092a8:	4b17      	ldr	r3, [pc, #92]	; (8009308 <tcp_process+0x7d0>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01f      	beq.n	80092f4 <tcp_process+0x7bc>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092b8:	4b14      	ldr	r3, [pc, #80]	; (800930c <tcp_process+0x7d4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d119      	bne.n	80092f4 <tcp_process+0x7bc>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d115      	bne.n	80092f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80092c8:	4b11      	ldr	r3, [pc, #68]	; (8009310 <tcp_process+0x7d8>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f043 0310 	orr.w	r3, r3, #16
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <tcp_process+0x7d8>)
 80092d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80092d6:	e00d      	b.n	80092f4 <tcp_process+0x7bc>
    default:
      break;
 80092d8:	bf00      	nop
 80092da:	e00c      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092dc:	bf00      	nop
 80092de:	e00a      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092e0:	bf00      	nop
 80092e2:	e008      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092e4:	bf00      	nop
 80092e6:	e006      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092e8:	bf00      	nop
 80092ea:	e004      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <tcp_process+0x7be>
      break;
 80092f4:	bf00      	nop
  }
  return ERR_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3724      	adds	r7, #36	; 0x24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd90      	pop	{r4, r7, pc}
 8009300:	20008410 	.word	0x20008410
 8009304:	20008424 	.word	0x20008424
 8009308:	2000012c 	.word	0x2000012c
 800930c:	20000124 	.word	0x20000124
 8009310:	2000012d 	.word	0x2000012d
 8009314:	20008414 	.word	0x20008414

08009318 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009318:	b590      	push	{r4, r7, lr}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d106      	bne.n	8009336 <tcp_oos_insert_segment+0x1e>
 8009328:	4b3b      	ldr	r3, [pc, #236]	; (8009418 <tcp_oos_insert_segment+0x100>)
 800932a:	f240 421f 	movw	r2, #1055	; 0x41f
 800932e:	493b      	ldr	r1, [pc, #236]	; (800941c <tcp_oos_insert_segment+0x104>)
 8009330:	483b      	ldr	r0, [pc, #236]	; (8009420 <tcp_oos_insert_segment+0x108>)
 8009332:	f005 fd3b 	bl	800edac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	899b      	ldrh	r3, [r3, #12]
 800933c:	b29b      	uxth	r3, r3
 800933e:	4618      	mov	r0, r3
 8009340:	f7fb fca2 	bl	8004c88 <lwip_htons>
 8009344:	4603      	mov	r3, r0
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d028      	beq.n	80093a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009350:	6838      	ldr	r0, [r7, #0]
 8009352:	f7fe fa65 	bl	8007820 <tcp_segs_free>
    next = NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	603b      	str	r3, [r7, #0]
 800935a:	e056      	b.n	800940a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	899b      	ldrh	r3, [r3, #12]
 8009362:	b29b      	uxth	r3, r3
 8009364:	4618      	mov	r0, r3
 8009366:	f7fb fc8f 	bl	8004c88 <lwip_htons>
 800936a:	4603      	mov	r3, r0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	899b      	ldrh	r3, [r3, #12]
 800937c:	b29c      	uxth	r4, r3
 800937e:	2001      	movs	r0, #1
 8009380:	f7fb fc82 	bl	8004c88 <lwip_htons>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	4322      	orrs	r2, r4
 800938e:	b292      	uxth	r2, r2
 8009390:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7fe fa54 	bl	800784a <tcp_seg_free>
    while (next &&
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00e      	beq.n	80093c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	891b      	ldrh	r3, [r3, #8]
 80093ac:	461a      	mov	r2, r3
 80093ae:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <tcp_oos_insert_segment+0x10c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	441a      	add	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	8909      	ldrh	r1, [r1, #8]
 80093be:	440b      	add	r3, r1
 80093c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	daca      	bge.n	800935c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01e      	beq.n	800940a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	891b      	ldrh	r3, [r3, #8]
 80093d0:	461a      	mov	r2, r3
 80093d2:	4b14      	ldr	r3, [pc, #80]	; (8009424 <tcp_oos_insert_segment+0x10c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	441a      	add	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dd12      	ble.n	800940a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <tcp_oos_insert_segment+0x10c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	891b      	ldrh	r3, [r3, #8]
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f7fc fe17 	bl	8006038 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	601a      	str	r2, [r3, #0]
}
 8009410:	bf00      	nop
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	bd90      	pop	{r4, r7, pc}
 8009418:	08011598 	.word	0x08011598
 800941c:	08011858 	.word	0x08011858
 8009420:	080115e4 	.word	0x080115e4
 8009424:	20000120 	.word	0x20000120

08009428 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009428:	b5b0      	push	{r4, r5, r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009436:	e03e      	b.n	80094b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd f804 	bl	8006454 <pbuf_clen>
 800944c:	4603      	mov	r3, r0
 800944e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009456:	8a7a      	ldrh	r2, [r7, #18]
 8009458:	429a      	cmp	r2, r3
 800945a:	d906      	bls.n	800946a <tcp_free_acked_segments+0x42>
 800945c:	4b2a      	ldr	r3, [pc, #168]	; (8009508 <tcp_free_acked_segments+0xe0>)
 800945e:	f240 4257 	movw	r2, #1111	; 0x457
 8009462:	492a      	ldr	r1, [pc, #168]	; (800950c <tcp_free_acked_segments+0xe4>)
 8009464:	482a      	ldr	r0, [pc, #168]	; (8009510 <tcp_free_acked_segments+0xe8>)
 8009466:	f005 fca1 	bl	800edac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009470:	8a7b      	ldrh	r3, [r7, #18]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	891a      	ldrh	r2, [r3, #8]
 8009480:	4b24      	ldr	r3, [pc, #144]	; (8009514 <tcp_free_acked_segments+0xec>)
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	4413      	add	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	4b22      	ldr	r3, [pc, #136]	; (8009514 <tcp_free_acked_segments+0xec>)
 800948a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800948c:	6978      	ldr	r0, [r7, #20]
 800948e:	f7fe f9dc 	bl	800784a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d109      	bne.n	80094b6 <tcp_free_acked_segments+0x8e>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <tcp_free_acked_segments+0x8e>
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <tcp_free_acked_segments+0xe0>)
 80094aa:	f240 4261 	movw	r2, #1121	; 0x461
 80094ae:	491a      	ldr	r1, [pc, #104]	; (8009518 <tcp_free_acked_segments+0xf0>)
 80094b0:	4817      	ldr	r0, [pc, #92]	; (8009510 <tcp_free_acked_segments+0xe8>)
 80094b2:	f005 fc7b 	bl	800edac <iprintf>
  while (seg_list != NULL &&
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d020      	beq.n	80094fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fb fbf5 	bl	8004cb2 <lwip_htonl>
 80094c8:	4604      	mov	r4, r0
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	891b      	ldrh	r3, [r3, #8]
 80094ce:	461d      	mov	r5, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	899b      	ldrh	r3, [r3, #12]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fb fbd5 	bl	8004c88 <lwip_htons>
 80094de:	4603      	mov	r3, r0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <tcp_free_acked_segments+0xc6>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e000      	b.n	80094f0 <tcp_free_acked_segments+0xc8>
 80094ee:	2300      	movs	r3, #0
 80094f0:	442b      	add	r3, r5
 80094f2:	18e2      	adds	r2, r4, r3
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <tcp_free_acked_segments+0xf4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd9c      	ble.n	8009438 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80094fe:	68bb      	ldr	r3, [r7, #8]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bdb0      	pop	{r4, r5, r7, pc}
 8009508:	08011598 	.word	0x08011598
 800950c:	08011880 	.word	0x08011880
 8009510:	080115e4 	.word	0x080115e4
 8009514:	20000128 	.word	0x20000128
 8009518:	080118a8 	.word	0x080118a8
 800951c:	20000124 	.word	0x20000124

08009520 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b094      	sub	sp, #80	; 0x50
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <tcp_receive+0x20>
 8009532:	4ba6      	ldr	r3, [pc, #664]	; (80097cc <tcp_receive+0x2ac>)
 8009534:	f240 427b 	movw	r2, #1147	; 0x47b
 8009538:	49a5      	ldr	r1, [pc, #660]	; (80097d0 <tcp_receive+0x2b0>)
 800953a:	48a6      	ldr	r0, [pc, #664]	; (80097d4 <tcp_receive+0x2b4>)
 800953c:	f005 fc36 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	7d1b      	ldrb	r3, [r3, #20]
 8009544:	2b03      	cmp	r3, #3
 8009546:	d806      	bhi.n	8009556 <tcp_receive+0x36>
 8009548:	4ba0      	ldr	r3, [pc, #640]	; (80097cc <tcp_receive+0x2ac>)
 800954a:	f240 427c 	movw	r2, #1148	; 0x47c
 800954e:	49a2      	ldr	r1, [pc, #648]	; (80097d8 <tcp_receive+0x2b8>)
 8009550:	48a0      	ldr	r0, [pc, #640]	; (80097d4 <tcp_receive+0x2b4>)
 8009552:	f005 fc2b 	bl	800edac <iprintf>

  if (flags & TCP_ACK) {
 8009556:	4ba1      	ldr	r3, [pc, #644]	; (80097dc <tcp_receive+0x2bc>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 0310 	and.w	r3, r3, #16
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 8263 	beq.w	8009a2a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800956a:	461a      	mov	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009570:	4413      	add	r3, r2
 8009572:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009578:	4b99      	ldr	r3, [pc, #612]	; (80097e0 <tcp_receive+0x2c0>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	db1b      	blt.n	80095ba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009586:	4b96      	ldr	r3, [pc, #600]	; (80097e0 <tcp_receive+0x2c0>)
 8009588:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800958a:	429a      	cmp	r2, r3
 800958c:	d106      	bne.n	800959c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009592:	4b94      	ldr	r3, [pc, #592]	; (80097e4 <tcp_receive+0x2c4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	db0e      	blt.n	80095ba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095a0:	4b90      	ldr	r3, [pc, #576]	; (80097e4 <tcp_receive+0x2c4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d125      	bne.n	80095f4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80095a8:	4b8f      	ldr	r3, [pc, #572]	; (80097e8 <tcp_receive+0x2c8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	89db      	ldrh	r3, [r3, #14]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d91c      	bls.n	80095f4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80095ba:	4b8b      	ldr	r3, [pc, #556]	; (80097e8 <tcp_receive+0x2c8>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	89db      	ldrh	r3, [r3, #14]
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d205      	bcs.n	80095e4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80095e4:	4b7e      	ldr	r3, [pc, #504]	; (80097e0 <tcp_receive+0x2c0>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80095ec:	4b7d      	ldr	r3, [pc, #500]	; (80097e4 <tcp_receive+0x2c4>)
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80095f4:	4b7b      	ldr	r3, [pc, #492]	; (80097e4 <tcp_receive+0x2c4>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dc58      	bgt.n	80096b4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009602:	4b7a      	ldr	r3, [pc, #488]	; (80097ec <tcp_receive+0x2cc>)
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d14b      	bne.n	80096a2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009614:	4413      	add	r3, r2
 8009616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009618:	429a      	cmp	r2, r3
 800961a:	d142      	bne.n	80096a2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009622:	2b00      	cmp	r3, #0
 8009624:	db3d      	blt.n	80096a2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800962a:	4b6e      	ldr	r3, [pc, #440]	; (80097e4 <tcp_receive+0x2c4>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	429a      	cmp	r2, r3
 8009630:	d137      	bne.n	80096a2 <tcp_receive+0x182>
              found_dupack = 1;
 8009632:	2301      	movs	r3, #1
 8009634:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800963c:	2bff      	cmp	r3, #255	; 0xff
 800963e:	d007      	beq.n	8009650 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009646:	3301      	adds	r3, #1
 8009648:	b2da      	uxtb	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009656:	2b03      	cmp	r3, #3
 8009658:	d91b      	bls.n	8009692 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009664:	4413      	add	r3, r2
 8009666:	b29a      	uxth	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800966e:	429a      	cmp	r2, r3
 8009670:	d30a      	bcc.n	8009688 <tcp_receive+0x168>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800967c:	4413      	add	r3, r2
 800967e:	b29a      	uxth	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009686:	e004      	b.n	8009692 <tcp_receive+0x172>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800968e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009698:	2b02      	cmp	r3, #2
 800969a:	d902      	bls.n	80096a2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 fee9 	bl	800b474 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80096a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f040 8160 	bne.w	800996a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096b2:	e15a      	b.n	800996a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80096b4:	4b4b      	ldr	r3, [pc, #300]	; (80097e4 <tcp_receive+0x2c4>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f2c0 814d 	blt.w	8009960 <tcp_receive+0x440>
 80096c6:	4b47      	ldr	r3, [pc, #284]	; (80097e4 <tcp_receive+0x2c4>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f300 8145 	bgt.w	8009960 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	8b5b      	ldrh	r3, [r3, #26]
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d010      	beq.n	8009704 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	8b5b      	ldrh	r3, [r3, #26]
 80096e6:	f023 0304 	bic.w	r3, r3, #4
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009712:	10db      	asrs	r3, r3, #3
 8009714:	b21b      	sxth	r3, r3
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800971e:	b29b      	uxth	r3, r3
 8009720:	4413      	add	r3, r2
 8009722:	b29b      	uxth	r3, r3
 8009724:	b21a      	sxth	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800972c:	4b2d      	ldr	r3, [pc, #180]	; (80097e4 <tcp_receive+0x2c4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	b29b      	uxth	r3, r3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009744:	4b27      	ldr	r3, [pc, #156]	; (80097e4 <tcp_receive+0x2c4>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7d1b      	ldrb	r3, [r3, #20]
 8009750:	2b03      	cmp	r3, #3
 8009752:	f240 8096 	bls.w	8009882 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009762:	429a      	cmp	r2, r3
 8009764:	d244      	bcs.n	80097f0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	8b5b      	ldrh	r3, [r3, #26]
 800976a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <tcp_receive+0x256>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <tcp_receive+0x258>
 8009776:	2302      	movs	r3, #2
 8009778:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800977c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009780:	b29a      	uxth	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009786:	fb12 f303 	smulbb	r3, r2, r3
 800978a:	b29b      	uxth	r3, r3
 800978c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800978e:	4293      	cmp	r3, r2
 8009790:	bf28      	it	cs
 8009792:	4613      	movcs	r3, r2
 8009794:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800979c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800979e:	4413      	add	r3, r2
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d309      	bcc.n	80097c0 <tcp_receive+0x2a0>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097b4:	4413      	add	r3, r2
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097be:	e060      	b.n	8009882 <tcp_receive+0x362>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097ca:	e05a      	b.n	8009882 <tcp_receive+0x362>
 80097cc:	08011598 	.word	0x08011598
 80097d0:	080118c8 	.word	0x080118c8
 80097d4:	080115e4 	.word	0x080115e4
 80097d8:	080118e4 	.word	0x080118e4
 80097dc:	2000012c 	.word	0x2000012c
 80097e0:	20000120 	.word	0x20000120
 80097e4:	20000124 	.word	0x20000124
 80097e8:	20000110 	.word	0x20000110
 80097ec:	2000012a 	.word	0x2000012a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097f8:	4413      	add	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009802:	429a      	cmp	r2, r3
 8009804:	d309      	bcc.n	800981a <tcp_receive+0x2fa>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800980c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800980e:	4413      	add	r3, r2
 8009810:	b29a      	uxth	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009818:	e004      	b.n	8009824 <tcp_receive+0x304>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009830:	429a      	cmp	r2, r3
 8009832:	d326      	bcc.n	8009882 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009854:	4413      	add	r3, r2
 8009856:	b29a      	uxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800985e:	429a      	cmp	r2, r3
 8009860:	d30a      	bcc.n	8009878 <tcp_receive+0x358>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800986c:	4413      	add	r3, r2
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009876:	e004      	b.n	8009882 <tcp_receive+0x362>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800987e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988a:	4a98      	ldr	r2, [pc, #608]	; (8009aec <tcp_receive+0x5cc>)
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7ff fdcb 	bl	8009428 <tcp_free_acked_segments>
 8009892:	4602      	mov	r2, r0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a0:	4a93      	ldr	r2, [pc, #588]	; (8009af0 <tcp_receive+0x5d0>)
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff fdc0 	bl	8009428 <tcp_free_acked_segments>
 80098a8:	4602      	mov	r2, r0
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d104      	bne.n	80098c0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098bc:	861a      	strh	r2, [r3, #48]	; 0x30
 80098be:	e002      	b.n	80098c6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80098e2:	4b84      	ldr	r3, [pc, #528]	; (8009af4 <tcp_receive+0x5d4>)
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	4413      	add	r3, r2
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	8b5b      	ldrh	r3, [r3, #26]
 80098f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d035      	beq.n	8009968 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009900:	2b00      	cmp	r3, #0
 8009902:	d118      	bne.n	8009936 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00c      	beq.n	8009926 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4618      	mov	r0, r3
 800991a:	f7fb f9ca 	bl	8004cb2 <lwip_htonl>
 800991e:	4603      	mov	r3, r0
 8009920:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009922:	2b00      	cmp	r3, #0
 8009924:	dc20      	bgt.n	8009968 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	8b5b      	ldrh	r3, [r3, #26]
 800992a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009934:	e018      	b.n	8009968 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	4618      	mov	r0, r3
 8009944:	f7fb f9b5 	bl	8004cb2 <lwip_htonl>
 8009948:	4603      	mov	r3, r0
 800994a:	1ae3      	subs	r3, r4, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	dc0b      	bgt.n	8009968 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	8b5b      	ldrh	r3, [r3, #26]
 8009954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800995e:	e003      	b.n	8009968 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 ff75 	bl	800b850 <tcp_send_empty_ack>
 8009966:	e000      	b.n	800996a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009968:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996e:	2b00      	cmp	r3, #0
 8009970:	d05b      	beq.n	8009a2a <tcp_receive+0x50a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009976:	4b60      	ldr	r3, [pc, #384]	; (8009af8 <tcp_receive+0x5d8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b00      	cmp	r3, #0
 800997e:	da54      	bge.n	8009a2a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009980:	4b5e      	ldr	r3, [pc, #376]	; (8009afc <tcp_receive+0x5dc>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	b29a      	uxth	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	b29b      	uxth	r3, r3
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	b29b      	uxth	r3, r3
 8009990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009994:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800999e:	10db      	asrs	r3, r3, #3
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099b8:	4413      	add	r3, r2
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	b21a      	sxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80099c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	da05      	bge.n	80099d6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80099ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099ce:	425b      	negs	r3, r3
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80099d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099e0:	109b      	asrs	r3, r3, #2
 80099e2:	b21b      	sxth	r3, r3
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099fa:	4413      	add	r3, r2
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	b21a      	sxth	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a0a:	10db      	asrs	r3, r3, #3
 8009a0c:	b21b      	sxth	r3, r3
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	b21a      	sxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a2a:	4b35      	ldr	r3, [pc, #212]	; (8009b00 <tcp_receive+0x5e0>)
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 84e1 	beq.w	800a3f6 <tcp_receive+0xed6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	7d1b      	ldrb	r3, [r3, #20]
 8009a38:	2b06      	cmp	r3, #6
 8009a3a:	f200 84dc 	bhi.w	800a3f6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a42:	4b30      	ldr	r3, [pc, #192]	; (8009b04 <tcp_receive+0x5e4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f2c0 808e 	blt.w	8009b6c <tcp_receive+0x64c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a54:	4b2a      	ldr	r3, [pc, #168]	; (8009b00 <tcp_receive+0x5e0>)
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4b2a      	ldr	r3, [pc, #168]	; (8009b04 <tcp_receive+0x5e4>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	440b      	add	r3, r1
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	3301      	adds	r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f300 8081 	bgt.w	8009b6c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009a6a:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <tcp_receive+0x5e8>)
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a74:	4b23      	ldr	r3, [pc, #140]	; (8009b04 <tcp_receive+0x5e4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a7c:	4b22      	ldr	r3, [pc, #136]	; (8009b08 <tcp_receive+0x5e8>)
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <tcp_receive+0x572>
 8009a84:	4b21      	ldr	r3, [pc, #132]	; (8009b0c <tcp_receive+0x5ec>)
 8009a86:	f240 5294 	movw	r2, #1428	; 0x594
 8009a8a:	4921      	ldr	r1, [pc, #132]	; (8009b10 <tcp_receive+0x5f0>)
 8009a8c:	4821      	ldr	r0, [pc, #132]	; (8009b14 <tcp_receive+0x5f4>)
 8009a8e:	f005 f98d 	bl	800edac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d906      	bls.n	8009aaa <tcp_receive+0x58a>
 8009a9c:	4b1b      	ldr	r3, [pc, #108]	; (8009b0c <tcp_receive+0x5ec>)
 8009a9e:	f240 5295 	movw	r2, #1429	; 0x595
 8009aa2:	491d      	ldr	r1, [pc, #116]	; (8009b18 <tcp_receive+0x5f8>)
 8009aa4:	481b      	ldr	r0, [pc, #108]	; (8009b14 <tcp_receive+0x5f4>)
 8009aa6:	f005 f981 	bl	800edac <iprintf>
      off = (u16_t)off32;
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009ab0:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <tcp_receive+0x5e8>)
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	891b      	ldrh	r3, [r3, #8]
 8009ab6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d906      	bls.n	8009acc <tcp_receive+0x5ac>
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <tcp_receive+0x5ec>)
 8009ac0:	f240 5297 	movw	r2, #1431	; 0x597
 8009ac4:	4915      	ldr	r1, [pc, #84]	; (8009b1c <tcp_receive+0x5fc>)
 8009ac6:	4813      	ldr	r0, [pc, #76]	; (8009b14 <tcp_receive+0x5f4>)
 8009ac8:	f005 f970 	bl	800edac <iprintf>
      inseg.len -= off;
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <tcp_receive+0x5e8>)
 8009ace:	891a      	ldrh	r2, [r3, #8]
 8009ad0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <tcp_receive+0x5e8>)
 8009ada:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <tcp_receive+0x5e8>)
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	891a      	ldrh	r2, [r3, #8]
 8009ae2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009aea:	e029      	b.n	8009b40 <tcp_receive+0x620>
 8009aec:	08011900 	.word	0x08011900
 8009af0:	08011908 	.word	0x08011908
 8009af4:	20000128 	.word	0x20000128
 8009af8:	20000124 	.word	0x20000124
 8009afc:	20008418 	.word	0x20008418
 8009b00:	2000012a 	.word	0x2000012a
 8009b04:	20000120 	.word	0x20000120
 8009b08:	20000100 	.word	0x20000100
 8009b0c:	08011598 	.word	0x08011598
 8009b10:	08011910 	.word	0x08011910
 8009b14:	080115e4 	.word	0x080115e4
 8009b18:	08011920 	.word	0x08011920
 8009b1c:	08011930 	.word	0x08011930
        off -= p->len;
 8009b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b22:	895b      	ldrh	r3, [r3, #10]
 8009b24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b32:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b36:	2200      	movs	r2, #0
 8009b38:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b42:	895b      	ldrh	r3, [r3, #10]
 8009b44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d8e9      	bhi.n	8009b20 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009b4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b50:	4619      	mov	r1, r3
 8009b52:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b54:	f7fc fb70 	bl	8006238 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	4a91      	ldr	r2, [pc, #580]	; (8009da4 <tcp_receive+0x884>)
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	4b91      	ldr	r3, [pc, #580]	; (8009da8 <tcp_receive+0x888>)
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	4a8f      	ldr	r2, [pc, #572]	; (8009da4 <tcp_receive+0x884>)
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b6a:	e00d      	b.n	8009b88 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b6c:	4b8d      	ldr	r3, [pc, #564]	; (8009da4 <tcp_receive+0x884>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	da06      	bge.n	8009b88 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	8b5b      	ldrh	r3, [r3, #26]
 8009b7e:	f043 0302 	orr.w	r3, r3, #2
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b88:	4b86      	ldr	r3, [pc, #536]	; (8009da4 <tcp_receive+0x884>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f2c0 842a 	blt.w	800a3ec <tcp_receive+0xecc>
 8009b98:	4b82      	ldr	r3, [pc, #520]	; (8009da4 <tcp_receive+0x884>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ba4:	440b      	add	r3, r1
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	3301      	adds	r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f300 841e 	bgt.w	800a3ec <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bb4:	4b7b      	ldr	r3, [pc, #492]	; (8009da4 <tcp_receive+0x884>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	f040 829a 	bne.w	800a0f2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009bbe:	4b7a      	ldr	r3, [pc, #488]	; (8009da8 <tcp_receive+0x888>)
 8009bc0:	891c      	ldrh	r4, [r3, #8]
 8009bc2:	4b79      	ldr	r3, [pc, #484]	; (8009da8 <tcp_receive+0x888>)
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	899b      	ldrh	r3, [r3, #12]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fb f85c 	bl	8004c88 <lwip_htons>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 0303 	and.w	r3, r3, #3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <tcp_receive+0x6c0>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <tcp_receive+0x6c2>
 8009be0:	2300      	movs	r3, #0
 8009be2:	4423      	add	r3, r4
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	4b71      	ldr	r3, [pc, #452]	; (8009dac <tcp_receive+0x88c>)
 8009be8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bee:	4b6f      	ldr	r3, [pc, #444]	; (8009dac <tcp_receive+0x88c>)
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d275      	bcs.n	8009ce2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bf6:	4b6c      	ldr	r3, [pc, #432]	; (8009da8 <tcp_receive+0x888>)
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	899b      	ldrh	r3, [r3, #12]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fb f842 	bl	8004c88 <lwip_htons>
 8009c04:	4603      	mov	r3, r0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01f      	beq.n	8009c50 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009c10:	4b65      	ldr	r3, [pc, #404]	; (8009da8 <tcp_receive+0x888>)
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	899b      	ldrh	r3, [r3, #12]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	b21b      	sxth	r3, r3
 8009c1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c1e:	b21c      	sxth	r4, r3
 8009c20:	4b61      	ldr	r3, [pc, #388]	; (8009da8 <tcp_receive+0x888>)
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	899b      	ldrh	r3, [r3, #12]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fb f82d 	bl	8004c88 <lwip_htons>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fb f824 	bl	8004c88 <lwip_htons>
 8009c40:	4603      	mov	r3, r0
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	4323      	orrs	r3, r4
 8009c46:	b21a      	sxth	r2, r3
 8009c48:	4b57      	ldr	r3, [pc, #348]	; (8009da8 <tcp_receive+0x888>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	b292      	uxth	r2, r2
 8009c4e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c54:	4b54      	ldr	r3, [pc, #336]	; (8009da8 <tcp_receive+0x888>)
 8009c56:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c58:	4b53      	ldr	r3, [pc, #332]	; (8009da8 <tcp_receive+0x888>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	899b      	ldrh	r3, [r3, #12]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fb f811 	bl	8004c88 <lwip_htons>
 8009c66:	4603      	mov	r3, r0
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <tcp_receive+0x75e>
            inseg.len -= 1;
 8009c72:	4b4d      	ldr	r3, [pc, #308]	; (8009da8 <tcp_receive+0x888>)
 8009c74:	891b      	ldrh	r3, [r3, #8]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	4b4b      	ldr	r3, [pc, #300]	; (8009da8 <tcp_receive+0x888>)
 8009c7c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009c7e:	4b4a      	ldr	r3, [pc, #296]	; (8009da8 <tcp_receive+0x888>)
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	4a49      	ldr	r2, [pc, #292]	; (8009da8 <tcp_receive+0x888>)
 8009c84:	8912      	ldrh	r2, [r2, #8]
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fc f9d5 	bl	8006038 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009c8e:	4b46      	ldr	r3, [pc, #280]	; (8009da8 <tcp_receive+0x888>)
 8009c90:	891c      	ldrh	r4, [r3, #8]
 8009c92:	4b45      	ldr	r3, [pc, #276]	; (8009da8 <tcp_receive+0x888>)
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	899b      	ldrh	r3, [r3, #12]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fa fff4 	bl	8004c88 <lwip_htons>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <tcp_receive+0x790>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e000      	b.n	8009cb2 <tcp_receive+0x792>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4423      	add	r3, r4
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	4b3d      	ldr	r3, [pc, #244]	; (8009dac <tcp_receive+0x88c>)
 8009cb8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009cba:	4b3c      	ldr	r3, [pc, #240]	; (8009dac <tcp_receive+0x88c>)
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4b38      	ldr	r3, [pc, #224]	; (8009da4 <tcp_receive+0x884>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	441a      	add	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cce:	440b      	add	r3, r1
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d006      	beq.n	8009ce2 <tcp_receive+0x7c2>
 8009cd4:	4b36      	ldr	r3, [pc, #216]	; (8009db0 <tcp_receive+0x890>)
 8009cd6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009cda:	4936      	ldr	r1, [pc, #216]	; (8009db4 <tcp_receive+0x894>)
 8009cdc:	4836      	ldr	r0, [pc, #216]	; (8009db8 <tcp_receive+0x898>)
 8009cde:	f005 f865 	bl	800edac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 80e7 	beq.w	8009eba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009cec:	4b2e      	ldr	r3, [pc, #184]	; (8009da8 <tcp_receive+0x888>)
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	899b      	ldrh	r3, [r3, #12]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fa ffc7 	bl	8004c88 <lwip_htons>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d010      	beq.n	8009d28 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009d06:	e00a      	b.n	8009d1e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7fd fd96 	bl	800784a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f0      	bne.n	8009d08 <tcp_receive+0x7e8>
 8009d26:	e0c8      	b.n	8009eba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009d2e:	e052      	b.n	8009dd6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	899b      	ldrh	r3, [r3, #12]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fa ffa5 	bl	8004c88 <lwip_htons>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d03d      	beq.n	8009dc6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009d4a:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <tcp_receive+0x888>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	899b      	ldrh	r3, [r3, #12]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fa ff98 	bl	8004c88 <lwip_htons>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d130      	bne.n	8009dc6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009d64:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <tcp_receive+0x888>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	899b      	ldrh	r3, [r3, #12]
 8009d6a:	b29c      	uxth	r4, r3
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	f7fa ff8b 	bl	8004c88 <lwip_htons>
 8009d72:	4603      	mov	r3, r0
 8009d74:	461a      	mov	r2, r3
 8009d76:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <tcp_receive+0x888>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	4322      	orrs	r2, r4
 8009d7c:	b292      	uxth	r2, r2
 8009d7e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009d80:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <tcp_receive+0x888>)
 8009d82:	891c      	ldrh	r4, [r3, #8]
 8009d84:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <tcp_receive+0x888>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	899b      	ldrh	r3, [r3, #12]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fa ff7b 	bl	8004c88 <lwip_htons>
 8009d92:	4603      	mov	r3, r0
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00e      	beq.n	8009dbc <tcp_receive+0x89c>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e00d      	b.n	8009dbe <tcp_receive+0x89e>
 8009da2:	bf00      	nop
 8009da4:	20000120 	.word	0x20000120
 8009da8:	20000100 	.word	0x20000100
 8009dac:	2000012a 	.word	0x2000012a
 8009db0:	08011598 	.word	0x08011598
 8009db4:	08011940 	.word	0x08011940
 8009db8:	080115e4 	.word	0x080115e4
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4423      	add	r3, r4
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	4b98      	ldr	r3, [pc, #608]	; (800a024 <tcp_receive+0xb04>)
 8009dc4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009dd0:	6938      	ldr	r0, [r7, #16]
 8009dd2:	f7fd fd3a 	bl	800784a <tcp_seg_free>
            while (next &&
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00e      	beq.n	8009dfa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009ddc:	4b91      	ldr	r3, [pc, #580]	; (800a024 <tcp_receive+0xb04>)
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b91      	ldr	r3, [pc, #580]	; (800a028 <tcp_receive+0xb08>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	441a      	add	r2, r3
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009df0:	8909      	ldrh	r1, [r1, #8]
 8009df2:	440b      	add	r3, r1
 8009df4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	da9a      	bge.n	8009d30 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d059      	beq.n	8009eb4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009e00:	4b88      	ldr	r3, [pc, #544]	; (800a024 <tcp_receive+0xb04>)
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	4b88      	ldr	r3, [pc, #544]	; (800a028 <tcp_receive+0xb08>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	441a      	add	r2, r3
 8009e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	dd4d      	ble.n	8009eb4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	4b81      	ldr	r3, [pc, #516]	; (800a028 <tcp_receive+0xb08>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	4b80      	ldr	r3, [pc, #512]	; (800a02c <tcp_receive+0xb0c>)
 8009e2c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e2e:	4b7f      	ldr	r3, [pc, #508]	; (800a02c <tcp_receive+0xb0c>)
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fa ff26 	bl	8004c88 <lwip_htons>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <tcp_receive+0x934>
                inseg.len -= 1;
 8009e48:	4b78      	ldr	r3, [pc, #480]	; (800a02c <tcp_receive+0xb0c>)
 8009e4a:	891b      	ldrh	r3, [r3, #8]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	4b76      	ldr	r3, [pc, #472]	; (800a02c <tcp_receive+0xb0c>)
 8009e52:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009e54:	4b75      	ldr	r3, [pc, #468]	; (800a02c <tcp_receive+0xb0c>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4a74      	ldr	r2, [pc, #464]	; (800a02c <tcp_receive+0xb0c>)
 8009e5a:	8912      	ldrh	r2, [r2, #8]
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fc f8ea 	bl	8006038 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009e64:	4b71      	ldr	r3, [pc, #452]	; (800a02c <tcp_receive+0xb0c>)
 8009e66:	891c      	ldrh	r4, [r3, #8]
 8009e68:	4b70      	ldr	r3, [pc, #448]	; (800a02c <tcp_receive+0xb0c>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	899b      	ldrh	r3, [r3, #12]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fa ff09 	bl	8004c88 <lwip_htons>
 8009e76:	4603      	mov	r3, r0
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <tcp_receive+0x966>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <tcp_receive+0x968>
 8009e86:	2300      	movs	r3, #0
 8009e88:	4423      	add	r3, r4
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	4b65      	ldr	r3, [pc, #404]	; (800a024 <tcp_receive+0xb04>)
 8009e8e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009e90:	4b64      	ldr	r3, [pc, #400]	; (800a024 <tcp_receive+0xb04>)
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	4b64      	ldr	r3, [pc, #400]	; (800a028 <tcp_receive+0xb08>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	441a      	add	r2, r3
 8009e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d006      	beq.n	8009eb4 <tcp_receive+0x994>
 8009ea6:	4b62      	ldr	r3, [pc, #392]	; (800a030 <tcp_receive+0xb10>)
 8009ea8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009eac:	4961      	ldr	r1, [pc, #388]	; (800a034 <tcp_receive+0xb14>)
 8009eae:	4862      	ldr	r0, [pc, #392]	; (800a038 <tcp_receive+0xb18>)
 8009eb0:	f004 ff7c 	bl	800edac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009eb8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009eba:	4b5a      	ldr	r3, [pc, #360]	; (800a024 <tcp_receive+0xb04>)
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4b59      	ldr	r3, [pc, #356]	; (800a028 <tcp_receive+0xb08>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ece:	4b55      	ldr	r3, [pc, #340]	; (800a024 <tcp_receive+0xb04>)
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d206      	bcs.n	8009ee4 <tcp_receive+0x9c4>
 8009ed6:	4b56      	ldr	r3, [pc, #344]	; (800a030 <tcp_receive+0xb10>)
 8009ed8:	f240 6207 	movw	r2, #1543	; 0x607
 8009edc:	4957      	ldr	r1, [pc, #348]	; (800a03c <tcp_receive+0xb1c>)
 8009ede:	4856      	ldr	r0, [pc, #344]	; (800a038 <tcp_receive+0xb18>)
 8009ee0:	f004 ff64 	bl	800edac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ee8:	4b4e      	ldr	r3, [pc, #312]	; (800a024 <tcp_receive+0xb04>)
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7fc ffc9 	bl	8006e8c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009efa:	4b4c      	ldr	r3, [pc, #304]	; (800a02c <tcp_receive+0xb0c>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	891b      	ldrh	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009f04:	4b49      	ldr	r3, [pc, #292]	; (800a02c <tcp_receive+0xb0c>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a4d      	ldr	r2, [pc, #308]	; (800a040 <tcp_receive+0xb20>)
 8009f0a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009f0c:	4b47      	ldr	r3, [pc, #284]	; (800a02c <tcp_receive+0xb0c>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f12:	4b46      	ldr	r3, [pc, #280]	; (800a02c <tcp_receive+0xb0c>)
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	899b      	ldrh	r3, [r3, #12]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fa feb4 	bl	8004c88 <lwip_htons>
 8009f20:	4603      	mov	r3, r0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 80b8 	beq.w	800a09e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009f2e:	4b45      	ldr	r3, [pc, #276]	; (800a044 <tcp_receive+0xb24>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	f043 0320 	orr.w	r3, r3, #32
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	4b42      	ldr	r3, [pc, #264]	; (800a044 <tcp_receive+0xb24>)
 8009f3a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009f3c:	e0af      	b.n	800a09e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f42:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4a36      	ldr	r2, [pc, #216]	; (800a028 <tcp_receive+0xb08>)
 8009f4e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	891b      	ldrh	r3, [r3, #8]
 8009f54:	461c      	mov	r4, r3
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	899b      	ldrh	r3, [r3, #12]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa fe92 	bl	8004c88 <lwip_htons>
 8009f64:	4603      	mov	r3, r0
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <tcp_receive+0xa54>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <tcp_receive+0xa56>
 8009f74:	2300      	movs	r3, #0
 8009f76:	191a      	adds	r2, r3, r4
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	441a      	add	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f86:	461c      	mov	r4, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	891b      	ldrh	r3, [r3, #8]
 8009f8c:	461d      	mov	r5, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	899b      	ldrh	r3, [r3, #12]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fa fe76 	bl	8004c88 <lwip_htons>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <tcp_receive+0xa8c>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e000      	b.n	8009fae <tcp_receive+0xa8e>
 8009fac:	2300      	movs	r3, #0
 8009fae:	442b      	add	r3, r5
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	d206      	bcs.n	8009fc2 <tcp_receive+0xaa2>
 8009fb4:	4b1e      	ldr	r3, [pc, #120]	; (800a030 <tcp_receive+0xb10>)
 8009fb6:	f240 622b 	movw	r2, #1579	; 0x62b
 8009fba:	4923      	ldr	r1, [pc, #140]	; (800a048 <tcp_receive+0xb28>)
 8009fbc:	481e      	ldr	r0, [pc, #120]	; (800a038 <tcp_receive+0xb18>)
 8009fbe:	f004 fef5 	bl	800edac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	461c      	mov	r4, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	899b      	ldrh	r3, [r3, #12]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fa fe59 	bl	8004c88 <lwip_htons>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <tcp_receive+0xac6>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <tcp_receive+0xac8>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	1919      	adds	r1, r3, r4
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fee:	b28b      	uxth	r3, r1
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7fc ff47 	bl	8006e8c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	891b      	ldrh	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d028      	beq.n	800a05a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a008:	4b0d      	ldr	r3, [pc, #52]	; (800a040 <tcp_receive+0xb20>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01d      	beq.n	800a04c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <tcp_receive+0xb20>)
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fc fa54 	bl	80064c8 <pbuf_cat>
 800a020:	e018      	b.n	800a054 <tcp_receive+0xb34>
 800a022:	bf00      	nop
 800a024:	2000012a 	.word	0x2000012a
 800a028:	20000120 	.word	0x20000120
 800a02c:	20000100 	.word	0x20000100
 800a030:	08011598 	.word	0x08011598
 800a034:	08011978 	.word	0x08011978
 800a038:	080115e4 	.word	0x080115e4
 800a03c:	080119b4 	.word	0x080119b4
 800a040:	20000130 	.word	0x20000130
 800a044:	2000012d 	.word	0x2000012d
 800a048:	080119d4 	.word	0x080119d4
            } else {
              recv_data = cseg->p;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	4a70      	ldr	r2, [pc, #448]	; (800a214 <tcp_receive+0xcf4>)
 800a052:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	899b      	ldrh	r3, [r3, #12]
 800a060:	b29b      	uxth	r3, r3
 800a062:	4618      	mov	r0, r3
 800a064:	f7fa fe10 	bl	8004c88 <lwip_htons>
 800a068:	4603      	mov	r3, r0
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00d      	beq.n	800a090 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a074:	4b68      	ldr	r3, [pc, #416]	; (800a218 <tcp_receive+0xcf8>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	f043 0320 	orr.w	r3, r3, #32
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	4b66      	ldr	r3, [pc, #408]	; (800a218 <tcp_receive+0xcf8>)
 800a080:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7d1b      	ldrb	r3, [r3, #20]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d102      	bne.n	800a090 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2207      	movs	r2, #7
 800a08e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a098:	68b8      	ldr	r0, [r7, #8]
 800a09a:	f7fd fbd6 	bl	800784a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d008      	beq.n	800a0b8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	f43f af43 	beq.w	8009f3e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	8b5b      	ldrh	r3, [r3, #26]
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00e      	beq.n	800a0e2 <tcp_receive+0xbc2>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8b5b      	ldrh	r3, [r3, #26]
 800a0c8:	f023 0301 	bic.w	r3, r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	835a      	strh	r2, [r3, #26]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	8b5b      	ldrh	r3, [r3, #26]
 800a0d6:	f043 0302 	orr.w	r3, r3, #2
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0e0:	e188      	b.n	800a3f4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	8b5b      	ldrh	r3, [r3, #26]
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a0f0:	e180      	b.n	800a3f4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d106      	bne.n	800a108 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a0fa:	4848      	ldr	r0, [pc, #288]	; (800a21c <tcp_receive+0xcfc>)
 800a0fc:	f7fd fbbe 	bl	800787c <tcp_seg_copy>
 800a100:	4602      	mov	r2, r0
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	675a      	str	r2, [r3, #116]	; 0x74
 800a106:	e16d      	b.n	800a3e4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a108:	2300      	movs	r3, #0
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a110:	63bb      	str	r3, [r7, #56]	; 0x38
 800a112:	e157      	b.n	800a3c4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	4b41      	ldr	r3, [pc, #260]	; (800a220 <tcp_receive+0xd00>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d11d      	bne.n	800a15e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a122:	4b3e      	ldr	r3, [pc, #248]	; (800a21c <tcp_receive+0xcfc>)
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	891b      	ldrh	r3, [r3, #8]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f240 814f 	bls.w	800a3ce <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a130:	483a      	ldr	r0, [pc, #232]	; (800a21c <tcp_receive+0xcfc>)
 800a132:	f7fd fba3 	bl	800787c <tcp_seg_copy>
 800a136:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 8149 	beq.w	800a3d2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	e002      	b.n	800a154 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a156:	6978      	ldr	r0, [r7, #20]
 800a158:	f7ff f8de 	bl	8009318 <tcp_oos_insert_segment>
                }
                break;
 800a15c:	e139      	b.n	800a3d2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a160:	2b00      	cmp	r3, #0
 800a162:	d117      	bne.n	800a194 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a164:	4b2e      	ldr	r3, [pc, #184]	; (800a220 <tcp_receive+0xd00>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	da57      	bge.n	800a224 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a174:	4829      	ldr	r0, [pc, #164]	; (800a21c <tcp_receive+0xcfc>)
 800a176:	f7fd fb81 	bl	800787c <tcp_seg_copy>
 800a17a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 8129 	beq.w	800a3d6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a18a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a18c:	69b8      	ldr	r0, [r7, #24]
 800a18e:	f7ff f8c3 	bl	8009318 <tcp_oos_insert_segment>
                  }
                  break;
 800a192:	e120      	b.n	800a3d6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a194:	4b22      	ldr	r3, [pc, #136]	; (800a220 <tcp_receive+0xd00>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	db3e      	blt.n	800a224 <tcp_receive+0xd04>
 800a1a6:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <tcp_receive+0xd00>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dc35      	bgt.n	800a224 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1b8:	4818      	ldr	r0, [pc, #96]	; (800a21c <tcp_receive+0xcfc>)
 800a1ba:	f7fd fb5f 	bl	800787c <tcp_seg_copy>
 800a1be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 8109 	beq.w	800a3da <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d0:	8912      	ldrh	r2, [r2, #8]
 800a1d2:	441a      	add	r2, r3
 800a1d4:	4b12      	ldr	r3, [pc, #72]	; (800a220 <tcp_receive+0xd00>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dd12      	ble.n	800a204 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a1de:	4b10      	ldr	r3, [pc, #64]	; (800a220 <tcp_receive+0xd00>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fa:	891b      	ldrh	r3, [r3, #8]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f7fb ff1a 	bl	8006038 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a20a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a20c:	69f8      	ldr	r0, [r7, #28]
 800a20e:	f7ff f883 	bl	8009318 <tcp_oos_insert_segment>
                  }
                  break;
 800a212:	e0e2      	b.n	800a3da <tcp_receive+0xeba>
 800a214:	20000130 	.word	0x20000130
 800a218:	2000012d 	.word	0x2000012d
 800a21c:	20000100 	.word	0x20000100
 800a220:	20000120 	.word	0x20000120
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f040 80c6 	bne.w	800a3be <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a232:	4b80      	ldr	r3, [pc, #512]	; (800a434 <tcp_receive+0xf14>)
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f340 80bd 	ble.w	800a3be <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	899b      	ldrh	r3, [r3, #12]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fa fd1b 	bl	8004c88 <lwip_htons>
 800a252:	4603      	mov	r3, r0
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f040 80bf 	bne.w	800a3de <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a260:	4875      	ldr	r0, [pc, #468]	; (800a438 <tcp_receive+0xf18>)
 800a262:	f7fd fb0b 	bl	800787c <tcp_seg_copy>
 800a266:	4602      	mov	r2, r0
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80b6 	beq.w	800a3e2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a27e:	8912      	ldrh	r2, [r2, #8]
 800a280:	441a      	add	r2, r3
 800a282:	4b6c      	ldr	r3, [pc, #432]	; (800a434 <tcp_receive+0xf14>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	dd12      	ble.n	800a2b2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a28c:	4b69      	ldr	r3, [pc, #420]	; (800a434 <tcp_receive+0xf14>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	b29a      	uxth	r2, r3
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	891b      	ldrh	r3, [r3, #8]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f7fb fec3 	bl	8006038 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a2b2:	4b62      	ldr	r3, [pc, #392]	; (800a43c <tcp_receive+0xf1c>)
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4b5e      	ldr	r3, [pc, #376]	; (800a434 <tcp_receive+0xf14>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	441a      	add	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2c6:	440b      	add	r3, r1
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f340 8089 	ble.w	800a3e2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	899b      	ldrh	r3, [r3, #12]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fa fcd4 	bl	8004c88 <lwip_htons>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d022      	beq.n	800a332 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	899b      	ldrh	r3, [r3, #12]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	b21b      	sxth	r3, r3
 800a2f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2fc:	b21c      	sxth	r4, r3
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	899b      	ldrh	r3, [r3, #12]
 800a306:	b29b      	uxth	r3, r3
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fa fcbd 	bl	8004c88 <lwip_htons>
 800a30e:	4603      	mov	r3, r0
 800a310:	b2db      	uxtb	r3, r3
 800a312:	b29b      	uxth	r3, r3
 800a314:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a318:	b29b      	uxth	r3, r3
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fa fcb4 	bl	8004c88 <lwip_htons>
 800a320:	4603      	mov	r3, r0
 800a322:	b21b      	sxth	r3, r3
 800a324:	4323      	orrs	r3, r4
 800a326:	b21a      	sxth	r2, r3
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	b292      	uxth	r2, r2
 800a330:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33c:	4413      	add	r3, r2
 800a33e:	b299      	uxth	r1, r3
 800a340:	4b3c      	ldr	r3, [pc, #240]	; (800a434 <tcp_receive+0xf14>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	b29a      	uxth	r2, r3
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	1a8a      	subs	r2, r1, r2
 800a34c:	b292      	uxth	r2, r2
 800a34e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f7fb fe6a 	bl	8006038 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	891c      	ldrh	r4, [r3, #8]
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	899b      	ldrh	r3, [r3, #12]
 800a372:	b29b      	uxth	r3, r3
 800a374:	4618      	mov	r0, r3
 800a376:	f7fa fc87 	bl	8004c88 <lwip_htons>
 800a37a:	4603      	mov	r3, r0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <tcp_receive+0xe6a>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <tcp_receive+0xe6c>
 800a38a:	2300      	movs	r3, #0
 800a38c:	4423      	add	r3, r4
 800a38e:	b29a      	uxth	r2, r3
 800a390:	4b2a      	ldr	r3, [pc, #168]	; (800a43c <tcp_receive+0xf1c>)
 800a392:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a394:	4b29      	ldr	r3, [pc, #164]	; (800a43c <tcp_receive+0xf1c>)
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	4b26      	ldr	r3, [pc, #152]	; (800a434 <tcp_receive+0xf14>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	441a      	add	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a3a8:	440b      	add	r3, r1
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d019      	beq.n	800a3e2 <tcp_receive+0xec2>
 800a3ae:	4b24      	ldr	r3, [pc, #144]	; (800a440 <tcp_receive+0xf20>)
 800a3b0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a3b4:	4923      	ldr	r1, [pc, #140]	; (800a444 <tcp_receive+0xf24>)
 800a3b6:	4824      	ldr	r0, [pc, #144]	; (800a448 <tcp_receive+0xf28>)
 800a3b8:	f004 fcf8 	bl	800edac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a3bc:	e011      	b.n	800a3e2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f47f aea4 	bne.w	800a114 <tcp_receive+0xbf4>
 800a3cc:	e00a      	b.n	800a3e4 <tcp_receive+0xec4>
                break;
 800a3ce:	bf00      	nop
 800a3d0:	e008      	b.n	800a3e4 <tcp_receive+0xec4>
                break;
 800a3d2:	bf00      	nop
 800a3d4:	e006      	b.n	800a3e4 <tcp_receive+0xec4>
                  break;
 800a3d6:	bf00      	nop
 800a3d8:	e004      	b.n	800a3e4 <tcp_receive+0xec4>
                  break;
 800a3da:	bf00      	nop
 800a3dc:	e002      	b.n	800a3e4 <tcp_receive+0xec4>
                  break;
 800a3de:	bf00      	nop
 800a3e0:	e000      	b.n	800a3e4 <tcp_receive+0xec4>
                break;
 800a3e2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 fa33 	bl	800b850 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a3ea:	e003      	b.n	800a3f4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f001 fa2f 	bl	800b850 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3f2:	e01a      	b.n	800a42a <tcp_receive+0xf0a>
 800a3f4:	e019      	b.n	800a42a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a3f6:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <tcp_receive+0xf14>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	db0a      	blt.n	800a41a <tcp_receive+0xefa>
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <tcp_receive+0xf14>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a410:	440b      	add	r3, r1
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	3301      	adds	r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	dd07      	ble.n	800a42a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	8b5b      	ldrh	r3, [r3, #26]
 800a41e:	f043 0302 	orr.w	r3, r3, #2
 800a422:	b29a      	uxth	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a428:	e7ff      	b.n	800a42a <tcp_receive+0xf0a>
 800a42a:	bf00      	nop
 800a42c:	3750      	adds	r7, #80	; 0x50
 800a42e:	46bd      	mov	sp, r7
 800a430:	bdb0      	pop	{r4, r5, r7, pc}
 800a432:	bf00      	nop
 800a434:	20000120 	.word	0x20000120
 800a438:	20000100 	.word	0x20000100
 800a43c:	2000012a 	.word	0x2000012a
 800a440:	08011598 	.word	0x08011598
 800a444:	08011940 	.word	0x08011940
 800a448:	080115e4 	.word	0x080115e4

0800a44c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a452:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <tcp_get_next_optbyte+0x5c>)
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	b291      	uxth	r1, r2
 800a45a:	4a13      	ldr	r2, [pc, #76]	; (800a4a8 <tcp_get_next_optbyte+0x5c>)
 800a45c:	8011      	strh	r1, [r2, #0]
 800a45e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a460:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <tcp_get_next_optbyte+0x60>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <tcp_get_next_optbyte+0x26>
 800a468:	4b11      	ldr	r3, [pc, #68]	; (800a4b0 <tcp_get_next_optbyte+0x64>)
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	88fa      	ldrh	r2, [r7, #6]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d208      	bcs.n	800a484 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a472:	4b10      	ldr	r3, [pc, #64]	; (800a4b4 <tcp_get_next_optbyte+0x68>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3314      	adds	r3, #20
 800a478:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a47a:	88fb      	ldrh	r3, [r7, #6]
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	4413      	add	r3, r2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	e00b      	b.n	800a49c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a484:	88fb      	ldrh	r3, [r7, #6]
 800a486:	b2da      	uxtb	r2, r3
 800a488:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <tcp_get_next_optbyte+0x64>)
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a492:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <tcp_get_next_optbyte+0x60>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	797b      	ldrb	r3, [r7, #5]
 800a498:	4413      	add	r3, r2
 800a49a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	2000011c 	.word	0x2000011c
 800a4ac:	20000118 	.word	0x20000118
 800a4b0:	20000116 	.word	0x20000116
 800a4b4:	20000110 	.word	0x20000110

0800a4b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <tcp_parseopt+0x1c>
 800a4c6:	4b32      	ldr	r3, [pc, #200]	; (800a590 <tcp_parseopt+0xd8>)
 800a4c8:	f240 727d 	movw	r2, #1917	; 0x77d
 800a4cc:	4931      	ldr	r1, [pc, #196]	; (800a594 <tcp_parseopt+0xdc>)
 800a4ce:	4832      	ldr	r0, [pc, #200]	; (800a598 <tcp_parseopt+0xe0>)
 800a4d0:	f004 fc6c 	bl	800edac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a4d4:	4b31      	ldr	r3, [pc, #196]	; (800a59c <tcp_parseopt+0xe4>)
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d055      	beq.n	800a588 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a4dc:	4b30      	ldr	r3, [pc, #192]	; (800a5a0 <tcp_parseopt+0xe8>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	801a      	strh	r2, [r3, #0]
 800a4e2:	e045      	b.n	800a570 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a4e4:	f7ff ffb2 	bl	800a44c <tcp_get_next_optbyte>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d006      	beq.n	800a500 <tcp_parseopt+0x48>
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	dc2b      	bgt.n	800a54e <tcp_parseopt+0x96>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d041      	beq.n	800a57e <tcp_parseopt+0xc6>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d127      	bne.n	800a54e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a4fe:	e037      	b.n	800a570 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a500:	f7ff ffa4 	bl	800a44c <tcp_get_next_optbyte>
 800a504:	4603      	mov	r3, r0
 800a506:	2b04      	cmp	r3, #4
 800a508:	d13b      	bne.n	800a582 <tcp_parseopt+0xca>
 800a50a:	4b25      	ldr	r3, [pc, #148]	; (800a5a0 <tcp_parseopt+0xe8>)
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	3301      	adds	r3, #1
 800a510:	4a22      	ldr	r2, [pc, #136]	; (800a59c <tcp_parseopt+0xe4>)
 800a512:	8812      	ldrh	r2, [r2, #0]
 800a514:	4293      	cmp	r3, r2
 800a516:	da34      	bge.n	800a582 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a518:	f7ff ff98 	bl	800a44c <tcp_get_next_optbyte>
 800a51c:	4603      	mov	r3, r0
 800a51e:	b29b      	uxth	r3, r3
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a524:	f7ff ff92 	bl	800a44c <tcp_get_next_optbyte>
 800a528:	4603      	mov	r3, r0
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	89bb      	ldrh	r3, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a532:	89bb      	ldrh	r3, [r7, #12]
 800a534:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a538:	d804      	bhi.n	800a544 <tcp_parseopt+0x8c>
 800a53a:	89bb      	ldrh	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <tcp_parseopt+0x8c>
 800a540:	89ba      	ldrh	r2, [r7, #12]
 800a542:	e001      	b.n	800a548 <tcp_parseopt+0x90>
 800a544:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a54c:	e010      	b.n	800a570 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a54e:	f7ff ff7d 	bl	800a44c <tcp_get_next_optbyte>
 800a552:	4603      	mov	r3, r0
 800a554:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d914      	bls.n	800a586 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	b29a      	uxth	r2, r3
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <tcp_parseopt+0xe8>)
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	4413      	add	r3, r2
 800a566:	b29b      	uxth	r3, r3
 800a568:	3b02      	subs	r3, #2
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <tcp_parseopt+0xe8>)
 800a56e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <tcp_parseopt+0xe8>)
 800a572:	881a      	ldrh	r2, [r3, #0]
 800a574:	4b09      	ldr	r3, [pc, #36]	; (800a59c <tcp_parseopt+0xe4>)
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d3b3      	bcc.n	800a4e4 <tcp_parseopt+0x2c>
 800a57c:	e004      	b.n	800a588 <tcp_parseopt+0xd0>
          return;
 800a57e:	bf00      	nop
 800a580:	e002      	b.n	800a588 <tcp_parseopt+0xd0>
            return;
 800a582:	bf00      	nop
 800a584:	e000      	b.n	800a588 <tcp_parseopt+0xd0>
            return;
 800a586:	bf00      	nop
      }
    }
  }
}
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	08011598 	.word	0x08011598
 800a594:	080119fc 	.word	0x080119fc
 800a598:	080115e4 	.word	0x080115e4
 800a59c:	20000114 	.word	0x20000114
 800a5a0:	2000011c 	.word	0x2000011c

0800a5a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <tcp_trigger_input_pcb_close+0x1c>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	f043 0310 	orr.w	r3, r3, #16
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <tcp_trigger_input_pcb_close+0x1c>)
 800a5b4:	701a      	strb	r2, [r3, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	2000012d 	.word	0x2000012d

0800a5c4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <tcp_route+0x28>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	7a1b      	ldrb	r3, [r3, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d006      	beq.n	800a5ec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	7a1b      	ldrb	r3, [r3, #8]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fb fb4e 	bl	8005c84 <netif_get_by_index>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	e003      	b.n	800a5f4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f003 f995 	bl	800d91c <ip4_route>
 800a5f2:	4603      	mov	r3, r0
  }
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a5fc:	b590      	push	{r4, r7, lr}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	4613      	mov	r3, r2
 800a60a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d105      	bne.n	800a61e <tcp_create_segment+0x22>
 800a612:	4b44      	ldr	r3, [pc, #272]	; (800a724 <tcp_create_segment+0x128>)
 800a614:	22a3      	movs	r2, #163	; 0xa3
 800a616:	4944      	ldr	r1, [pc, #272]	; (800a728 <tcp_create_segment+0x12c>)
 800a618:	4844      	ldr	r0, [pc, #272]	; (800a72c <tcp_create_segment+0x130>)
 800a61a:	f004 fbc7 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <tcp_create_segment+0x34>
 800a624:	4b3f      	ldr	r3, [pc, #252]	; (800a724 <tcp_create_segment+0x128>)
 800a626:	22a4      	movs	r2, #164	; 0xa4
 800a628:	4941      	ldr	r1, [pc, #260]	; (800a730 <tcp_create_segment+0x134>)
 800a62a:	4840      	ldr	r0, [pc, #256]	; (800a72c <tcp_create_segment+0x130>)
 800a62c:	f004 fbbe 	bl	800edac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a630:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a63e:	2003      	movs	r0, #3
 800a640:	f7fa ff9a 	bl	8005578 <memp_malloc>
 800a644:	6138      	str	r0, [r7, #16]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a64c:	68b8      	ldr	r0, [r7, #8]
 800a64e:	f7fb fe79 	bl	8006344 <pbuf_free>
    return NULL;
 800a652:	2300      	movs	r3, #0
 800a654:	e061      	b.n	800a71a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a65c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	891a      	ldrh	r2, [r3, #8]
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	b29b      	uxth	r3, r3
 800a672:	429a      	cmp	r2, r3
 800a674:	d205      	bcs.n	800a682 <tcp_create_segment+0x86>
 800a676:	4b2b      	ldr	r3, [pc, #172]	; (800a724 <tcp_create_segment+0x128>)
 800a678:	22b0      	movs	r2, #176	; 0xb0
 800a67a:	492e      	ldr	r1, [pc, #184]	; (800a734 <tcp_create_segment+0x138>)
 800a67c:	482b      	ldr	r0, [pc, #172]	; (800a72c <tcp_create_segment+0x130>)
 800a67e:	f004 fb95 	bl	800edac <iprintf>
  seg->len = p->tot_len - optlen;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	891a      	ldrh	r2, [r3, #8]
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	b29b      	uxth	r3, r3
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a692:	2114      	movs	r1, #20
 800a694:	68b8      	ldr	r0, [r7, #8]
 800a696:	f7fb fdbf 	bl	8006218 <pbuf_add_header>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a6a0:	6938      	ldr	r0, [r7, #16]
 800a6a2:	f7fd f8d2 	bl	800784a <tcp_seg_free>
    return NULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e037      	b.n	800a71a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8ada      	ldrh	r2, [r3, #22]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	68dc      	ldr	r4, [r3, #12]
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f7fa fae3 	bl	8004c88 <lwip_htons>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8b1a      	ldrh	r2, [r3, #24]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	68dc      	ldr	r4, [r3, #12]
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	f7fa fada 	bl	8004c88 <lwip_htons>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	68dc      	ldr	r4, [r3, #12]
 800a6dc:	6838      	ldr	r0, [r7, #0]
 800a6de:	f7fa fae8 	bl	8004cb2 <lwip_htonl>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
 800a6e8:	089b      	lsrs	r3, r3, #2
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	3305      	adds	r3, #5
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	031b      	lsls	r3, r3, #12
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	68dc      	ldr	r4, [r3, #12]
 800a702:	4610      	mov	r0, r2
 800a704:	f7fa fac0 	bl	8004c88 <lwip_htons>
 800a708:	4603      	mov	r3, r0
 800a70a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	749a      	strb	r2, [r3, #18]
 800a714:	2200      	movs	r2, #0
 800a716:	74da      	strb	r2, [r3, #19]
  return seg;
 800a718:	693b      	ldr	r3, [r7, #16]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd90      	pop	{r4, r7, pc}
 800a722:	bf00      	nop
 800a724:	08011a18 	.word	0x08011a18
 800a728:	08011a4c 	.word	0x08011a4c
 800a72c:	08011a6c 	.word	0x08011a6c
 800a730:	08011a94 	.word	0x08011a94
 800a734:	08011ab8 	.word	0x08011ab8

0800a738 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b08b      	sub	sp, #44	; 0x2c
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	61fb      	str	r3, [r7, #28]
 800a748:	2300      	movs	r3, #0
 800a74a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <tcp_split_unsent_seg+0x2c>
 800a756:	4b95      	ldr	r3, [pc, #596]	; (800a9ac <tcp_split_unsent_seg+0x274>)
 800a758:	f240 324b 	movw	r2, #843	; 0x34b
 800a75c:	4994      	ldr	r1, [pc, #592]	; (800a9b0 <tcp_split_unsent_seg+0x278>)
 800a75e:	4895      	ldr	r0, [pc, #596]	; (800a9b4 <tcp_split_unsent_seg+0x27c>)
 800a760:	f004 fb24 	bl	800edac <iprintf>

  useg = pcb->unsent;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a768:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
 800a774:	e116      	b.n	800a9a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a776:	887b      	ldrh	r3, [r7, #2]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d109      	bne.n	800a790 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a77c:	4b8b      	ldr	r3, [pc, #556]	; (800a9ac <tcp_split_unsent_seg+0x274>)
 800a77e:	f240 3253 	movw	r2, #851	; 0x353
 800a782:	498d      	ldr	r1, [pc, #564]	; (800a9b8 <tcp_split_unsent_seg+0x280>)
 800a784:	488b      	ldr	r0, [pc, #556]	; (800a9b4 <tcp_split_unsent_seg+0x27c>)
 800a786:	f004 fb11 	bl	800edac <iprintf>
    return ERR_VAL;
 800a78a:	f06f 0305 	mvn.w	r3, #5
 800a78e:	e109      	b.n	800a9a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	891b      	ldrh	r3, [r3, #8]
 800a794:	887a      	ldrh	r2, [r7, #2]
 800a796:	429a      	cmp	r2, r3
 800a798:	d301      	bcc.n	800a79e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	e102      	b.n	800a9a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7a2:	887a      	ldrh	r2, [r7, #2]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d906      	bls.n	800a7b6 <tcp_split_unsent_seg+0x7e>
 800a7a8:	4b80      	ldr	r3, [pc, #512]	; (800a9ac <tcp_split_unsent_seg+0x274>)
 800a7aa:	f240 325b 	movw	r2, #859	; 0x35b
 800a7ae:	4983      	ldr	r1, [pc, #524]	; (800a9bc <tcp_split_unsent_seg+0x284>)
 800a7b0:	4880      	ldr	r0, [pc, #512]	; (800a9b4 <tcp_split_unsent_seg+0x27c>)
 800a7b2:	f004 fafb 	bl	800edac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	891b      	ldrh	r3, [r3, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <tcp_split_unsent_seg+0x94>
 800a7be:	4b7b      	ldr	r3, [pc, #492]	; (800a9ac <tcp_split_unsent_seg+0x274>)
 800a7c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a7c4:	497e      	ldr	r1, [pc, #504]	; (800a9c0 <tcp_split_unsent_seg+0x288>)
 800a7c6:	487b      	ldr	r0, [pc, #492]	; (800a9b4 <tcp_split_unsent_seg+0x27c>)
 800a7c8:	f004 faf0 	bl	800edac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	7a9b      	ldrb	r3, [r3, #10]
 800a7d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	891a      	ldrh	r2, [r3, #8]
 800a7e2:	887b      	ldrh	r3, [r7, #2]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	89bb      	ldrh	r3, [r7, #12]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	2036      	movs	r0, #54	; 0x36
 800a7fa:	f7fb fabf 	bl	8005d7c <pbuf_alloc>
 800a7fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 80b7 	beq.w	800a976 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	891a      	ldrh	r2, [r3, #8]
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	891b      	ldrh	r3, [r3, #8]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	b29a      	uxth	r2, r3
 800a816:	887b      	ldrh	r3, [r7, #2]
 800a818:	4413      	add	r3, r2
 800a81a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	6858      	ldr	r0, [r3, #4]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	18d1      	adds	r1, r2, r3
 800a828:	897b      	ldrh	r3, [r7, #10]
 800a82a:	89ba      	ldrh	r2, [r7, #12]
 800a82c:	f7fb ff84 	bl	8006738 <pbuf_copy_partial>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	89bb      	ldrh	r3, [r7, #12]
 800a836:	4293      	cmp	r3, r2
 800a838:	f040 809f 	bne.w	800a97a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	899b      	ldrh	r3, [r3, #12]
 800a842:	b29b      	uxth	r3, r3
 800a844:	4618      	mov	r0, r3
 800a846:	f7fa fa1f 	bl	8004c88 <lwip_htons>
 800a84a:	4603      	mov	r3, r0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a852:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a854:	2300      	movs	r3, #0
 800a856:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a858:	7efb      	ldrb	r3, [r7, #27]
 800a85a:	f003 0308 	and.w	r3, r3, #8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a862:	7efb      	ldrb	r3, [r7, #27]
 800a864:	f023 0308 	bic.w	r3, r3, #8
 800a868:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a86a:	7ebb      	ldrb	r3, [r7, #26]
 800a86c:	f043 0308 	orr.w	r3, r3, #8
 800a870:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a872:	7efb      	ldrb	r3, [r7, #27]
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a87c:	7efb      	ldrb	r3, [r7, #27]
 800a87e:	f023 0301 	bic.w	r3, r3, #1
 800a882:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a884:	7ebb      	ldrb	r3, [r7, #26]
 800a886:	f043 0301 	orr.w	r3, r3, #1
 800a88a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4618      	mov	r0, r3
 800a894:	f7fa fa0d 	bl	8004cb2 <lwip_htonl>
 800a898:	4602      	mov	r2, r0
 800a89a:	887b      	ldrh	r3, [r7, #2]
 800a89c:	18d1      	adds	r1, r2, r3
 800a89e:	7eba      	ldrb	r2, [r7, #26]
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	6939      	ldr	r1, [r7, #16]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fea7 	bl	800a5fc <tcp_create_segment>
 800a8ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d063      	beq.n	800a97e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fb fdca 	bl	8006454 <pbuf_clen>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8ca:	1a9b      	subs	r3, r3, r2
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	6858      	ldr	r0, [r3, #4]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	891a      	ldrh	r2, [r3, #8]
 800a8de:	89bb      	ldrh	r3, [r7, #12]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f7fb fba7 	bl	8006038 <pbuf_realloc>
  useg->len -= remainder;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	891a      	ldrh	r2, [r3, #8]
 800a8ee:	89bb      	ldrh	r3, [r7, #12]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	899b      	ldrh	r3, [r3, #12]
 800a8fe:	b29c      	uxth	r4, r3
 800a900:	7efb      	ldrb	r3, [r7, #27]
 800a902:	b29b      	uxth	r3, r3
 800a904:	4618      	mov	r0, r3
 800a906:	f7fa f9bf 	bl	8004c88 <lwip_htons>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	4322      	orrs	r2, r4
 800a914:	b292      	uxth	r2, r2
 800a916:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fb fd99 	bl	8006454 <pbuf_clen>
 800a922:	4603      	mov	r3, r0
 800a924:	461a      	mov	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a92c:	4413      	add	r3, r2
 800a92e:	b29a      	uxth	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fb fd8a 	bl	8006454 <pbuf_clen>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a94a:	4413      	add	r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	69fa      	ldr	r2, [r7, #28]
 800a960:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	e016      	b.n	800a9a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a976:	bf00      	nop
 800a978:	e002      	b.n	800a980 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a97a:	bf00      	nop
 800a97c:	e000      	b.n	800a980 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a97e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d006      	beq.n	800a994 <tcp_split_unsent_seg+0x25c>
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <tcp_split_unsent_seg+0x274>)
 800a988:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a98c:	490d      	ldr	r1, [pc, #52]	; (800a9c4 <tcp_split_unsent_seg+0x28c>)
 800a98e:	4809      	ldr	r0, [pc, #36]	; (800a9b4 <tcp_split_unsent_seg+0x27c>)
 800a990:	f004 fa0c 	bl	800edac <iprintf>
  if (p != NULL) {
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f7fb fcd2 	bl	8006344 <pbuf_free>
  }

  return ERR_MEM;
 800a9a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3724      	adds	r7, #36	; 0x24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd90      	pop	{r4, r7, pc}
 800a9ac:	08011a18 	.word	0x08011a18
 800a9b0:	08011dac 	.word	0x08011dac
 800a9b4:	08011a6c 	.word	0x08011a6c
 800a9b8:	08011dd0 	.word	0x08011dd0
 800a9bc:	08011df4 	.word	0x08011df4
 800a9c0:	08011e04 	.word	0x08011e04
 800a9c4:	08011e14 	.word	0x08011e14

0800a9c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a9c8:	b590      	push	{r4, r7, lr}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <tcp_send_fin+0x1c>
 800a9d6:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <tcp_send_fin+0x94>)
 800a9d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a9dc:	4920      	ldr	r1, [pc, #128]	; (800aa60 <tcp_send_fin+0x98>)
 800a9de:	4821      	ldr	r0, [pc, #132]	; (800aa64 <tcp_send_fin+0x9c>)
 800a9e0:	f004 f9e4 	bl	800edac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d02e      	beq.n	800aa4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	e002      	b.n	800a9fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1f8      	bne.n	800a9f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	899b      	ldrh	r3, [r3, #12]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fa f93c 	bl	8004c88 <lwip_htons>
 800aa10:	4603      	mov	r3, r0
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d116      	bne.n	800aa4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	899b      	ldrh	r3, [r3, #12]
 800aa22:	b29c      	uxth	r4, r3
 800aa24:	2001      	movs	r0, #1
 800aa26:	f7fa f92f 	bl	8004c88 <lwip_htons>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	4322      	orrs	r2, r4
 800aa34:	b292      	uxth	r2, r2
 800aa36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	8b5b      	ldrh	r3, [r3, #26]
 800aa3c:	f043 0320 	orr.w	r3, r3, #32
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e004      	b.n	800aa54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f80b 	bl	800aa68 <tcp_enqueue_flags>
 800aa52:	4603      	mov	r3, r0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd90      	pop	{r4, r7, pc}
 800aa5c:	08011a18 	.word	0x08011a18
 800aa60:	08011e20 	.word	0x08011e20
 800aa64:	08011a6c 	.word	0x08011a6c

0800aa68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	; 0x28
 800aa6c:	af02      	add	r7, sp, #8
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <tcp_enqueue_flags+0x2c>
 800aa86:	4b67      	ldr	r3, [pc, #412]	; (800ac24 <tcp_enqueue_flags+0x1bc>)
 800aa88:	f240 4211 	movw	r2, #1041	; 0x411
 800aa8c:	4966      	ldr	r1, [pc, #408]	; (800ac28 <tcp_enqueue_flags+0x1c0>)
 800aa8e:	4867      	ldr	r0, [pc, #412]	; (800ac2c <tcp_enqueue_flags+0x1c4>)
 800aa90:	f004 f98c 	bl	800edac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <tcp_enqueue_flags+0x40>
 800aa9a:	4b62      	ldr	r3, [pc, #392]	; (800ac24 <tcp_enqueue_flags+0x1bc>)
 800aa9c:	f240 4213 	movw	r2, #1043	; 0x413
 800aaa0:	4963      	ldr	r1, [pc, #396]	; (800ac30 <tcp_enqueue_flags+0x1c8>)
 800aaa2:	4862      	ldr	r0, [pc, #392]	; (800ac2c <tcp_enqueue_flags+0x1c4>)
 800aaa4:	f004 f982 	bl	800edac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aab2:	2301      	movs	r3, #1
 800aab4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aab6:	7ffb      	ldrb	r3, [r7, #31]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aaca:	4619      	mov	r1, r3
 800aacc:	2036      	movs	r0, #54	; 0x36
 800aace:	f7fb f955 	bl	8005d7c <pbuf_alloc>
 800aad2:	6138      	str	r0, [r7, #16]
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d109      	bne.n	800aaee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	8b5b      	ldrh	r3, [r3, #26]
 800aade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295
 800aaec:	e095      	b.n	800ac1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	895a      	ldrh	r2, [r3, #10]
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d206      	bcs.n	800ab08 <tcp_enqueue_flags+0xa0>
 800aafa:	4b4a      	ldr	r3, [pc, #296]	; (800ac24 <tcp_enqueue_flags+0x1bc>)
 800aafc:	f240 4239 	movw	r2, #1081	; 0x439
 800ab00:	494c      	ldr	r1, [pc, #304]	; (800ac34 <tcp_enqueue_flags+0x1cc>)
 800ab02:	484a      	ldr	r0, [pc, #296]	; (800ac2c <tcp_enqueue_flags+0x1c4>)
 800ab04:	f004 f952 	bl	800edac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ab0c:	78fa      	ldrb	r2, [r7, #3]
 800ab0e:	7ffb      	ldrb	r3, [r7, #31]
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	460b      	mov	r3, r1
 800ab14:	6939      	ldr	r1, [r7, #16]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fd70 	bl	800a5fc <tcp_create_segment>
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d109      	bne.n	800ab38 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	8b5b      	ldrh	r3, [r3, #26]
 800ab28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab32:	f04f 33ff 	mov.w	r3, #4294967295
 800ab36:	e070      	b.n	800ac1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f003 0303 	and.w	r3, r3, #3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <tcp_enqueue_flags+0xea>
 800ab44:	4b37      	ldr	r3, [pc, #220]	; (800ac24 <tcp_enqueue_flags+0x1bc>)
 800ab46:	f240 4242 	movw	r2, #1090	; 0x442
 800ab4a:	493b      	ldr	r1, [pc, #236]	; (800ac38 <tcp_enqueue_flags+0x1d0>)
 800ab4c:	4837      	ldr	r0, [pc, #220]	; (800ac2c <tcp_enqueue_flags+0x1c4>)
 800ab4e:	f004 f92d 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	891b      	ldrh	r3, [r3, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d006      	beq.n	800ab68 <tcp_enqueue_flags+0x100>
 800ab5a:	4b32      	ldr	r3, [pc, #200]	; (800ac24 <tcp_enqueue_flags+0x1bc>)
 800ab5c:	f240 4243 	movw	r2, #1091	; 0x443
 800ab60:	4936      	ldr	r1, [pc, #216]	; (800ac3c <tcp_enqueue_flags+0x1d4>)
 800ab62:	4832      	ldr	r0, [pc, #200]	; (800ac2c <tcp_enqueue_flags+0x1c4>)
 800ab64:	f004 f922 	bl	800edac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d103      	bne.n	800ab78 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab76:	e00d      	b.n	800ab94 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab7c:	61bb      	str	r3, [r7, #24]
 800ab7e:	e002      	b.n	800ab86 <tcp_enqueue_flags+0x11e>
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	61bb      	str	r3, [r7, #24]
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f8      	bne.n	800ab80 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <tcp_enqueue_flags+0x148>
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b00      	cmp	r3, #0
 800abae:	d004      	beq.n	800abba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d006      	beq.n	800abd2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	8b5b      	ldrh	r3, [r3, #26]
 800abc8:	f043 0320 	orr.w	r3, r3, #32
 800abcc:	b29a      	uxth	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fb fc3c 	bl	8006454 <pbuf_clen>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abe6:	4413      	add	r3, r2
 800abe8:	b29a      	uxth	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00e      	beq.n	800ac18 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <tcp_enqueue_flags+0x1b0>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <tcp_enqueue_flags+0x1b0>
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <tcp_enqueue_flags+0x1bc>)
 800ac0c:	f240 4265 	movw	r2, #1125	; 0x465
 800ac10:	490b      	ldr	r1, [pc, #44]	; (800ac40 <tcp_enqueue_flags+0x1d8>)
 800ac12:	4806      	ldr	r0, [pc, #24]	; (800ac2c <tcp_enqueue_flags+0x1c4>)
 800ac14:	f004 f8ca 	bl	800edac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3720      	adds	r7, #32
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	08011a18 	.word	0x08011a18
 800ac28:	08011e3c 	.word	0x08011e3c
 800ac2c:	08011a6c 	.word	0x08011a6c
 800ac30:	08011e94 	.word	0x08011e94
 800ac34:	08011eb4 	.word	0x08011eb4
 800ac38:	08011ef0 	.word	0x08011ef0
 800ac3c:	08011f08 	.word	0x08011f08
 800ac40:	08011f34 	.word	0x08011f34

0800ac44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ac44:	b5b0      	push	{r4, r5, r7, lr}
 800ac46:	b08a      	sub	sp, #40	; 0x28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d106      	bne.n	800ac60 <tcp_output+0x1c>
 800ac52:	4b9e      	ldr	r3, [pc, #632]	; (800aecc <tcp_output+0x288>)
 800ac54:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ac58:	499d      	ldr	r1, [pc, #628]	; (800aed0 <tcp_output+0x28c>)
 800ac5a:	489e      	ldr	r0, [pc, #632]	; (800aed4 <tcp_output+0x290>)
 800ac5c:	f004 f8a6 	bl	800edac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d106      	bne.n	800ac76 <tcp_output+0x32>
 800ac68:	4b98      	ldr	r3, [pc, #608]	; (800aecc <tcp_output+0x288>)
 800ac6a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ac6e:	499a      	ldr	r1, [pc, #616]	; (800aed8 <tcp_output+0x294>)
 800ac70:	4898      	ldr	r0, [pc, #608]	; (800aed4 <tcp_output+0x290>)
 800ac72:	f004 f89b 	bl	800edac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ac76:	4b99      	ldr	r3, [pc, #612]	; (800aedc <tcp_output+0x298>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d101      	bne.n	800ac84 <tcp_output+0x40>
    return ERR_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e1ce      	b.n	800b022 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac90:	4293      	cmp	r3, r2
 800ac92:	bf28      	it	cs
 800ac94:	4613      	movcs	r3, r2
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10b      	bne.n	800acbe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	8b5b      	ldrh	r3, [r3, #26]
 800acaa:	f003 0302 	and.w	r3, r3, #2
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 81aa 	beq.w	800b008 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fdcb 	bl	800b850 <tcp_send_empty_ack>
 800acba:	4603      	mov	r3, r0
 800acbc:	e1b1      	b.n	800b022 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3304      	adds	r3, #4
 800acc4:	461a      	mov	r2, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff fc7c 	bl	800a5c4 <tcp_route>
 800accc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <tcp_output+0x96>
    return ERR_RTE;
 800acd4:	f06f 0303 	mvn.w	r3, #3
 800acd8:	e1a3      	b.n	800b022 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <tcp_output+0xa4>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d111      	bne.n	800ad0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d002      	beq.n	800acf4 <tcp_output+0xb0>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	3304      	adds	r3, #4
 800acf2:	e000      	b.n	800acf6 <tcp_output+0xb2>
 800acf4:	2300      	movs	r3, #0
 800acf6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d102      	bne.n	800ad04 <tcp_output+0xc0>
      return ERR_RTE;
 800acfe:	f06f 0303 	mvn.w	r3, #3
 800ad02:	e18e      	b.n	800b022 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f9 ffcd 	bl	8004cb2 <lwip_htonl>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad22:	8912      	ldrh	r2, [r2, #8]
 800ad24:	4413      	add	r3, r2
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d227      	bcs.n	800ad7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad32:	461a      	mov	r2, r3
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d114      	bne.n	800ad64 <tcp_output+0x120>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d110      	bne.n	800ad64 <tcp_output+0x120>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8b5b      	ldrh	r3, [r3, #26]
 800ad68:	f003 0302 	and.w	r3, r3, #2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 814d 	beq.w	800b00c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fd6c 	bl	800b850 <tcp_send_empty_ack>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	e152      	b.n	800b022 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 811c 	beq.w	800afca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ad92:	e002      	b.n	800ad9a <tcp_output+0x156>
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	623b      	str	r3, [r7, #32]
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f8      	bne.n	800ad94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ada2:	e112      	b.n	800afca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	899b      	ldrh	r3, [r3, #12]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	4618      	mov	r0, r3
 800adae:	f7f9 ff6b 	bl	8004c88 <lwip_htons>
 800adb2:	4603      	mov	r3, r0
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d006      	beq.n	800adcc <tcp_output+0x188>
 800adbe:	4b43      	ldr	r3, [pc, #268]	; (800aecc <tcp_output+0x288>)
 800adc0:	f240 5236 	movw	r2, #1334	; 0x536
 800adc4:	4946      	ldr	r1, [pc, #280]	; (800aee0 <tcp_output+0x29c>)
 800adc6:	4843      	ldr	r0, [pc, #268]	; (800aed4 <tcp_output+0x290>)
 800adc8:	f003 fff0 	bl	800edac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add0:	2b00      	cmp	r3, #0
 800add2:	d01f      	beq.n	800ae14 <tcp_output+0x1d0>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	8b5b      	ldrh	r3, [r3, #26]
 800add8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800addc:	2b00      	cmp	r3, #0
 800adde:	d119      	bne.n	800ae14 <tcp_output+0x1d0>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <tcp_output+0x1bc>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d110      	bne.n	800ae14 <tcp_output+0x1d0>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf6:	891a      	ldrh	r2, [r3, #8]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d209      	bcs.n	800ae14 <tcp_output+0x1d0>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <tcp_output+0x1d0>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d901      	bls.n	800ae18 <tcp_output+0x1d4>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e000      	b.n	800ae1a <tcp_output+0x1d6>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d106      	bne.n	800ae2c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	8b5b      	ldrh	r3, [r3, #26]
 800ae22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 80e4 	beq.w	800aff4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d00d      	beq.n	800ae50 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	899b      	ldrh	r3, [r3, #12]
 800ae3a:	b29c      	uxth	r4, r3
 800ae3c:	2010      	movs	r0, #16
 800ae3e:	f7f9 ff23 	bl	8004c88 <lwip_htons>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	4322      	orrs	r2, r4
 800ae4c:	b292      	uxth	r2, r2
 800ae4e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae56:	f000 f909 	bl	800b06c <tcp_output_segment>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d009      	beq.n	800ae7a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	8b5b      	ldrh	r3, [r3, #26]
 800ae6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	835a      	strh	r2, [r3, #26]
      return err;
 800ae74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae78:	e0d3      	b.n	800b022 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7d1b      	ldrb	r3, [r3, #20]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d006      	beq.n	800ae98 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	8b5b      	ldrh	r3, [r3, #26]
 800ae8e:	f023 0303 	bic.w	r3, r3, #3
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f9 ff07 	bl	8004cb2 <lwip_htonl>
 800aea4:	4604      	mov	r4, r0
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	891b      	ldrh	r3, [r3, #8]
 800aeaa:	461d      	mov	r5, r3
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	899b      	ldrh	r3, [r3, #12]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7f9 fee7 	bl	8004c88 <lwip_htons>
 800aeba:	4603      	mov	r3, r0
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <tcp_output+0x2a0>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e00d      	b.n	800aee6 <tcp_output+0x2a2>
 800aeca:	bf00      	nop
 800aecc:	08011a18 	.word	0x08011a18
 800aed0:	08011f5c 	.word	0x08011f5c
 800aed4:	08011a6c 	.word	0x08011a6c
 800aed8:	08011f74 	.word	0x08011f74
 800aedc:	20008428 	.word	0x20008428
 800aee0:	08011f9c 	.word	0x08011f9c
 800aee4:	2300      	movs	r3, #0
 800aee6:	442b      	add	r3, r5
 800aee8:	4423      	add	r3, r4
 800aeea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	da02      	bge.n	800aefe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	891b      	ldrh	r3, [r3, #8]
 800af02:	461c      	mov	r4, r3
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	899b      	ldrh	r3, [r3, #12]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7f9 febb 	bl	8004c88 <lwip_htons>
 800af12:	4603      	mov	r3, r0
 800af14:	b2db      	uxtb	r3, r3
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <tcp_output+0x2de>
 800af1e:	2301      	movs	r3, #1
 800af20:	e000      	b.n	800af24 <tcp_output+0x2e0>
 800af22:	2300      	movs	r3, #0
 800af24:	4423      	add	r3, r4
 800af26:	2b00      	cmp	r3, #0
 800af28:	d049      	beq.n	800afbe <tcp_output+0x37a>
      seg->next = NULL;
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	2200      	movs	r2, #0
 800af2e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af34:	2b00      	cmp	r3, #0
 800af36:	d105      	bne.n	800af44 <tcp_output+0x300>
        pcb->unacked = seg;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	623b      	str	r3, [r7, #32]
 800af42:	e03f      	b.n	800afc4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f9 feb1 	bl	8004cb2 <lwip_htonl>
 800af50:	4604      	mov	r4, r0
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f9 feaa 	bl	8004cb2 <lwip_htonl>
 800af5e:	4603      	mov	r3, r0
 800af60:	1ae3      	subs	r3, r4, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	da24      	bge.n	800afb0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3370      	adds	r3, #112	; 0x70
 800af6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af6c:	e002      	b.n	800af74 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d011      	beq.n	800afa0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	4618      	mov	r0, r3
 800af86:	f7f9 fe94 	bl	8004cb2 <lwip_htonl>
 800af8a:	4604      	mov	r4, r0
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	f7f9 fe8d 	bl	8004cb2 <lwip_htonl>
 800af98:	4603      	mov	r3, r0
 800af9a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dbe6      	blt.n	800af6e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e009      	b.n	800afc4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	623b      	str	r3, [r7, #32]
 800afbc:	e002      	b.n	800afc4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800afbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afc0:	f7fc fc43 	bl	800784a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d012      	beq.n	800aff6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f9 fe6b 	bl	8004cb2 <lwip_htonl>
 800afdc:	4602      	mov	r2, r0
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe6:	8912      	ldrh	r2, [r2, #8]
 800afe8:	4413      	add	r3, r2
  while (seg != NULL &&
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	429a      	cmp	r2, r3
 800afee:	f4bf aed9 	bcs.w	800ada4 <tcp_output+0x160>
 800aff2:	e000      	b.n	800aff6 <tcp_output+0x3b2>
      break;
 800aff4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800affa:	2b00      	cmp	r3, #0
 800affc:	d108      	bne.n	800b010 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b006:	e004      	b.n	800b012 <tcp_output+0x3ce>
    goto output_done;
 800b008:	bf00      	nop
 800b00a:	e002      	b.n	800b012 <tcp_output+0x3ce>
    goto output_done;
 800b00c:	bf00      	nop
 800b00e:	e000      	b.n	800b012 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b010:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8b5b      	ldrh	r3, [r3, #26]
 800b016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3728      	adds	r7, #40	; 0x28
 800b026:	46bd      	mov	sp, r7
 800b028:	bdb0      	pop	{r4, r5, r7, pc}
 800b02a:	bf00      	nop

0800b02c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d106      	bne.n	800b048 <tcp_output_segment_busy+0x1c>
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <tcp_output_segment_busy+0x34>)
 800b03c:	f240 529a 	movw	r2, #1434	; 0x59a
 800b040:	4908      	ldr	r1, [pc, #32]	; (800b064 <tcp_output_segment_busy+0x38>)
 800b042:	4809      	ldr	r0, [pc, #36]	; (800b068 <tcp_output_segment_busy+0x3c>)
 800b044:	f003 feb2 	bl	800edac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	7b9b      	ldrb	r3, [r3, #14]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d001      	beq.n	800b056 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b052:	2301      	movs	r3, #1
 800b054:	e000      	b.n	800b058 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	08011a18 	.word	0x08011a18
 800b064:	08011fb4 	.word	0x08011fb4
 800b068:	08011a6c 	.word	0x08011a6c

0800b06c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b06c:	b5b0      	push	{r4, r5, r7, lr}
 800b06e:	b08c      	sub	sp, #48	; 0x30
 800b070:	af04      	add	r7, sp, #16
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d106      	bne.n	800b08c <tcp_output_segment+0x20>
 800b07e:	4b63      	ldr	r3, [pc, #396]	; (800b20c <tcp_output_segment+0x1a0>)
 800b080:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b084:	4962      	ldr	r1, [pc, #392]	; (800b210 <tcp_output_segment+0x1a4>)
 800b086:	4863      	ldr	r0, [pc, #396]	; (800b214 <tcp_output_segment+0x1a8>)
 800b088:	f003 fe90 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <tcp_output_segment+0x34>
 800b092:	4b5e      	ldr	r3, [pc, #376]	; (800b20c <tcp_output_segment+0x1a0>)
 800b094:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b098:	495f      	ldr	r1, [pc, #380]	; (800b218 <tcp_output_segment+0x1ac>)
 800b09a:	485e      	ldr	r0, [pc, #376]	; (800b214 <tcp_output_segment+0x1a8>)
 800b09c:	f003 fe86 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <tcp_output_segment+0x48>
 800b0a6:	4b59      	ldr	r3, [pc, #356]	; (800b20c <tcp_output_segment+0x1a0>)
 800b0a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b0ac:	495b      	ldr	r1, [pc, #364]	; (800b21c <tcp_output_segment+0x1b0>)
 800b0ae:	4859      	ldr	r0, [pc, #356]	; (800b214 <tcp_output_segment+0x1a8>)
 800b0b0:	f003 fe7c 	bl	800edac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff ffb9 	bl	800b02c <tcp_output_segment_busy>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e09f      	b.n	800b204 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	68dc      	ldr	r4, [r3, #12]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f7f9 fdf0 	bl	8004cb2 <lwip_htonl>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68dc      	ldr	r4, [r3, #12]
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f7f9 fdd2 	bl	8004c88 <lwip_htons>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b0f0:	441a      	add	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	3314      	adds	r3, #20
 800b0fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	7a9b      	ldrb	r3, [r3, #10]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d015      	beq.n	800b136 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	3304      	adds	r3, #4
 800b10e:	461a      	mov	r2, r3
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b116:	f7fc fe8f 	bl	8007e38 <tcp_eff_send_mss_netif>
 800b11a:	4603      	mov	r3, r0
 800b11c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b11e:	8b7b      	ldrh	r3, [r7, #26]
 800b120:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b124:	4618      	mov	r0, r3
 800b126:	f7f9 fdc4 	bl	8004cb2 <lwip_htonl>
 800b12a:	4602      	mov	r2, r0
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	3304      	adds	r3, #4
 800b134:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	da02      	bge.n	800b146 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2200      	movs	r2, #0
 800b144:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10c      	bne.n	800b168 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b14e:	4b34      	ldr	r3, [pc, #208]	; (800b220 <tcp_output_segment+0x1b4>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7f9 fda8 	bl	8004cb2 <lwip_htonl>
 800b162:	4602      	mov	r2, r0
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	8959      	ldrh	r1, [r3, #10]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	8b3a      	ldrh	r2, [r7, #24]
 800b182:	1a8a      	subs	r2, r1, r2
 800b184:	b292      	uxth	r2, r2
 800b186:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	8919      	ldrh	r1, [r3, #8]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	8b3a      	ldrh	r2, [r7, #24]
 800b194:	1a8a      	subs	r2, r1, r2
 800b196:	b292      	uxth	r2, r2
 800b198:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	68d2      	ldr	r2, [r2, #12]
 800b1a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	741a      	strb	r2, [r3, #16]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f103 0214 	add.w	r2, r3, #20
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	7a9b      	ldrb	r3, [r3, #10]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	f003 0304 	and.w	r3, r3, #4
 800b1c2:	4413      	add	r3, r2
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d006      	beq.n	800b1d8 <tcp_output_segment+0x16c>
 800b1ca:	4b10      	ldr	r3, [pc, #64]	; (800b20c <tcp_output_segment+0x1a0>)
 800b1cc:	f240 621c 	movw	r2, #1564	; 0x61c
 800b1d0:	4914      	ldr	r1, [pc, #80]	; (800b224 <tcp_output_segment+0x1b8>)
 800b1d2:	4810      	ldr	r0, [pc, #64]	; (800b214 <tcp_output_segment+0x1a8>)
 800b1d4:	f003 fdea 	bl	800edac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6858      	ldr	r0, [r3, #4]
 800b1dc:	68b9      	ldr	r1, [r7, #8]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	1d1c      	adds	r4, r3, #4
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	7add      	ldrb	r5, [r3, #11]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	7a9b      	ldrb	r3, [r3, #10]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	9202      	str	r2, [sp, #8]
 800b1ee:	2206      	movs	r2, #6
 800b1f0:	9201      	str	r2, [sp, #4]
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	f002 fd4e 	bl	800dc98 <ip4_output_if>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b200:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3720      	adds	r7, #32
 800b208:	46bd      	mov	sp, r7
 800b20a:	bdb0      	pop	{r4, r5, r7, pc}
 800b20c:	08011a18 	.word	0x08011a18
 800b210:	08011fdc 	.word	0x08011fdc
 800b214:	08011a6c 	.word	0x08011a6c
 800b218:	08011ffc 	.word	0x08011ffc
 800b21c:	0801201c 	.word	0x0801201c
 800b220:	20008418 	.word	0x20008418
 800b224:	08012040 	.word	0x08012040

0800b228 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b228:	b5b0      	push	{r4, r5, r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d106      	bne.n	800b244 <tcp_rexmit_rto_prepare+0x1c>
 800b236:	4b31      	ldr	r3, [pc, #196]	; (800b2fc <tcp_rexmit_rto_prepare+0xd4>)
 800b238:	f240 6263 	movw	r2, #1635	; 0x663
 800b23c:	4930      	ldr	r1, [pc, #192]	; (800b300 <tcp_rexmit_rto_prepare+0xd8>)
 800b23e:	4831      	ldr	r0, [pc, #196]	; (800b304 <tcp_rexmit_rto_prepare+0xdc>)
 800b240:	f003 fdb4 	bl	800edac <iprintf>

  if (pcb->unacked == NULL) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d102      	bne.n	800b252 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b24c:	f06f 0305 	mvn.w	r3, #5
 800b250:	e050      	b.n	800b2f4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	e00b      	b.n	800b272 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff fee6 	bl	800b02c <tcp_output_segment_busy>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b266:	f06f 0305 	mvn.w	r3, #5
 800b26a:	e043      	b.n	800b2f4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1ef      	bne.n	800b25a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f7ff fed6 	bl	800b02c <tcp_output_segment_busy>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b286:	f06f 0305 	mvn.w	r3, #5
 800b28a:	e033      	b.n	800b2f4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	8b5b      	ldrh	r3, [r3, #26]
 800b2a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7f9 fcfb 	bl	8004cb2 <lwip_htonl>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	891b      	ldrh	r3, [r3, #8]
 800b2c2:	461d      	mov	r5, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	899b      	ldrh	r3, [r3, #12]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7f9 fcdb 	bl	8004c88 <lwip_htons>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <tcp_rexmit_rto_prepare+0xba>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <tcp_rexmit_rto_prepare+0xbc>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	442b      	add	r3, r5
 800b2e6:	18e2      	adds	r2, r4, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b2fc:	08011a18 	.word	0x08011a18
 800b300:	08012054 	.word	0x08012054
 800b304:	08011a6c 	.word	0x08011a6c

0800b308 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <tcp_rexmit_rto_commit+0x1c>
 800b316:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <tcp_rexmit_rto_commit+0x44>)
 800b318:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b31c:	490c      	ldr	r1, [pc, #48]	; (800b350 <tcp_rexmit_rto_commit+0x48>)
 800b31e:	480d      	ldr	r0, [pc, #52]	; (800b354 <tcp_rexmit_rto_commit+0x4c>)
 800b320:	f003 fd44 	bl	800edac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b32a:	2bff      	cmp	r3, #255	; 0xff
 800b32c:	d007      	beq.n	800b33e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b334:	3301      	adds	r3, #1
 800b336:	b2da      	uxtb	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fc80 	bl	800ac44 <tcp_output>
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	08011a18 	.word	0x08011a18
 800b350:	08012078 	.word	0x08012078
 800b354:	08011a6c 	.word	0x08011a6c

0800b358 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <tcp_rexmit_rto+0x1c>
 800b366:	4b0a      	ldr	r3, [pc, #40]	; (800b390 <tcp_rexmit_rto+0x38>)
 800b368:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b36c:	4909      	ldr	r1, [pc, #36]	; (800b394 <tcp_rexmit_rto+0x3c>)
 800b36e:	480a      	ldr	r0, [pc, #40]	; (800b398 <tcp_rexmit_rto+0x40>)
 800b370:	f003 fd1c 	bl	800edac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff ff57 	bl	800b228 <tcp_rexmit_rto_prepare>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7ff ffc1 	bl	800b308 <tcp_rexmit_rto_commit>
  }
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	08011a18 	.word	0x08011a18
 800b394:	0801209c 	.word	0x0801209c
 800b398:	08011a6c 	.word	0x08011a6c

0800b39c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b39c:	b590      	push	{r4, r7, lr}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d106      	bne.n	800b3b8 <tcp_rexmit+0x1c>
 800b3aa:	4b2f      	ldr	r3, [pc, #188]	; (800b468 <tcp_rexmit+0xcc>)
 800b3ac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b3b0:	492e      	ldr	r1, [pc, #184]	; (800b46c <tcp_rexmit+0xd0>)
 800b3b2:	482f      	ldr	r0, [pc, #188]	; (800b470 <tcp_rexmit+0xd4>)
 800b3b4:	f003 fcfa 	bl	800edac <iprintf>

  if (pcb->unacked == NULL) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b3c0:	f06f 0305 	mvn.w	r3, #5
 800b3c4:	e04c      	b.n	800b460 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b3cc:	68b8      	ldr	r0, [r7, #8]
 800b3ce:	f7ff fe2d 	bl	800b02c <tcp_output_segment_busy>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b3d8:	f06f 0305 	mvn.w	r3, #5
 800b3dc:	e040      	b.n	800b460 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	336c      	adds	r3, #108	; 0x6c
 800b3ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3ec:	e002      	b.n	800b3f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d011      	beq.n	800b420 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	f7f9 fc54 	bl	8004cb2 <lwip_htonl>
 800b40a:	4604      	mov	r4, r0
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4618      	mov	r0, r3
 800b414:	f7f9 fc4d 	bl	8004cb2 <lwip_htonl>
 800b418:	4603      	mov	r3, r0
 800b41a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dbe6      	blt.n	800b3ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d103      	bne.n	800b43e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b444:	2bff      	cmp	r3, #255	; 0xff
 800b446:	d007      	beq.n	800b458 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b44e:	3301      	adds	r3, #1
 800b450:	b2da      	uxtb	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	bd90      	pop	{r4, r7, pc}
 800b468:	08011a18 	.word	0x08011a18
 800b46c:	080120b8 	.word	0x080120b8
 800b470:	08011a6c 	.word	0x08011a6c

0800b474 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d106      	bne.n	800b490 <tcp_rexmit_fast+0x1c>
 800b482:	4b2a      	ldr	r3, [pc, #168]	; (800b52c <tcp_rexmit_fast+0xb8>)
 800b484:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b488:	4929      	ldr	r1, [pc, #164]	; (800b530 <tcp_rexmit_fast+0xbc>)
 800b48a:	482a      	ldr	r0, [pc, #168]	; (800b534 <tcp_rexmit_fast+0xc0>)
 800b48c:	f003 fc8e 	bl	800edac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b494:	2b00      	cmp	r3, #0
 800b496:	d044      	beq.n	800b522 <tcp_rexmit_fast+0xae>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	8b5b      	ldrh	r3, [r3, #26]
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d13e      	bne.n	800b522 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ff79 	bl	800b39c <tcp_rexmit>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d138      	bne.n	800b522 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	bf28      	it	cs
 800b4c0:	4613      	movcs	r3, r2
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	0fda      	lsrs	r2, r3, #31
 800b4c6:	4413      	add	r3, r2
 800b4c8:	105b      	asrs	r3, r3, #1
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b4d8:	461a      	mov	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d206      	bcs.n	800b4f2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	0049      	lsls	r1, r1, #1
 800b500:	440b      	add	r3, r1
 800b502:	b29b      	uxth	r3, r3
 800b504:	4413      	add	r3, r2
 800b506:	b29a      	uxth	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	8b5b      	ldrh	r3, [r3, #26]
 800b512:	f043 0304 	orr.w	r3, r3, #4
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	08011a18 	.word	0x08011a18
 800b530:	080120d0 	.word	0x080120d0
 800b534:	08011a6c 	.word	0x08011a6c

0800b538 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	607b      	str	r3, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	817b      	strh	r3, [r7, #10]
 800b546:	4613      	mov	r3, r2
 800b548:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b54a:	897a      	ldrh	r2, [r7, #10]
 800b54c:	893b      	ldrh	r3, [r7, #8]
 800b54e:	4413      	add	r3, r2
 800b550:	b29b      	uxth	r3, r3
 800b552:	3314      	adds	r3, #20
 800b554:	b29b      	uxth	r3, r3
 800b556:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b55a:	4619      	mov	r1, r3
 800b55c:	2022      	movs	r0, #34	; 0x22
 800b55e:	f7fa fc0d 	bl	8005d7c <pbuf_alloc>
 800b562:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d04d      	beq.n	800b606 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b56a:	897b      	ldrh	r3, [r7, #10]
 800b56c:	3313      	adds	r3, #19
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	8952      	ldrh	r2, [r2, #10]
 800b572:	4293      	cmp	r3, r2
 800b574:	db06      	blt.n	800b584 <tcp_output_alloc_header_common+0x4c>
 800b576:	4b26      	ldr	r3, [pc, #152]	; (800b610 <tcp_output_alloc_header_common+0xd8>)
 800b578:	f240 7223 	movw	r2, #1827	; 0x723
 800b57c:	4925      	ldr	r1, [pc, #148]	; (800b614 <tcp_output_alloc_header_common+0xdc>)
 800b57e:	4826      	ldr	r0, [pc, #152]	; (800b618 <tcp_output_alloc_header_common+0xe0>)
 800b580:	f003 fc14 	bl	800edac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b58a:	8c3b      	ldrh	r3, [r7, #32]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7f9 fb7b 	bl	8004c88 <lwip_htons>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b59a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7f9 fb73 	bl	8004c88 <lwip_htons>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7f9 fb7e 	bl	8004cb2 <lwip_htonl>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b5bc:	897b      	ldrh	r3, [r7, #10]
 800b5be:	089b      	lsrs	r3, r3, #2
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	3305      	adds	r3, #5
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	031b      	lsls	r3, r3, #12
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7f9 fb57 	bl	8004c88 <lwip_htons>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	461a      	mov	r2, r3
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b5e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f9 fb4f 	bl	8004c88 <lwip_htons>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	741a      	strb	r2, [r3, #16]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2200      	movs	r2, #0
 800b600:	749a      	strb	r2, [r3, #18]
 800b602:	2200      	movs	r2, #0
 800b604:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b606:	697b      	ldr	r3, [r7, #20]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	08011a18 	.word	0x08011a18
 800b614:	080120f0 	.word	0x080120f0
 800b618:	08011a6c 	.word	0x08011a6c

0800b61c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b61c:	b5b0      	push	{r4, r5, r7, lr}
 800b61e:	b08a      	sub	sp, #40	; 0x28
 800b620:	af04      	add	r7, sp, #16
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	460b      	mov	r3, r1
 800b628:	817b      	strh	r3, [r7, #10]
 800b62a:	4613      	mov	r3, r2
 800b62c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d106      	bne.n	800b642 <tcp_output_alloc_header+0x26>
 800b634:	4b15      	ldr	r3, [pc, #84]	; (800b68c <tcp_output_alloc_header+0x70>)
 800b636:	f240 7242 	movw	r2, #1858	; 0x742
 800b63a:	4915      	ldr	r1, [pc, #84]	; (800b690 <tcp_output_alloc_header+0x74>)
 800b63c:	4815      	ldr	r0, [pc, #84]	; (800b694 <tcp_output_alloc_header+0x78>)
 800b63e:	f003 fbb5 	bl	800edac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	8adb      	ldrh	r3, [r3, #22]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	8b12      	ldrh	r2, [r2, #24]
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b652:	893d      	ldrh	r5, [r7, #8]
 800b654:	897c      	ldrh	r4, [r7, #10]
 800b656:	9103      	str	r1, [sp, #12]
 800b658:	2110      	movs	r1, #16
 800b65a:	9102      	str	r1, [sp, #8]
 800b65c:	9201      	str	r2, [sp, #4]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	462a      	mov	r2, r5
 800b664:	4621      	mov	r1, r4
 800b666:	f7ff ff67 	bl	800b538 <tcp_output_alloc_header_common>
 800b66a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d006      	beq.n	800b680 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b67a:	441a      	add	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b680:	697b      	ldr	r3, [r7, #20]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bdb0      	pop	{r4, r5, r7, pc}
 800b68a:	bf00      	nop
 800b68c:	08011a18 	.word	0x08011a18
 800b690:	08012120 	.word	0x08012120
 800b694:	08011a6c 	.word	0x08011a6c

0800b698 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	71fb      	strb	r3, [r7, #7]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <tcp_output_fill_options+0x2e>
 800b6b8:	4b13      	ldr	r3, [pc, #76]	; (800b708 <tcp_output_fill_options+0x70>)
 800b6ba:	f240 7256 	movw	r2, #1878	; 0x756
 800b6be:	4913      	ldr	r1, [pc, #76]	; (800b70c <tcp_output_fill_options+0x74>)
 800b6c0:	4813      	ldr	r0, [pc, #76]	; (800b710 <tcp_output_fill_options+0x78>)
 800b6c2:	f003 fb73 	bl	800edac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	3314      	adds	r3, #20
 800b6d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	f103 0214 	add.w	r2, r3, #20
 800b6d8:	8bfb      	ldrh	r3, [r7, #30]
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4619      	mov	r1, r3
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	f003 0304 	and.w	r3, r3, #4
 800b6e6:	440b      	add	r3, r1
 800b6e8:	4413      	add	r3, r2
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d006      	beq.n	800b6fe <tcp_output_fill_options+0x66>
 800b6f0:	4b05      	ldr	r3, [pc, #20]	; (800b708 <tcp_output_fill_options+0x70>)
 800b6f2:	f240 7275 	movw	r2, #1909	; 0x775
 800b6f6:	4907      	ldr	r1, [pc, #28]	; (800b714 <tcp_output_fill_options+0x7c>)
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <tcp_output_fill_options+0x78>)
 800b6fa:	f003 fb57 	bl	800edac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b6fe:	bf00      	nop
 800b700:	3720      	adds	r7, #32
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	08011a18 	.word	0x08011a18
 800b70c:	08012148 	.word	0x08012148
 800b710:	08011a6c 	.word	0x08011a6c
 800b714:	08012040 	.word	0x08012040

0800b718 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08a      	sub	sp, #40	; 0x28
 800b71c:	af04      	add	r7, sp, #16
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <tcp_output_control_segment+0x22>
 800b72c:	4b1c      	ldr	r3, [pc, #112]	; (800b7a0 <tcp_output_control_segment+0x88>)
 800b72e:	f240 7287 	movw	r2, #1927	; 0x787
 800b732:	491c      	ldr	r1, [pc, #112]	; (800b7a4 <tcp_output_control_segment+0x8c>)
 800b734:	481c      	ldr	r0, [pc, #112]	; (800b7a8 <tcp_output_control_segment+0x90>)
 800b736:	f003 fb39 	bl	800edac <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7fe ff40 	bl	800a5c4 <tcp_route>
 800b744:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b74c:	23fc      	movs	r3, #252	; 0xfc
 800b74e:	75fb      	strb	r3, [r7, #23]
 800b750:	e01c      	b.n	800b78c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d006      	beq.n	800b766 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	7adb      	ldrb	r3, [r3, #11]
 800b75c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	7a9b      	ldrb	r3, [r3, #10]
 800b762:	757b      	strb	r3, [r7, #21]
 800b764:	e003      	b.n	800b76e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b766:	23ff      	movs	r3, #255	; 0xff
 800b768:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b76e:	7dba      	ldrb	r2, [r7, #22]
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	2306      	movs	r3, #6
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	7d7b      	ldrb	r3, [r7, #21]
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	4613      	mov	r3, r2
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	6879      	ldr	r1, [r7, #4]
 800b782:	68b8      	ldr	r0, [r7, #8]
 800b784:	f002 fa88 	bl	800dc98 <ip4_output_if>
 800b788:	4603      	mov	r3, r0
 800b78a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b78c:	68b8      	ldr	r0, [r7, #8]
 800b78e:	f7fa fdd9 	bl	8006344 <pbuf_free>
  return err;
 800b792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	08011a18 	.word	0x08011a18
 800b7a4:	08012170 	.word	0x08012170
 800b7a8:	08011a6c 	.word	0x08011a6c

0800b7ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b08b      	sub	sp, #44	; 0x2c
 800b7b0:	af04      	add	r7, sp, #16
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <tcp_rst+0x22>
 800b7c0:	4b1f      	ldr	r3, [pc, #124]	; (800b840 <tcp_rst+0x94>)
 800b7c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b7c6:	491f      	ldr	r1, [pc, #124]	; (800b844 <tcp_rst+0x98>)
 800b7c8:	481f      	ldr	r0, [pc, #124]	; (800b848 <tcp_rst+0x9c>)
 800b7ca:	f003 faef 	bl	800edac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <tcp_rst+0x36>
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <tcp_rst+0x94>)
 800b7d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b7da:	491c      	ldr	r1, [pc, #112]	; (800b84c <tcp_rst+0xa0>)
 800b7dc:	481a      	ldr	r0, [pc, #104]	; (800b848 <tcp_rst+0x9c>)
 800b7de:	f003 fae5 	bl	800edac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b7e6:	f246 0308 	movw	r3, #24584	; 0x6008
 800b7ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	b29c      	uxth	r4, r3
 800b7f0:	68b8      	ldr	r0, [r7, #8]
 800b7f2:	f7f9 fa5e 	bl	8004cb2 <lwip_htonl>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	8abb      	ldrh	r3, [r7, #20]
 800b7fa:	9303      	str	r3, [sp, #12]
 800b7fc:	2314      	movs	r3, #20
 800b7fe:	9302      	str	r3, [sp, #8]
 800b800:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b802:	9301      	str	r3, [sp, #4]
 800b804:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	2200      	movs	r2, #0
 800b80c:	4621      	mov	r1, r4
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff fe92 	bl	800b538 <tcp_output_alloc_header_common>
 800b814:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00c      	beq.n	800b836 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
 800b81e:	2200      	movs	r2, #0
 800b820:	6939      	ldr	r1, [r7, #16]
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff ff38 	bl	800b698 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	6939      	ldr	r1, [r7, #16]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff ff72 	bl	800b718 <tcp_output_control_segment>
 800b834:	e000      	b.n	800b838 <tcp_rst+0x8c>
    return;
 800b836:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd90      	pop	{r4, r7, pc}
 800b83e:	bf00      	nop
 800b840:	08011a18 	.word	0x08011a18
 800b844:	0801219c 	.word	0x0801219c
 800b848:	08011a6c 	.word	0x08011a6c
 800b84c:	080121b8 	.word	0x080121b8

0800b850 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <tcp_send_empty_ack+0x24>
 800b866:	4b28      	ldr	r3, [pc, #160]	; (800b908 <tcp_send_empty_ack+0xb8>)
 800b868:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b86c:	4927      	ldr	r1, [pc, #156]	; (800b90c <tcp_send_empty_ack+0xbc>)
 800b86e:	4828      	ldr	r0, [pc, #160]	; (800b910 <tcp_send_empty_ack+0xc0>)
 800b870:	f003 fa9c 	bl	800edac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b880:	7d7b      	ldrb	r3, [r7, #21]
 800b882:	b29c      	uxth	r4, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b888:	4618      	mov	r0, r3
 800b88a:	f7f9 fa12 	bl	8004cb2 <lwip_htonl>
 800b88e:	4603      	mov	r3, r0
 800b890:	2200      	movs	r2, #0
 800b892:	4621      	mov	r1, r4
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff fec1 	bl	800b61c <tcp_output_alloc_header>
 800b89a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d109      	bne.n	800b8b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8b5b      	ldrh	r3, [r3, #26]
 800b8a6:	f043 0303 	orr.w	r3, r3, #3
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b8b0:	f06f 0301 	mvn.w	r3, #1
 800b8b4:	e023      	b.n	800b8fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b8b6:	7dbb      	ldrb	r3, [r7, #22]
 800b8b8:	7dfa      	ldrb	r2, [r7, #23]
 800b8ba:	6939      	ldr	r1, [r7, #16]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff feeb 	bl	800b698 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	6939      	ldr	r1, [r7, #16]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff ff24 	bl	800b718 <tcp_output_control_segment>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	8b5b      	ldrh	r3, [r3, #26]
 800b8e0:	f043 0303 	orr.w	r3, r3, #3
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	835a      	strh	r2, [r3, #26]
 800b8ea:	e006      	b.n	800b8fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8b5b      	ldrh	r3, [r3, #26]
 800b8f0:	f023 0303 	bic.w	r3, r3, #3
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	bd90      	pop	{r4, r7, pc}
 800b906:	bf00      	nop
 800b908:	08011a18 	.word	0x08011a18
 800b90c:	080121d4 	.word	0x080121d4
 800b910:	08011a6c 	.word	0x08011a6c

0800b914 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b914:	b590      	push	{r4, r7, lr}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b91c:	2300      	movs	r3, #0
 800b91e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <tcp_keepalive+0x20>
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <tcp_keepalive+0x74>)
 800b928:	f640 0224 	movw	r2, #2084	; 0x824
 800b92c:	4917      	ldr	r1, [pc, #92]	; (800b98c <tcp_keepalive+0x78>)
 800b92e:	4818      	ldr	r0, [pc, #96]	; (800b990 <tcp_keepalive+0x7c>)
 800b930:	f003 fa3c 	bl	800edac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	b29c      	uxth	r4, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b93c:	3b01      	subs	r3, #1
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f9 f9b7 	bl	8004cb2 <lwip_htonl>
 800b944:	4603      	mov	r3, r0
 800b946:	2200      	movs	r2, #0
 800b948:	4621      	mov	r1, r4
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7ff fe66 	bl	800b61c <tcp_output_alloc_header>
 800b950:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b958:	f04f 33ff 	mov.w	r3, #4294967295
 800b95c:	e010      	b.n	800b980 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	2200      	movs	r2, #0
 800b962:	6939      	ldr	r1, [r7, #16]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff fe97 	bl	800b698 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3304      	adds	r3, #4
 800b970:	6939      	ldr	r1, [r7, #16]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff fed0 	bl	800b718 <tcp_output_control_segment>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	bd90      	pop	{r4, r7, pc}
 800b988:	08011a18 	.word	0x08011a18
 800b98c:	080121f4 	.word	0x080121f4
 800b990:	08011a6c 	.word	0x08011a6c

0800b994 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b994:	b590      	push	{r4, r7, lr}
 800b996:	b08b      	sub	sp, #44	; 0x2c
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b99c:	2300      	movs	r3, #0
 800b99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d106      	bne.n	800b9b6 <tcp_zero_window_probe+0x22>
 800b9a8:	4b4c      	ldr	r3, [pc, #304]	; (800badc <tcp_zero_window_probe+0x148>)
 800b9aa:	f640 024f 	movw	r2, #2127	; 0x84f
 800b9ae:	494c      	ldr	r1, [pc, #304]	; (800bae0 <tcp_zero_window_probe+0x14c>)
 800b9b0:	484c      	ldr	r0, [pc, #304]	; (800bae4 <tcp_zero_window_probe+0x150>)
 800b9b2:	f003 f9fb 	bl	800edac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e086      	b.n	800bad4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9cc:	2bff      	cmp	r3, #255	; 0xff
 800b9ce:	d007      	beq.n	800b9e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	899b      	ldrh	r3, [r3, #12]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7f9 f94d 	bl	8004c88 <lwip_htons>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d005      	beq.n	800ba06 <tcp_zero_window_probe+0x72>
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	891b      	ldrh	r3, [r3, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <tcp_zero_window_probe+0x72>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e000      	b.n	800ba08 <tcp_zero_window_probe+0x74>
 800ba06:	2300      	movs	r3, #0
 800ba08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ba0a:	7ffb      	ldrb	r3, [r7, #31]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bf0c      	ite	eq
 800ba10:	2301      	moveq	r3, #1
 800ba12:	2300      	movne	r3, #0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ba18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba1c:	b299      	uxth	r1, r3
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	8bba      	ldrh	r2, [r7, #28]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff fdf8 	bl	800b61c <tcp_output_alloc_header>
 800ba2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	e04c      	b.n	800bad4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ba40:	7ffb      	ldrb	r3, [r7, #31]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d011      	beq.n	800ba6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	899b      	ldrh	r3, [r3, #12]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	b21b      	sxth	r3, r3
 800ba4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba52:	b21c      	sxth	r4, r3
 800ba54:	2011      	movs	r0, #17
 800ba56:	f7f9 f917 	bl	8004c88 <lwip_htons>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	b21b      	sxth	r3, r3
 800ba5e:	4323      	orrs	r3, r4
 800ba60:	b21b      	sxth	r3, r3
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	819a      	strh	r2, [r3, #12]
 800ba68:	e010      	b.n	800ba8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	3314      	adds	r3, #20
 800ba70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	6858      	ldr	r0, [r3, #4]
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	891a      	ldrh	r2, [r3, #8]
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	891b      	ldrh	r3, [r3, #8]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	2201      	movs	r2, #1
 800ba86:	6939      	ldr	r1, [r7, #16]
 800ba88:	f7fa fe56 	bl	8006738 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f9 f90d 	bl	8004cb2 <lwip_htonl>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da02      	bge.n	800bab0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab4:	2200      	movs	r2, #0
 800bab6:	69b9      	ldr	r1, [r7, #24]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff fded 	bl	800b698 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	3304      	adds	r3, #4
 800bac4:	69b9      	ldr	r1, [r7, #24]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff fe26 	bl	800b718 <tcp_output_control_segment>
 800bacc:	4603      	mov	r3, r0
 800bace:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bad0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	372c      	adds	r7, #44	; 0x2c
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd90      	pop	{r4, r7, pc}
 800badc:	08011a18 	.word	0x08011a18
 800bae0:	08012210 	.word	0x08012210
 800bae4:	08011a6c 	.word	0x08011a6c

0800bae8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800baf0:	f7fa ff10 	bl	8006914 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800baf4:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <tcpip_tcp_timer+0x38>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d103      	bne.n	800bb04 <tcpip_tcp_timer+0x1c>
 800bafc:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <tcpip_tcp_timer+0x3c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb04:	2200      	movs	r2, #0
 800bb06:	4908      	ldr	r1, [pc, #32]	; (800bb28 <tcpip_tcp_timer+0x40>)
 800bb08:	20fa      	movs	r0, #250	; 0xfa
 800bb0a:	f000 f8f3 	bl	800bcf4 <sys_timeout>
 800bb0e:	e003      	b.n	800bb18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bb10:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <tcpip_tcp_timer+0x44>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	601a      	str	r2, [r3, #0]
  }
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	20008414 	.word	0x20008414
 800bb24:	20008424 	.word	0x20008424
 800bb28:	0800bae9 	.word	0x0800bae9
 800bb2c:	2000013c 	.word	0x2000013c

0800bb30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <tcp_timer_needed+0x30>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10f      	bne.n	800bb5c <tcp_timer_needed+0x2c>
 800bb3c:	4b09      	ldr	r3, [pc, #36]	; (800bb64 <tcp_timer_needed+0x34>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <tcp_timer_needed+0x1c>
 800bb44:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <tcp_timer_needed+0x38>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d007      	beq.n	800bb5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bb4c:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <tcp_timer_needed+0x30>)
 800bb4e:	2201      	movs	r2, #1
 800bb50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb52:	2200      	movs	r2, #0
 800bb54:	4905      	ldr	r1, [pc, #20]	; (800bb6c <tcp_timer_needed+0x3c>)
 800bb56:	20fa      	movs	r0, #250	; 0xfa
 800bb58:	f000 f8cc 	bl	800bcf4 <sys_timeout>
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	2000013c 	.word	0x2000013c
 800bb64:	20008414 	.word	0x20008414
 800bb68:	20008424 	.word	0x20008424
 800bb6c:	0800bae9 	.word	0x0800bae9

0800bb70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bb7c:	2006      	movs	r0, #6
 800bb7e:	f7f9 fcfb 	bl	8005578 <memp_malloc>
 800bb82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d109      	bne.n	800bb9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d151      	bne.n	800bc34 <sys_timeout_abs+0xc4>
 800bb90:	4b2a      	ldr	r3, [pc, #168]	; (800bc3c <sys_timeout_abs+0xcc>)
 800bb92:	22be      	movs	r2, #190	; 0xbe
 800bb94:	492a      	ldr	r1, [pc, #168]	; (800bc40 <sys_timeout_abs+0xd0>)
 800bb96:	482b      	ldr	r0, [pc, #172]	; (800bc44 <sys_timeout_abs+0xd4>)
 800bb98:	f003 f908 	bl	800edac <iprintf>
    return;
 800bb9c:	e04a      	b.n	800bc34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2200      	movs	r2, #0
 800bba2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bbb6:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <sys_timeout_abs+0xd8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d103      	bne.n	800bbc6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bbbe:	4a22      	ldr	r2, [pc, #136]	; (800bc48 <sys_timeout_abs+0xd8>)
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6013      	str	r3, [r2, #0]
    return;
 800bbc4:	e037      	b.n	800bc36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	4b1f      	ldr	r3, [pc, #124]	; (800bc48 <sys_timeout_abs+0xd8>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	0fdb      	lsrs	r3, r3, #31
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bbde:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <sys_timeout_abs+0xd8>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bbe6:	4a18      	ldr	r2, [pc, #96]	; (800bc48 <sys_timeout_abs+0xd8>)
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	e023      	b.n	800bc36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bbee:	4b16      	ldr	r3, [pc, #88]	; (800bc48 <sys_timeout_abs+0xd8>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	617b      	str	r3, [r7, #20]
 800bbf4:	e01a      	b.n	800bc2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00b      	beq.n	800bc16 <sys_timeout_abs+0xa6>
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	0fdb      	lsrs	r3, r3, #31
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d007      	beq.n	800bc26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	601a      	str	r2, [r3, #0]
        break;
 800bc24:	e007      	b.n	800bc36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	617b      	str	r3, [r7, #20]
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1e1      	bne.n	800bbf6 <sys_timeout_abs+0x86>
 800bc32:	e000      	b.n	800bc36 <sys_timeout_abs+0xc6>
    return;
 800bc34:	bf00      	nop
      }
    }
  }
}
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	08012234 	.word	0x08012234
 800bc40:	08012268 	.word	0x08012268
 800bc44:	080122a8 	.word	0x080122a8
 800bc48:	20000134 	.word	0x20000134

0800bc4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4798      	blx	r3

  now = sys_now();
 800bc5e:	f7f8 fdfb 	bl	8004858 <sys_now>
 800bc62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	4b0f      	ldr	r3, [pc, #60]	; (800bca8 <lwip_cyclic_timer+0x5c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	0fdb      	lsrs	r3, r3, #31
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d009      	beq.n	800bc96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	4413      	add	r3, r2
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	4907      	ldr	r1, [pc, #28]	; (800bcac <lwip_cyclic_timer+0x60>)
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff ff6e 	bl	800bb70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bc94:	e004      	b.n	800bca0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	4904      	ldr	r1, [pc, #16]	; (800bcac <lwip_cyclic_timer+0x60>)
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff ff68 	bl	800bb70 <sys_timeout_abs>
}
 800bca0:	bf00      	nop
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000138 	.word	0x20000138
 800bcac:	0800bc4d 	.word	0x0800bc4d

0800bcb0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	e00e      	b.n	800bcda <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bcbc:	4a0b      	ldr	r2, [pc, #44]	; (800bcec <sys_timeouts_init+0x3c>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	4a08      	ldr	r2, [pc, #32]	; (800bcec <sys_timeouts_init+0x3c>)
 800bcca:	4413      	add	r3, r2
 800bccc:	461a      	mov	r2, r3
 800bcce:	4908      	ldr	r1, [pc, #32]	; (800bcf0 <sys_timeouts_init+0x40>)
 800bcd0:	f000 f810 	bl	800bcf4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	607b      	str	r3, [r7, #4]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d9ed      	bls.n	800bcbc <sys_timeouts_init+0xc>
  }
}
 800bce0:	bf00      	nop
 800bce2:	bf00      	nop
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	08012e20 	.word	0x08012e20
 800bcf0:	0800bc4d 	.word	0x0800bc4d

0800bcf4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd06:	d306      	bcc.n	800bd16 <sys_timeout+0x22>
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <sys_timeout+0x40>)
 800bd0a:	f240 1229 	movw	r2, #297	; 0x129
 800bd0e:	490a      	ldr	r1, [pc, #40]	; (800bd38 <sys_timeout+0x44>)
 800bd10:	480a      	ldr	r0, [pc, #40]	; (800bd3c <sys_timeout+0x48>)
 800bd12:	f003 f84b 	bl	800edac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bd16:	f7f8 fd9f 	bl	8004858 <sys_now>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	68b9      	ldr	r1, [r7, #8]
 800bd26:	6978      	ldr	r0, [r7, #20]
 800bd28:	f7ff ff22 	bl	800bb70 <sys_timeout_abs>
#endif
}
 800bd2c:	bf00      	nop
 800bd2e:	3718      	adds	r7, #24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	08012234 	.word	0x08012234
 800bd38:	080122d0 	.word	0x080122d0
 800bd3c:	080122a8 	.word	0x080122a8

0800bd40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd46:	f7f8 fd87 	bl	8004858 <sys_now>
 800bd4a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bd4c:	4b1a      	ldr	r3, [pc, #104]	; (800bdb8 <sys_check_timeouts+0x78>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <sys_check_timeouts+0x1a>
 800bd56:	f7f9 ffbb 	bl	8005cd0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bd5a:	4b18      	ldr	r3, [pc, #96]	; (800bdbc <sys_check_timeouts+0x7c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d022      	beq.n	800bdac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	0fdb      	lsrs	r3, r3, #31
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d11a      	bne.n	800bdb0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a0f      	ldr	r2, [pc, #60]	; (800bdbc <sys_check_timeouts+0x7c>)
 800bd80:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	4a0b      	ldr	r2, [pc, #44]	; (800bdc0 <sys_check_timeouts+0x80>)
 800bd94:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	2006      	movs	r0, #6
 800bd9a:	f7f9 fc5d 	bl	8005658 <memp_free>
    if (handler != NULL) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0d3      	beq.n	800bd4c <sys_check_timeouts+0xc>
      handler(arg);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6838      	ldr	r0, [r7, #0]
 800bda8:	4798      	blx	r3
  do {
 800bdaa:	e7cf      	b.n	800bd4c <sys_check_timeouts+0xc>
      return;
 800bdac:	bf00      	nop
 800bdae:	e000      	b.n	800bdb2 <sys_check_timeouts+0x72>
      return;
 800bdb0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	2000840c 	.word	0x2000840c
 800bdbc:	20000134 	.word	0x20000134
 800bdc0:	20000138 	.word	0x20000138

0800bdc4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdc8:	f003 f87e 	bl	800eec8 <rand>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	4b01      	ldr	r3, [pc, #4]	; (800bde4 <udp_init+0x20>)
 800bdde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bde0:	bf00      	nop
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000028 	.word	0x20000028

0800bde8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bdf2:	4b17      	ldr	r3, [pc, #92]	; (800be50 <udp_new_port+0x68>)
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	b291      	uxth	r1, r2
 800bdfa:	4a15      	ldr	r2, [pc, #84]	; (800be50 <udp_new_port+0x68>)
 800bdfc:	8011      	strh	r1, [r2, #0]
 800bdfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be02:	4293      	cmp	r3, r2
 800be04:	d103      	bne.n	800be0e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800be06:	4b12      	ldr	r3, [pc, #72]	; (800be50 <udp_new_port+0x68>)
 800be08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800be0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be0e:	4b11      	ldr	r3, [pc, #68]	; (800be54 <udp_new_port+0x6c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	e011      	b.n	800be3a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	8a5a      	ldrh	r2, [r3, #18]
 800be1a:	4b0d      	ldr	r3, [pc, #52]	; (800be50 <udp_new_port+0x68>)
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d108      	bne.n	800be34 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	3301      	adds	r3, #1
 800be26:	80fb      	strh	r3, [r7, #6]
 800be28:	88fb      	ldrh	r3, [r7, #6]
 800be2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be2e:	d3e0      	bcc.n	800bdf2 <udp_new_port+0xa>
        return 0;
 800be30:	2300      	movs	r3, #0
 800be32:	e007      	b.n	800be44 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	603b      	str	r3, [r7, #0]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1ea      	bne.n	800be16 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800be40:	4b03      	ldr	r3, [pc, #12]	; (800be50 <udp_new_port+0x68>)
 800be42:	881b      	ldrh	r3, [r3, #0]
}
 800be44:	4618      	mov	r0, r3
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	20000028 	.word	0x20000028
 800be54:	2000842c 	.word	0x2000842c

0800be58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d105      	bne.n	800be78 <udp_input_local_match+0x20>
 800be6c:	4b27      	ldr	r3, [pc, #156]	; (800bf0c <udp_input_local_match+0xb4>)
 800be6e:	2287      	movs	r2, #135	; 0x87
 800be70:	4927      	ldr	r1, [pc, #156]	; (800bf10 <udp_input_local_match+0xb8>)
 800be72:	4828      	ldr	r0, [pc, #160]	; (800bf14 <udp_input_local_match+0xbc>)
 800be74:	f002 ff9a 	bl	800edac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d105      	bne.n	800be8a <udp_input_local_match+0x32>
 800be7e:	4b23      	ldr	r3, [pc, #140]	; (800bf0c <udp_input_local_match+0xb4>)
 800be80:	2288      	movs	r2, #136	; 0x88
 800be82:	4925      	ldr	r1, [pc, #148]	; (800bf18 <udp_input_local_match+0xc0>)
 800be84:	4823      	ldr	r0, [pc, #140]	; (800bf14 <udp_input_local_match+0xbc>)
 800be86:	f002 ff91 	bl	800edac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	7a1b      	ldrb	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00b      	beq.n	800beaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	7a1a      	ldrb	r2, [r3, #8]
 800be96:	4b21      	ldr	r3, [pc, #132]	; (800bf1c <udp_input_local_match+0xc4>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be9e:	3301      	adds	r3, #1
 800bea0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d001      	beq.n	800beaa <udp_input_local_match+0x52>
    return 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e02b      	b.n	800bf02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d018      	beq.n	800bee2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d013      	beq.n	800bede <udp_input_local_match+0x86>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00f      	beq.n	800bede <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bebe:	4b17      	ldr	r3, [pc, #92]	; (800bf1c <udp_input_local_match+0xc4>)
 800bec0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec6:	d00a      	beq.n	800bede <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <udp_input_local_match+0xc4>)
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	405a      	eors	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	3308      	adds	r3, #8
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d110      	bne.n	800bf00 <udp_input_local_match+0xa8>
          return 1;
 800bede:	2301      	movs	r3, #1
 800bee0:	e00f      	b.n	800bf02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d009      	beq.n	800befc <udp_input_local_match+0xa4>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <udp_input_local_match+0xa4>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <udp_input_local_match+0xc4>)
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d101      	bne.n	800bf00 <udp_input_local_match+0xa8>
        return 1;
 800befc:	2301      	movs	r3, #1
 800befe:	e000      	b.n	800bf02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	0801231c 	.word	0x0801231c
 800bf10:	0801234c 	.word	0x0801234c
 800bf14:	08012370 	.word	0x08012370
 800bf18:	08012398 	.word	0x08012398
 800bf1c:	20004ed0 	.word	0x20004ed0

0800bf20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf20:	b590      	push	{r4, r7, lr}
 800bf22:	b08d      	sub	sp, #52	; 0x34
 800bf24:	af02      	add	r7, sp, #8
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <udp_input+0x20>
 800bf34:	4b7c      	ldr	r3, [pc, #496]	; (800c128 <udp_input+0x208>)
 800bf36:	22cf      	movs	r2, #207	; 0xcf
 800bf38:	497c      	ldr	r1, [pc, #496]	; (800c12c <udp_input+0x20c>)
 800bf3a:	487d      	ldr	r0, [pc, #500]	; (800c130 <udp_input+0x210>)
 800bf3c:	f002 ff36 	bl	800edac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <udp_input+0x32>
 800bf46:	4b78      	ldr	r3, [pc, #480]	; (800c128 <udp_input+0x208>)
 800bf48:	22d0      	movs	r2, #208	; 0xd0
 800bf4a:	497a      	ldr	r1, [pc, #488]	; (800c134 <udp_input+0x214>)
 800bf4c:	4878      	ldr	r0, [pc, #480]	; (800c130 <udp_input+0x210>)
 800bf4e:	f002 ff2d 	bl	800edac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	895b      	ldrh	r3, [r3, #10]
 800bf56:	2b07      	cmp	r3, #7
 800bf58:	d803      	bhi.n	800bf62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7fa f9f2 	bl	8006344 <pbuf_free>
    goto end;
 800bf60:	e0de      	b.n	800c120 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf68:	4b73      	ldr	r3, [pc, #460]	; (800c138 <udp_input+0x218>)
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	4a72      	ldr	r2, [pc, #456]	; (800c138 <udp_input+0x218>)
 800bf6e:	6812      	ldr	r2, [r2, #0]
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f001 ff68 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7f8 fe80 	bl	8004c88 <lwip_htons>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	885b      	ldrh	r3, [r3, #2]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7f8 fe78 	bl	8004c88 <lwip_htons>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfa8:	4b64      	ldr	r3, [pc, #400]	; (800c13c <udp_input+0x21c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
 800bfae:	e054      	b.n	800c05a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	8a5b      	ldrh	r3, [r3, #18]
 800bfb4:	89fa      	ldrh	r2, [r7, #14]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d14a      	bne.n	800c050 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bfba:	7cfb      	ldrb	r3, [r7, #19]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfc2:	f7ff ff49 	bl	800be58 <udp_input_local_match>
 800bfc6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d041      	beq.n	800c050 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	7c1b      	ldrb	r3, [r3, #16]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11d      	bne.n	800c014 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d102      	bne.n	800bfe4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	61fb      	str	r3, [r7, #28]
 800bfe2:	e017      	b.n	800c014 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bfe4:	7cfb      	ldrb	r3, [r7, #19]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d014      	beq.n	800c014 <udp_input+0xf4>
 800bfea:	4b53      	ldr	r3, [pc, #332]	; (800c138 <udp_input+0x218>)
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff2:	d10f      	bne.n	800c014 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	3304      	adds	r3, #4
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d008      	beq.n	800c014 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	3304      	adds	r3, #4
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d101      	bne.n	800c014 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	8a9b      	ldrh	r3, [r3, #20]
 800c018:	8a3a      	ldrh	r2, [r7, #16]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d118      	bne.n	800c050 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c022:	2b00      	cmp	r3, #0
 800c024:	d005      	beq.n	800c032 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	4b43      	ldr	r3, [pc, #268]	; (800c138 <udp_input+0x218>)
 800c02c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c02e:	429a      	cmp	r2, r3
 800c030:	d10e      	bne.n	800c050 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d014      	beq.n	800c062 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c040:	4b3e      	ldr	r3, [pc, #248]	; (800c13c <udp_input+0x21c>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c048:	4a3c      	ldr	r2, [pc, #240]	; (800c13c <udp_input+0x21c>)
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c04e:	e008      	b.n	800c062 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1a7      	bne.n	800bfb0 <udp_input+0x90>
 800c060:	e000      	b.n	800c064 <udp_input+0x144>
        break;
 800c062:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <udp_input+0x14e>
    pcb = uncon_pcb;
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <udp_input+0x15a>
    for_us = 1;
 800c074:	2301      	movs	r3, #1
 800c076:	76fb      	strb	r3, [r7, #27]
 800c078:	e00a      	b.n	800c090 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	3304      	adds	r3, #4
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <udp_input+0x218>)
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	429a      	cmp	r2, r3
 800c086:	bf0c      	ite	eq
 800c088:	2301      	moveq	r3, #1
 800c08a:	2300      	movne	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c090:	7efb      	ldrb	r3, [r7, #27]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d041      	beq.n	800c11a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c096:	2108      	movs	r1, #8
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7fa f8cd 	bl	8006238 <pbuf_remove_header>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00a      	beq.n	800c0ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c0a4:	4b20      	ldr	r3, [pc, #128]	; (800c128 <udp_input+0x208>)
 800c0a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c0aa:	4925      	ldr	r1, [pc, #148]	; (800c140 <udp_input+0x220>)
 800c0ac:	4820      	ldr	r0, [pc, #128]	; (800c130 <udp_input+0x210>)
 800c0ae:	f002 fe7d 	bl	800edac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7fa f946 	bl	8006344 <pbuf_free>
      goto end;
 800c0b8:	e032      	b.n	800c120 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d012      	beq.n	800c0e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00a      	beq.n	800c0de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	699c      	ldr	r4, [r3, #24]
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	69d8      	ldr	r0, [r3, #28]
 800c0d0:	8a3b      	ldrh	r3, [r7, #16]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4b1b      	ldr	r3, [pc, #108]	; (800c144 <udp_input+0x224>)
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c0dc:	e021      	b.n	800c122 <udp_input+0x202>
        pbuf_free(p);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7fa f930 	bl	8006344 <pbuf_free>
        goto end;
 800c0e4:	e01c      	b.n	800c120 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c0e6:	7cfb      	ldrb	r3, [r7, #19]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d112      	bne.n	800c112 <udp_input+0x1f2>
 800c0ec:	4b12      	ldr	r3, [pc, #72]	; (800c138 <udp_input+0x218>)
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0f4:	2be0      	cmp	r3, #224	; 0xe0
 800c0f6:	d00c      	beq.n	800c112 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <udp_input+0x218>)
 800c0fa:	899b      	ldrh	r3, [r3, #12]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	b21b      	sxth	r3, r3
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7fa f90a 	bl	800631e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c10a:	2103      	movs	r1, #3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 fb7b 	bl	800d808 <icmp_dest_unreach>
      pbuf_free(p);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7fa f916 	bl	8006344 <pbuf_free>
  return;
 800c118:	e003      	b.n	800c122 <udp_input+0x202>
    pbuf_free(p);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7fa f912 	bl	8006344 <pbuf_free>
  return;
 800c120:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c122:	372c      	adds	r7, #44	; 0x2c
 800c124:	46bd      	mov	sp, r7
 800c126:	bd90      	pop	{r4, r7, pc}
 800c128:	0801231c 	.word	0x0801231c
 800c12c:	080123c0 	.word	0x080123c0
 800c130:	08012370 	.word	0x08012370
 800c134:	080123d8 	.word	0x080123d8
 800c138:	20004ed0 	.word	0x20004ed0
 800c13c:	2000842c 	.word	0x2000842c
 800c140:	080123f4 	.word	0x080123f4
 800c144:	20004ee0 	.word	0x20004ee0

0800c148 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d109      	bne.n	800c170 <udp_sendto+0x28>
 800c15c:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <udp_sendto+0xa4>)
 800c15e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c162:	4923      	ldr	r1, [pc, #140]	; (800c1f0 <udp_sendto+0xa8>)
 800c164:	4823      	ldr	r0, [pc, #140]	; (800c1f4 <udp_sendto+0xac>)
 800c166:	f002 fe21 	bl	800edac <iprintf>
 800c16a:	f06f 030f 	mvn.w	r3, #15
 800c16e:	e038      	b.n	800c1e2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <udp_sendto+0x42>
 800c176:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <udp_sendto+0xa4>)
 800c178:	f240 2219 	movw	r2, #537	; 0x219
 800c17c:	491e      	ldr	r1, [pc, #120]	; (800c1f8 <udp_sendto+0xb0>)
 800c17e:	481d      	ldr	r0, [pc, #116]	; (800c1f4 <udp_sendto+0xac>)
 800c180:	f002 fe14 	bl	800edac <iprintf>
 800c184:	f06f 030f 	mvn.w	r3, #15
 800c188:	e02b      	b.n	800c1e2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <udp_sendto+0x5c>
 800c190:	4b16      	ldr	r3, [pc, #88]	; (800c1ec <udp_sendto+0xa4>)
 800c192:	f240 221a 	movw	r2, #538	; 0x21a
 800c196:	4919      	ldr	r1, [pc, #100]	; (800c1fc <udp_sendto+0xb4>)
 800c198:	4816      	ldr	r0, [pc, #88]	; (800c1f4 <udp_sendto+0xac>)
 800c19a:	f002 fe07 	bl	800edac <iprintf>
 800c19e:	f06f 030f 	mvn.w	r3, #15
 800c1a2:	e01e      	b.n	800c1e2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	7a1b      	ldrb	r3, [r3, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d006      	beq.n	800c1ba <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	7a1b      	ldrb	r3, [r3, #8]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f9 fd67 	bl	8005c84 <netif_get_by_index>
 800c1b6:	6178      	str	r0, [r7, #20]
 800c1b8:	e003      	b.n	800c1c2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f001 fbae 	bl	800d91c <ip4_route>
 800c1c0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c1c8:	f06f 0303 	mvn.w	r3, #3
 800c1cc:	e009      	b.n	800c1e2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c1ce:	887a      	ldrh	r2, [r7, #2]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 f810 	bl	800c200 <udp_sendto_if>
 800c1e0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0801231c 	.word	0x0801231c
 800c1f0:	08012440 	.word	0x08012440
 800c1f4:	08012370 	.word	0x08012370
 800c1f8:	08012458 	.word	0x08012458
 800c1fc:	08012474 	.word	0x08012474

0800c200 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af02      	add	r7, sp, #8
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d109      	bne.n	800c228 <udp_sendto_if+0x28>
 800c214:	4b2e      	ldr	r3, [pc, #184]	; (800c2d0 <udp_sendto_if+0xd0>)
 800c216:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c21a:	492e      	ldr	r1, [pc, #184]	; (800c2d4 <udp_sendto_if+0xd4>)
 800c21c:	482e      	ldr	r0, [pc, #184]	; (800c2d8 <udp_sendto_if+0xd8>)
 800c21e:	f002 fdc5 	bl	800edac <iprintf>
 800c222:	f06f 030f 	mvn.w	r3, #15
 800c226:	e04f      	b.n	800c2c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d109      	bne.n	800c242 <udp_sendto_if+0x42>
 800c22e:	4b28      	ldr	r3, [pc, #160]	; (800c2d0 <udp_sendto_if+0xd0>)
 800c230:	f240 2281 	movw	r2, #641	; 0x281
 800c234:	4929      	ldr	r1, [pc, #164]	; (800c2dc <udp_sendto_if+0xdc>)
 800c236:	4828      	ldr	r0, [pc, #160]	; (800c2d8 <udp_sendto_if+0xd8>)
 800c238:	f002 fdb8 	bl	800edac <iprintf>
 800c23c:	f06f 030f 	mvn.w	r3, #15
 800c240:	e042      	b.n	800c2c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d109      	bne.n	800c25c <udp_sendto_if+0x5c>
 800c248:	4b21      	ldr	r3, [pc, #132]	; (800c2d0 <udp_sendto_if+0xd0>)
 800c24a:	f240 2282 	movw	r2, #642	; 0x282
 800c24e:	4924      	ldr	r1, [pc, #144]	; (800c2e0 <udp_sendto_if+0xe0>)
 800c250:	4821      	ldr	r0, [pc, #132]	; (800c2d8 <udp_sendto_if+0xd8>)
 800c252:	f002 fdab 	bl	800edac <iprintf>
 800c256:	f06f 030f 	mvn.w	r3, #15
 800c25a:	e035      	b.n	800c2c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d109      	bne.n	800c276 <udp_sendto_if+0x76>
 800c262:	4b1b      	ldr	r3, [pc, #108]	; (800c2d0 <udp_sendto_if+0xd0>)
 800c264:	f240 2283 	movw	r2, #643	; 0x283
 800c268:	491e      	ldr	r1, [pc, #120]	; (800c2e4 <udp_sendto_if+0xe4>)
 800c26a:	481b      	ldr	r0, [pc, #108]	; (800c2d8 <udp_sendto_if+0xd8>)
 800c26c:	f002 fd9e 	bl	800edac <iprintf>
 800c270:	f06f 030f 	mvn.w	r3, #15
 800c274:	e028      	b.n	800c2c8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d009      	beq.n	800c290 <udp_sendto_if+0x90>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d005      	beq.n	800c290 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c28c:	2be0      	cmp	r3, #224	; 0xe0
 800c28e:	d103      	bne.n	800c298 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	3304      	adds	r3, #4
 800c294:	617b      	str	r3, [r7, #20]
 800c296:	e00b      	b.n	800c2b0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d002      	beq.n	800c2ac <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c2a6:	f06f 0303 	mvn.w	r3, #3
 800c2aa:	e00d      	b.n	800c2c8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c2b0:	887a      	ldrh	r2, [r7, #2]
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	6a3b      	ldr	r3, [r7, #32]
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 f811 	bl	800c2e8 <udp_sendto_if_src>
 800c2c6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	0801231c 	.word	0x0801231c
 800c2d4:	08012490 	.word	0x08012490
 800c2d8:	08012370 	.word	0x08012370
 800c2dc:	080124ac 	.word	0x080124ac
 800c2e0:	080124c8 	.word	0x080124c8
 800c2e4:	080124e8 	.word	0x080124e8

0800c2e8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08c      	sub	sp, #48	; 0x30
 800c2ec:	af04      	add	r7, sp, #16
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d109      	bne.n	800c310 <udp_sendto_if_src+0x28>
 800c2fc:	4b65      	ldr	r3, [pc, #404]	; (800c494 <udp_sendto_if_src+0x1ac>)
 800c2fe:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c302:	4965      	ldr	r1, [pc, #404]	; (800c498 <udp_sendto_if_src+0x1b0>)
 800c304:	4865      	ldr	r0, [pc, #404]	; (800c49c <udp_sendto_if_src+0x1b4>)
 800c306:	f002 fd51 	bl	800edac <iprintf>
 800c30a:	f06f 030f 	mvn.w	r3, #15
 800c30e:	e0bc      	b.n	800c48a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d109      	bne.n	800c32a <udp_sendto_if_src+0x42>
 800c316:	4b5f      	ldr	r3, [pc, #380]	; (800c494 <udp_sendto_if_src+0x1ac>)
 800c318:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c31c:	4960      	ldr	r1, [pc, #384]	; (800c4a0 <udp_sendto_if_src+0x1b8>)
 800c31e:	485f      	ldr	r0, [pc, #380]	; (800c49c <udp_sendto_if_src+0x1b4>)
 800c320:	f002 fd44 	bl	800edac <iprintf>
 800c324:	f06f 030f 	mvn.w	r3, #15
 800c328:	e0af      	b.n	800c48a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d109      	bne.n	800c344 <udp_sendto_if_src+0x5c>
 800c330:	4b58      	ldr	r3, [pc, #352]	; (800c494 <udp_sendto_if_src+0x1ac>)
 800c332:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c336:	495b      	ldr	r1, [pc, #364]	; (800c4a4 <udp_sendto_if_src+0x1bc>)
 800c338:	4858      	ldr	r0, [pc, #352]	; (800c49c <udp_sendto_if_src+0x1b4>)
 800c33a:	f002 fd37 	bl	800edac <iprintf>
 800c33e:	f06f 030f 	mvn.w	r3, #15
 800c342:	e0a2      	b.n	800c48a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d109      	bne.n	800c35e <udp_sendto_if_src+0x76>
 800c34a:	4b52      	ldr	r3, [pc, #328]	; (800c494 <udp_sendto_if_src+0x1ac>)
 800c34c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c350:	4955      	ldr	r1, [pc, #340]	; (800c4a8 <udp_sendto_if_src+0x1c0>)
 800c352:	4852      	ldr	r0, [pc, #328]	; (800c49c <udp_sendto_if_src+0x1b4>)
 800c354:	f002 fd2a 	bl	800edac <iprintf>
 800c358:	f06f 030f 	mvn.w	r3, #15
 800c35c:	e095      	b.n	800c48a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <udp_sendto_if_src+0x90>
 800c364:	4b4b      	ldr	r3, [pc, #300]	; (800c494 <udp_sendto_if_src+0x1ac>)
 800c366:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c36a:	4950      	ldr	r1, [pc, #320]	; (800c4ac <udp_sendto_if_src+0x1c4>)
 800c36c:	484b      	ldr	r0, [pc, #300]	; (800c49c <udp_sendto_if_src+0x1b4>)
 800c36e:	f002 fd1d 	bl	800edac <iprintf>
 800c372:	f06f 030f 	mvn.w	r3, #15
 800c376:	e088      	b.n	800c48a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	8a5b      	ldrh	r3, [r3, #18]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10f      	bne.n	800c3a0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c380:	68f9      	ldr	r1, [r7, #12]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	8a5b      	ldrh	r3, [r3, #18]
 800c386:	461a      	mov	r2, r3
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f000 f893 	bl	800c4b4 <udp_bind>
 800c38e:	4603      	mov	r3, r0
 800c390:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c392:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c39a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c39e:	e074      	b.n	800c48a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	891b      	ldrh	r3, [r3, #8]
 800c3a4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d902      	bls.n	800c3b2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b0:	e06b      	b.n	800c48a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c3b2:	2108      	movs	r1, #8
 800c3b4:	68b8      	ldr	r0, [r7, #8]
 800c3b6:	f7f9 ff2f 	bl	8006218 <pbuf_add_header>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d015      	beq.n	800c3ec <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c3c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c3c4:	2108      	movs	r1, #8
 800c3c6:	2022      	movs	r0, #34	; 0x22
 800c3c8:	f7f9 fcd8 	bl	8005d7c <pbuf_alloc>
 800c3cc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d8:	e057      	b.n	800c48a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	891b      	ldrh	r3, [r3, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d006      	beq.n	800c3f0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	69f8      	ldr	r0, [r7, #28]
 800c3e6:	f7fa f8c5 	bl	8006574 <pbuf_chain>
 800c3ea:	e001      	b.n	800c3f0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	895b      	ldrh	r3, [r3, #10]
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	d806      	bhi.n	800c406 <udp_sendto_if_src+0x11e>
 800c3f8:	4b26      	ldr	r3, [pc, #152]	; (800c494 <udp_sendto_if_src+0x1ac>)
 800c3fa:	f240 320d 	movw	r2, #781	; 0x30d
 800c3fe:	492c      	ldr	r1, [pc, #176]	; (800c4b0 <udp_sendto_if_src+0x1c8>)
 800c400:	4826      	ldr	r0, [pc, #152]	; (800c49c <udp_sendto_if_src+0x1b4>)
 800c402:	f002 fcd3 	bl	800edac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	8a5b      	ldrh	r3, [r3, #18]
 800c410:	4618      	mov	r0, r3
 800c412:	f7f8 fc39 	bl	8004c88 <lwip_htons>
 800c416:	4603      	mov	r3, r0
 800c418:	461a      	mov	r2, r3
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c41e:	887b      	ldrh	r3, [r7, #2]
 800c420:	4618      	mov	r0, r3
 800c422:	f7f8 fc31 	bl	8004c88 <lwip_htons>
 800c426:	4603      	mov	r3, r0
 800c428:	461a      	mov	r2, r3
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2200      	movs	r2, #0
 800c432:	719a      	strb	r2, [r3, #6]
 800c434:	2200      	movs	r2, #0
 800c436:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	891b      	ldrh	r3, [r3, #8]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7f8 fc23 	bl	8004c88 <lwip_htons>
 800c442:	4603      	mov	r3, r0
 800c444:	461a      	mov	r2, r3
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c44a:	2311      	movs	r3, #17
 800c44c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	7adb      	ldrb	r3, [r3, #11]
 800c452:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	7a9b      	ldrb	r3, [r3, #10]
 800c458:	7cb9      	ldrb	r1, [r7, #18]
 800c45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c45c:	9202      	str	r2, [sp, #8]
 800c45e:	7cfa      	ldrb	r2, [r7, #19]
 800c460:	9201      	str	r2, [sp, #4]
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	460b      	mov	r3, r1
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c46a:	69f8      	ldr	r0, [r7, #28]
 800c46c:	f001 fc3e 	bl	800dcec <ip4_output_if_src>
 800c470:	4603      	mov	r3, r0
 800c472:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c474:	69fa      	ldr	r2, [r7, #28]
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d004      	beq.n	800c486 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c47c:	69f8      	ldr	r0, [r7, #28]
 800c47e:	f7f9 ff61 	bl	8006344 <pbuf_free>
    q = NULL;
 800c482:	2300      	movs	r3, #0
 800c484:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c486:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3720      	adds	r7, #32
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0801231c 	.word	0x0801231c
 800c498:	08012508 	.word	0x08012508
 800c49c:	08012370 	.word	0x08012370
 800c4a0:	08012528 	.word	0x08012528
 800c4a4:	08012548 	.word	0x08012548
 800c4a8:	0801256c 	.word	0x0801256c
 800c4ac:	08012590 	.word	0x08012590
 800c4b0:	080125b4 	.word	0x080125b4

0800c4b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c4c8:	4b39      	ldr	r3, [pc, #228]	; (800c5b0 <udp_bind+0xfc>)
 800c4ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d109      	bne.n	800c4e6 <udp_bind+0x32>
 800c4d2:	4b38      	ldr	r3, [pc, #224]	; (800c5b4 <udp_bind+0x100>)
 800c4d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c4d8:	4937      	ldr	r1, [pc, #220]	; (800c5b8 <udp_bind+0x104>)
 800c4da:	4838      	ldr	r0, [pc, #224]	; (800c5bc <udp_bind+0x108>)
 800c4dc:	f002 fc66 	bl	800edac <iprintf>
 800c4e0:	f06f 030f 	mvn.w	r3, #15
 800c4e4:	e060      	b.n	800c5a8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4ea:	4b35      	ldr	r3, [pc, #212]	; (800c5c0 <udp_bind+0x10c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e009      	b.n	800c506 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d102      	bne.n	800c500 <udp_bind+0x4c>
      rebind = 1;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	74fb      	strb	r3, [r7, #19]
      break;
 800c4fe:	e005      	b.n	800c50c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1f2      	bne.n	800c4f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c50c:	88fb      	ldrh	r3, [r7, #6]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <udp_bind+0x72>
    port = udp_new_port();
 800c512:	f7ff fc69 	bl	800bde8 <udp_new_port>
 800c516:	4603      	mov	r3, r0
 800c518:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c51a:	88fb      	ldrh	r3, [r7, #6]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d12c      	bne.n	800c57a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c520:	f06f 0307 	mvn.w	r3, #7
 800c524:	e040      	b.n	800c5a8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c526:	4b26      	ldr	r3, [pc, #152]	; (800c5c0 <udp_bind+0x10c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	617b      	str	r3, [r7, #20]
 800c52c:	e022      	b.n	800c574 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	429a      	cmp	r2, r3
 800c534:	d01b      	beq.n	800c56e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	8a5b      	ldrh	r3, [r3, #18]
 800c53a:	88fa      	ldrh	r2, [r7, #6]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d116      	bne.n	800c56e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c548:	429a      	cmp	r2, r3
 800c54a:	d00d      	beq.n	800c568 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <udp_bind+0xb4>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d006      	beq.n	800c568 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c55a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c568:	f06f 0307 	mvn.w	r3, #7
 800c56c:	e01c      	b.n	800c5a8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1d9      	bne.n	800c52e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <udp_bind+0xd2>
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	e000      	b.n	800c588 <udp_bind+0xd4>
 800c586:	2300      	movs	r3, #0
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c592:	7cfb      	ldrb	r3, [r7, #19]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c598:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <udp_bind+0x10c>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c5a0:	4a07      	ldr	r2, [pc, #28]	; (800c5c0 <udp_bind+0x10c>)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	08012e38 	.word	0x08012e38
 800c5b4:	0801231c 	.word	0x0801231c
 800c5b8:	080125e4 	.word	0x080125e4
 800c5bc:	08012370 	.word	0x08012370
 800c5c0:	2000842c 	.word	0x2000842c

0800c5c4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d107      	bne.n	800c5e2 <udp_disconnect+0x1e>
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <udp_disconnect+0x44>)
 800c5d4:	f240 426a 	movw	r2, #1130	; 0x46a
 800c5d8:	490c      	ldr	r1, [pc, #48]	; (800c60c <udp_disconnect+0x48>)
 800c5da:	480d      	ldr	r0, [pc, #52]	; (800c610 <udp_disconnect+0x4c>)
 800c5dc:	f002 fbe6 	bl	800edac <iprintf>
 800c5e0:	e00f      	b.n	800c602 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	7c1b      	ldrb	r3, [r3, #16]
 800c5f8:	f023 0304 	bic.w	r3, r3, #4
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	741a      	strb	r2, [r3, #16]
}
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	0801231c 	.word	0x0801231c
 800c60c:	08012634 	.word	0x08012634
 800c610:	08012370 	.word	0x08012370

0800c614 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d107      	bne.n	800c636 <udp_recv+0x22>
 800c626:	4b08      	ldr	r3, [pc, #32]	; (800c648 <udp_recv+0x34>)
 800c628:	f240 428a 	movw	r2, #1162	; 0x48a
 800c62c:	4907      	ldr	r1, [pc, #28]	; (800c64c <udp_recv+0x38>)
 800c62e:	4808      	ldr	r0, [pc, #32]	; (800c650 <udp_recv+0x3c>)
 800c630:	f002 fbbc 	bl	800edac <iprintf>
 800c634:	e005      	b.n	800c642 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	61da      	str	r2, [r3, #28]
}
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	0801231c 	.word	0x0801231c
 800c64c:	08012650 	.word	0x08012650
 800c650:	08012370 	.word	0x08012370

0800c654 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d107      	bne.n	800c672 <udp_remove+0x1e>
 800c662:	4b19      	ldr	r3, [pc, #100]	; (800c6c8 <udp_remove+0x74>)
 800c664:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c668:	4918      	ldr	r1, [pc, #96]	; (800c6cc <udp_remove+0x78>)
 800c66a:	4819      	ldr	r0, [pc, #100]	; (800c6d0 <udp_remove+0x7c>)
 800c66c:	f002 fb9e 	bl	800edac <iprintf>
 800c670:	e026      	b.n	800c6c0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c672:	4b18      	ldr	r3, [pc, #96]	; (800c6d4 <udp_remove+0x80>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d105      	bne.n	800c688 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c67c:	4b15      	ldr	r3, [pc, #84]	; (800c6d4 <udp_remove+0x80>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	4a14      	ldr	r2, [pc, #80]	; (800c6d4 <udp_remove+0x80>)
 800c684:	6013      	str	r3, [r2, #0]
 800c686:	e017      	b.n	800c6b8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c688:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <udp_remove+0x80>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
 800c68e:	e010      	b.n	800c6b2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d009      	beq.n	800c6ac <udp_remove+0x58>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d104      	bne.n	800c6ac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	60da      	str	r2, [r3, #12]
        break;
 800c6aa:	e005      	b.n	800c6b8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	60fb      	str	r3, [r7, #12]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1eb      	bne.n	800c690 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	f7f8 ffcc 	bl	8005658 <memp_free>
}
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	0801231c 	.word	0x0801231c
 800c6cc:	08012668 	.word	0x08012668
 800c6d0:	08012370 	.word	0x08012370
 800c6d4:	2000842c 	.word	0x2000842c

0800c6d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f7f8 ff4a 	bl	8005578 <memp_malloc>
 800c6e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d007      	beq.n	800c6fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c6ec:	2220      	movs	r2, #32
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f002 fb53 	bl	800ed9c <memset>
    pcb->ttl = UDP_TTL;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	22ff      	movs	r2, #255	; 0xff
 800c6fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c6fc:	687b      	ldr	r3, [r7, #4]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
	...

0800c708 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d01e      	beq.n	800c756 <udp_netif_ip_addr_changed+0x4e>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01a      	beq.n	800c756 <udp_netif_ip_addr_changed+0x4e>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d017      	beq.n	800c756 <udp_netif_ip_addr_changed+0x4e>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d013      	beq.n	800c756 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c72e:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <udp_netif_ip_addr_changed+0x5c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e00c      	b.n	800c750 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d103      	bne.n	800c74a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1ef      	bne.n	800c736 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c756:	bf00      	nop
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2000842c 	.word	0x2000842c

0800c768 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c770:	4915      	ldr	r1, [pc, #84]	; (800c7c8 <etharp_free_entry+0x60>)
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	4613      	mov	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	4413      	add	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	440b      	add	r3, r1
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d013      	beq.n	800c7ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c784:	4910      	ldr	r1, [pc, #64]	; (800c7c8 <etharp_free_entry+0x60>)
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	4613      	mov	r3, r2
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	4413      	add	r3, r2
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	440b      	add	r3, r1
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4618      	mov	r0, r3
 800c796:	f7f9 fdd5 	bl	8006344 <pbuf_free>
    arp_table[i].q = NULL;
 800c79a:	490b      	ldr	r1, [pc, #44]	; (800c7c8 <etharp_free_entry+0x60>)
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	440b      	add	r3, r1
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c7ac:	4906      	ldr	r1, [pc, #24]	; (800c7c8 <etharp_free_entry+0x60>)
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	440b      	add	r3, r1
 800c7ba:	3314      	adds	r3, #20
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20000140 	.word	0x20000140

0800c7cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	607b      	str	r3, [r7, #4]
 800c7d6:	e096      	b.n	800c906 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c7d8:	494f      	ldr	r1, [pc, #316]	; (800c918 <etharp_tmr+0x14c>)
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	4413      	add	r3, r2
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	440b      	add	r3, r1
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c7ec:	78fb      	ldrb	r3, [r7, #3]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 8086 	beq.w	800c900 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c7f4:	4948      	ldr	r1, [pc, #288]	; (800c918 <etharp_tmr+0x14c>)
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	440b      	add	r3, r1
 800c802:	3312      	adds	r3, #18
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	3301      	adds	r3, #1
 800c808:	b298      	uxth	r0, r3
 800c80a:	4943      	ldr	r1, [pc, #268]	; (800c918 <etharp_tmr+0x14c>)
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	3312      	adds	r3, #18
 800c81a:	4602      	mov	r2, r0
 800c81c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c81e:	493e      	ldr	r1, [pc, #248]	; (800c918 <etharp_tmr+0x14c>)
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	4613      	mov	r3, r2
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	4413      	add	r3, r2
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	440b      	add	r3, r1
 800c82c:	3312      	adds	r3, #18
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c834:	d215      	bcs.n	800c862 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c836:	4938      	ldr	r1, [pc, #224]	; (800c918 <etharp_tmr+0x14c>)
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	4613      	mov	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	4413      	add	r3, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	440b      	add	r3, r1
 800c844:	3314      	adds	r3, #20
 800c846:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d10e      	bne.n	800c86a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c84c:	4932      	ldr	r1, [pc, #200]	; (800c918 <etharp_tmr+0x14c>)
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	4613      	mov	r3, r2
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	4413      	add	r3, r2
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	440b      	add	r3, r1
 800c85a:	3312      	adds	r3, #18
 800c85c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c85e:	2b04      	cmp	r3, #4
 800c860:	d903      	bls.n	800c86a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff ff80 	bl	800c768 <etharp_free_entry>
 800c868:	e04a      	b.n	800c900 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c86a:	492b      	ldr	r1, [pc, #172]	; (800c918 <etharp_tmr+0x14c>)
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	4613      	mov	r3, r2
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	4413      	add	r3, r2
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	440b      	add	r3, r1
 800c878:	3314      	adds	r3, #20
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	d10a      	bne.n	800c896 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c880:	4925      	ldr	r1, [pc, #148]	; (800c918 <etharp_tmr+0x14c>)
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	4613      	mov	r3, r2
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	4413      	add	r3, r2
 800c88a:	00db      	lsls	r3, r3, #3
 800c88c:	440b      	add	r3, r1
 800c88e:	3314      	adds	r3, #20
 800c890:	2204      	movs	r2, #4
 800c892:	701a      	strb	r2, [r3, #0]
 800c894:	e034      	b.n	800c900 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c896:	4920      	ldr	r1, [pc, #128]	; (800c918 <etharp_tmr+0x14c>)
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	4613      	mov	r3, r2
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	4413      	add	r3, r2
 800c8a0:	00db      	lsls	r3, r3, #3
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3314      	adds	r3, #20
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b04      	cmp	r3, #4
 800c8aa:	d10a      	bne.n	800c8c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c8ac:	491a      	ldr	r1, [pc, #104]	; (800c918 <etharp_tmr+0x14c>)
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	4413      	add	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	440b      	add	r3, r1
 800c8ba:	3314      	adds	r3, #20
 800c8bc:	2202      	movs	r2, #2
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	e01e      	b.n	800c900 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8c2:	4915      	ldr	r1, [pc, #84]	; (800c918 <etharp_tmr+0x14c>)
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d113      	bne.n	800c900 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c8d8:	490f      	ldr	r1, [pc, #60]	; (800c918 <etharp_tmr+0x14c>)
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4413      	add	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	440b      	add	r3, r1
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	4a08      	ldr	r2, [pc, #32]	; (800c918 <etharp_tmr+0x14c>)
 800c8f6:	4413      	add	r3, r2
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	f000 fe6e 	bl	800d5dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3301      	adds	r3, #1
 800c904:	607b      	str	r3, [r7, #4]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b09      	cmp	r3, #9
 800c90a:	f77f af65 	ble.w	800c7d8 <etharp_tmr+0xc>
      }
    }
  }
}
 800c90e:	bf00      	nop
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20000140 	.word	0x20000140

0800c91c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b08a      	sub	sp, #40	; 0x28
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	460b      	mov	r3, r1
 800c926:	607a      	str	r2, [r7, #4]
 800c928:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c92a:	230a      	movs	r3, #10
 800c92c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c92e:	230a      	movs	r3, #10
 800c930:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c932:	230a      	movs	r3, #10
 800c934:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c93a:	230a      	movs	r3, #10
 800c93c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	83bb      	strh	r3, [r7, #28]
 800c942:	2300      	movs	r3, #0
 800c944:	837b      	strh	r3, [r7, #26]
 800c946:	2300      	movs	r3, #0
 800c948:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c94a:	2300      	movs	r3, #0
 800c94c:	843b      	strh	r3, [r7, #32]
 800c94e:	e0ae      	b.n	800caae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c950:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c954:	49a6      	ldr	r1, [pc, #664]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800c956:	4613      	mov	r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	440b      	add	r3, r1
 800c960:	3314      	adds	r3, #20
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c96a:	2b0a      	cmp	r3, #10
 800c96c:	d105      	bne.n	800c97a <etharp_find_entry+0x5e>
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d102      	bne.n	800c97a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c974:	8c3b      	ldrh	r3, [r7, #32]
 800c976:	847b      	strh	r3, [r7, #34]	; 0x22
 800c978:	e095      	b.n	800caa6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 8092 	beq.w	800caa6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c982:	7dfb      	ldrb	r3, [r7, #23]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d009      	beq.n	800c99c <etharp_find_entry+0x80>
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d806      	bhi.n	800c99c <etharp_find_entry+0x80>
 800c98e:	4b99      	ldr	r3, [pc, #612]	; (800cbf4 <etharp_find_entry+0x2d8>)
 800c990:	f240 1223 	movw	r2, #291	; 0x123
 800c994:	4998      	ldr	r1, [pc, #608]	; (800cbf8 <etharp_find_entry+0x2dc>)
 800c996:	4899      	ldr	r0, [pc, #612]	; (800cbfc <etharp_find_entry+0x2e0>)
 800c998:	f002 fa08 	bl	800edac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d020      	beq.n	800c9e4 <etharp_find_entry+0xc8>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6819      	ldr	r1, [r3, #0]
 800c9a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9aa:	4891      	ldr	r0, [pc, #580]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	4413      	add	r3, r2
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	4403      	add	r3, r0
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4299      	cmp	r1, r3
 800c9bc:	d112      	bne.n	800c9e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00c      	beq.n	800c9de <etharp_find_entry+0xc2>
 800c9c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9c8:	4989      	ldr	r1, [pc, #548]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	4413      	add	r3, r2
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d102      	bne.n	800c9e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c9de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9e2:	e100      	b.n	800cbe6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d140      	bne.n	800ca6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c9ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9ee:	4980      	ldr	r1, [pc, #512]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	005b      	lsls	r3, r3, #1
 800c9f4:	4413      	add	r3, r2
 800c9f6:	00db      	lsls	r3, r3, #3
 800c9f8:	440b      	add	r3, r1
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01a      	beq.n	800ca36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ca00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca04:	497a      	ldr	r1, [pc, #488]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800ca06:	4613      	mov	r3, r2
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	440b      	add	r3, r1
 800ca10:	3312      	adds	r3, #18
 800ca12:	881b      	ldrh	r3, [r3, #0]
 800ca14:	8bba      	ldrh	r2, [r7, #28]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d845      	bhi.n	800caa6 <etharp_find_entry+0x18a>
            old_queue = i;
 800ca1a:	8c3b      	ldrh	r3, [r7, #32]
 800ca1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ca1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca22:	4973      	ldr	r1, [pc, #460]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800ca24:	4613      	mov	r3, r2
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	4413      	add	r3, r2
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	440b      	add	r3, r1
 800ca2e:	3312      	adds	r3, #18
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	83bb      	strh	r3, [r7, #28]
 800ca34:	e037      	b.n	800caa6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ca36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca3a:	496d      	ldr	r1, [pc, #436]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	4413      	add	r3, r2
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	440b      	add	r3, r1
 800ca46:	3312      	adds	r3, #18
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	8b7a      	ldrh	r2, [r7, #26]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d82a      	bhi.n	800caa6 <etharp_find_entry+0x18a>
            old_pending = i;
 800ca50:	8c3b      	ldrh	r3, [r7, #32]
 800ca52:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ca54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca58:	4965      	ldr	r1, [pc, #404]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	440b      	add	r3, r1
 800ca64:	3312      	adds	r3, #18
 800ca66:	881b      	ldrh	r3, [r3, #0]
 800ca68:	837b      	strh	r3, [r7, #26]
 800ca6a:	e01c      	b.n	800caa6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d919      	bls.n	800caa6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ca72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca76:	495e      	ldr	r1, [pc, #376]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	3312      	adds	r3, #18
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	8b3a      	ldrh	r2, [r7, #24]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d80c      	bhi.n	800caa6 <etharp_find_entry+0x18a>
            old_stable = i;
 800ca8c:	8c3b      	ldrh	r3, [r7, #32]
 800ca8e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ca90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca94:	4956      	ldr	r1, [pc, #344]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800ca96:	4613      	mov	r3, r2
 800ca98:	005b      	lsls	r3, r3, #1
 800ca9a:	4413      	add	r3, r2
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	440b      	add	r3, r1
 800caa0:	3312      	adds	r3, #18
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800caa6:	8c3b      	ldrh	r3, [r7, #32]
 800caa8:	3301      	adds	r3, #1
 800caaa:	b29b      	uxth	r3, r3
 800caac:	843b      	strh	r3, [r7, #32]
 800caae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cab2:	2b09      	cmp	r3, #9
 800cab4:	f77f af4c 	ble.w	800c950 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	f003 0302 	and.w	r3, r3, #2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d108      	bne.n	800cad4 <etharp_find_entry+0x1b8>
 800cac2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cac6:	2b0a      	cmp	r3, #10
 800cac8:	d107      	bne.n	800cada <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800caca:	7afb      	ldrb	r3, [r7, #11]
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d102      	bne.n	800cada <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295
 800cad8:	e085      	b.n	800cbe6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cada:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cade:	2b09      	cmp	r3, #9
 800cae0:	dc02      	bgt.n	800cae8 <etharp_find_entry+0x1cc>
    i = empty;
 800cae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cae4:	843b      	strh	r3, [r7, #32]
 800cae6:	e039      	b.n	800cb5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cae8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800caec:	2b09      	cmp	r3, #9
 800caee:	dc14      	bgt.n	800cb1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800caf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800caf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800caf8:	493d      	ldr	r1, [pc, #244]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800cafa:	4613      	mov	r3, r2
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	4413      	add	r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	440b      	add	r3, r1
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d018      	beq.n	800cb3c <etharp_find_entry+0x220>
 800cb0a:	4b3a      	ldr	r3, [pc, #232]	; (800cbf4 <etharp_find_entry+0x2d8>)
 800cb0c:	f240 126d 	movw	r2, #365	; 0x16d
 800cb10:	493b      	ldr	r1, [pc, #236]	; (800cc00 <etharp_find_entry+0x2e4>)
 800cb12:	483a      	ldr	r0, [pc, #232]	; (800cbfc <etharp_find_entry+0x2e0>)
 800cb14:	f002 f94a 	bl	800edac <iprintf>
 800cb18:	e010      	b.n	800cb3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cb1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	dc02      	bgt.n	800cb28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cb22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb24:	843b      	strh	r3, [r7, #32]
 800cb26:	e009      	b.n	800cb3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cb28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cb2c:	2b09      	cmp	r3, #9
 800cb2e:	dc02      	bgt.n	800cb36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cb30:	8bfb      	ldrh	r3, [r7, #30]
 800cb32:	843b      	strh	r3, [r7, #32]
 800cb34:	e002      	b.n	800cb3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cb36:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3a:	e054      	b.n	800cbe6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb40:	2b09      	cmp	r3, #9
 800cb42:	dd06      	ble.n	800cb52 <etharp_find_entry+0x236>
 800cb44:	4b2b      	ldr	r3, [pc, #172]	; (800cbf4 <etharp_find_entry+0x2d8>)
 800cb46:	f240 127f 	movw	r2, #383	; 0x17f
 800cb4a:	492e      	ldr	r1, [pc, #184]	; (800cc04 <etharp_find_entry+0x2e8>)
 800cb4c:	482b      	ldr	r0, [pc, #172]	; (800cbfc <etharp_find_entry+0x2e0>)
 800cb4e:	f002 f92d 	bl	800edac <iprintf>
    etharp_free_entry(i);
 800cb52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fe06 	bl	800c768 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb60:	2b09      	cmp	r3, #9
 800cb62:	dd06      	ble.n	800cb72 <etharp_find_entry+0x256>
 800cb64:	4b23      	ldr	r3, [pc, #140]	; (800cbf4 <etharp_find_entry+0x2d8>)
 800cb66:	f240 1283 	movw	r2, #387	; 0x183
 800cb6a:	4926      	ldr	r1, [pc, #152]	; (800cc04 <etharp_find_entry+0x2e8>)
 800cb6c:	4823      	ldr	r0, [pc, #140]	; (800cbfc <etharp_find_entry+0x2e0>)
 800cb6e:	f002 f91d 	bl	800edac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cb72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb76:	491e      	ldr	r1, [pc, #120]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	440b      	add	r3, r1
 800cb82:	3314      	adds	r3, #20
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d006      	beq.n	800cb98 <etharp_find_entry+0x27c>
 800cb8a:	4b1a      	ldr	r3, [pc, #104]	; (800cbf4 <etharp_find_entry+0x2d8>)
 800cb8c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cb90:	491d      	ldr	r1, [pc, #116]	; (800cc08 <etharp_find_entry+0x2ec>)
 800cb92:	481a      	ldr	r0, [pc, #104]	; (800cbfc <etharp_find_entry+0x2e0>)
 800cb94:	f002 f90a 	bl	800edac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cb9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6819      	ldr	r1, [r3, #0]
 800cba6:	4812      	ldr	r0, [pc, #72]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	4403      	add	r3, r0
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cbb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbba:	490d      	ldr	r1, [pc, #52]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	440b      	add	r3, r1
 800cbc6:	3312      	adds	r3, #18
 800cbc8:	2200      	movs	r2, #0
 800cbca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cbcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbd0:	4907      	ldr	r1, [pc, #28]	; (800cbf0 <etharp_find_entry+0x2d4>)
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	440b      	add	r3, r1
 800cbdc:	3308      	adds	r3, #8
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cbe2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3728      	adds	r7, #40	; 0x28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000140 	.word	0x20000140
 800cbf4:	08012680 	.word	0x08012680
 800cbf8:	080126b8 	.word	0x080126b8
 800cbfc:	080126f8 	.word	0x080126f8
 800cc00:	08012720 	.word	0x08012720
 800cc04:	08012738 	.word	0x08012738
 800cc08:	0801274c 	.word	0x0801274c

0800cc0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc20:	2b06      	cmp	r3, #6
 800cc22:	d006      	beq.n	800cc32 <etharp_update_arp_entry+0x26>
 800cc24:	4b48      	ldr	r3, [pc, #288]	; (800cd48 <etharp_update_arp_entry+0x13c>)
 800cc26:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cc2a:	4948      	ldr	r1, [pc, #288]	; (800cd4c <etharp_update_arp_entry+0x140>)
 800cc2c:	4848      	ldr	r0, [pc, #288]	; (800cd50 <etharp_update_arp_entry+0x144>)
 800cc2e:	f002 f8bd 	bl	800edac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d012      	beq.n	800cc5e <etharp_update_arp_entry+0x52>
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00e      	beq.n	800cc5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68f9      	ldr	r1, [r7, #12]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f001 f8fe 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800cc4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d105      	bne.n	800cc5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc5a:	2be0      	cmp	r3, #224	; 0xe0
 800cc5c:	d102      	bne.n	800cc64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc5e:	f06f 030f 	mvn.w	r3, #15
 800cc62:	e06c      	b.n	800cd3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	68b8      	ldr	r0, [r7, #8]
 800cc6c:	f7ff fe56 	bl	800c91c <etharp_find_entry>
 800cc70:	4603      	mov	r3, r0
 800cc72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cc74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	da02      	bge.n	800cc82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cc7c:	8afb      	ldrh	r3, [r7, #22]
 800cc7e:	b25b      	sxtb	r3, r3
 800cc80:	e05d      	b.n	800cd3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cc82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc86:	4933      	ldr	r1, [pc, #204]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800cc88:	4613      	mov	r3, r2
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	440b      	add	r3, r1
 800cc92:	3314      	adds	r3, #20
 800cc94:	2202      	movs	r2, #2
 800cc96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cc98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc9c:	492d      	ldr	r1, [pc, #180]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800cc9e:	4613      	mov	r3, r2
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	4413      	add	r3, r2
 800cca4:	00db      	lsls	r3, r3, #3
 800cca6:	440b      	add	r3, r1
 800cca8:	3308      	adds	r3, #8
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ccae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	3308      	adds	r3, #8
 800ccbc:	4a25      	ldr	r2, [pc, #148]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800ccbe:	4413      	add	r3, r2
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	2206      	movs	r2, #6
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f002 f840 	bl	800ed4c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccd0:	4920      	ldr	r1, [pc, #128]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	4413      	add	r3, r2
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	440b      	add	r3, r1
 800ccdc:	3312      	adds	r3, #18
 800ccde:	2200      	movs	r2, #0
 800cce0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cce2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cce6:	491b      	ldr	r1, [pc, #108]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800cce8:	4613      	mov	r3, r2
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	4413      	add	r3, r2
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	440b      	add	r3, r1
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d021      	beq.n	800cd3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ccf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccfc:	4915      	ldr	r1, [pc, #84]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800ccfe:	4613      	mov	r3, r2
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	4413      	add	r3, r2
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	440b      	add	r3, r1
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cd0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd10:	4910      	ldr	r1, [pc, #64]	; (800cd54 <etharp_update_arp_entry+0x148>)
 800cd12:	4613      	mov	r3, r2
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	4413      	add	r3, r2
 800cd18:	00db      	lsls	r3, r3, #3
 800cd1a:	440b      	add	r3, r1
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6939      	ldr	r1, [r7, #16]
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f001 ff91 	bl	800ec58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cd36:	6938      	ldr	r0, [r7, #16]
 800cd38:	f7f9 fb04 	bl	8006344 <pbuf_free>
  }
  return ERR_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	08012680 	.word	0x08012680
 800cd4c:	08012778 	.word	0x08012778
 800cd50:	080126f8 	.word	0x080126f8
 800cd54:	20000140 	.word	0x20000140

0800cd58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e01e      	b.n	800cda4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cd66:	4913      	ldr	r1, [pc, #76]	; (800cdb4 <etharp_cleanup_netif+0x5c>)
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4413      	add	r3, r2
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	440b      	add	r3, r1
 800cd74:	3314      	adds	r3, #20
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cd7a:	7afb      	ldrb	r3, [r7, #11]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00e      	beq.n	800cd9e <etharp_cleanup_netif+0x46>
 800cd80:	490c      	ldr	r1, [pc, #48]	; (800cdb4 <etharp_cleanup_netif+0x5c>)
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	4613      	mov	r3, r2
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	440b      	add	r3, r1
 800cd8e:	3308      	adds	r3, #8
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d102      	bne.n	800cd9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f7ff fce5 	bl	800c768 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3301      	adds	r3, #1
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b09      	cmp	r3, #9
 800cda8:	dddd      	ble.n	800cd66 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20000140 	.word	0x20000140

0800cdb8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cdb8:	b5b0      	push	{r4, r5, r7, lr}
 800cdba:	b08a      	sub	sp, #40	; 0x28
 800cdbc:	af04      	add	r7, sp, #16
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d107      	bne.n	800cdd8 <etharp_input+0x20>
 800cdc8:	4b3d      	ldr	r3, [pc, #244]	; (800cec0 <etharp_input+0x108>)
 800cdca:	f240 228a 	movw	r2, #650	; 0x28a
 800cdce:	493d      	ldr	r1, [pc, #244]	; (800cec4 <etharp_input+0x10c>)
 800cdd0:	483d      	ldr	r0, [pc, #244]	; (800cec8 <etharp_input+0x110>)
 800cdd2:	f001 ffeb 	bl	800edac <iprintf>
 800cdd6:	e06f      	b.n	800ceb8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cde8:	d10c      	bne.n	800ce04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cdee:	2b06      	cmp	r3, #6
 800cdf0:	d108      	bne.n	800ce04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d104      	bne.n	800ce04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ce00:	2b08      	cmp	r3, #8
 800ce02:	d003      	beq.n	800ce0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7f9 fa9d 	bl	8006344 <pbuf_free>
    return;
 800ce0a:	e055      	b.n	800ceb8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	330e      	adds	r3, #14
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	3318      	adds	r3, #24
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <etharp_input+0x74>
    for_us = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	75fb      	strb	r3, [r7, #23]
 800ce2a:	e009      	b.n	800ce40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	3304      	adds	r3, #4
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	bf0c      	ite	eq
 800ce38:	2301      	moveq	r3, #1
 800ce3a:	2300      	movne	r3, #0
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	f103 0208 	add.w	r2, r3, #8
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <etharp_input+0x98>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e000      	b.n	800ce52 <etharp_input+0x9a>
 800ce50:	2302      	movs	r3, #2
 800ce52:	f107 010c 	add.w	r1, r7, #12
 800ce56:	6838      	ldr	r0, [r7, #0]
 800ce58:	f7ff fed8 	bl	800cc0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	88db      	ldrh	r3, [r3, #6]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce66:	d003      	beq.n	800ce70 <etharp_input+0xb8>
 800ce68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce6c:	d01e      	beq.n	800ceac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ce6e:	e020      	b.n	800ceb2 <etharp_input+0xfa>
      if (for_us) {
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01c      	beq.n	800ceb0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ce8c:	693a      	ldr	r2, [r7, #16]
 800ce8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ce90:	2102      	movs	r1, #2
 800ce92:	9103      	str	r1, [sp, #12]
 800ce94:	f107 010c 	add.w	r1, r7, #12
 800ce98:	9102      	str	r1, [sp, #8]
 800ce9a:	9201      	str	r2, [sp, #4]
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	462b      	mov	r3, r5
 800cea0:	4622      	mov	r2, r4
 800cea2:	4601      	mov	r1, r0
 800cea4:	6838      	ldr	r0, [r7, #0]
 800cea6:	f000 faeb 	bl	800d480 <etharp_raw>
      break;
 800ceaa:	e001      	b.n	800ceb0 <etharp_input+0xf8>
      break;
 800ceac:	bf00      	nop
 800ceae:	e000      	b.n	800ceb2 <etharp_input+0xfa>
      break;
 800ceb0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7f9 fa46 	bl	8006344 <pbuf_free>
}
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bdb0      	pop	{r4, r5, r7, pc}
 800cebe:	bf00      	nop
 800cec0:	08012680 	.word	0x08012680
 800cec4:	080127d0 	.word	0x080127d0
 800cec8:	080126f8 	.word	0x080126f8

0800cecc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af02      	add	r7, sp, #8
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	4613      	mov	r3, r2
 800ced8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ceda:	79fa      	ldrb	r2, [r7, #7]
 800cedc:	4944      	ldr	r1, [pc, #272]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cede:	4613      	mov	r3, r2
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	4413      	add	r3, r2
 800cee4:	00db      	lsls	r3, r3, #3
 800cee6:	440b      	add	r3, r1
 800cee8:	3314      	adds	r3, #20
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d806      	bhi.n	800cefe <etharp_output_to_arp_index+0x32>
 800cef0:	4b40      	ldr	r3, [pc, #256]	; (800cff4 <etharp_output_to_arp_index+0x128>)
 800cef2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cef6:	4940      	ldr	r1, [pc, #256]	; (800cff8 <etharp_output_to_arp_index+0x12c>)
 800cef8:	4840      	ldr	r0, [pc, #256]	; (800cffc <etharp_output_to_arp_index+0x130>)
 800cefa:	f001 ff57 	bl	800edac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cefe:	79fa      	ldrb	r2, [r7, #7]
 800cf00:	493b      	ldr	r1, [pc, #236]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf02:	4613      	mov	r3, r2
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	4413      	add	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3314      	adds	r3, #20
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d153      	bne.n	800cfbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cf14:	79fa      	ldrb	r2, [r7, #7]
 800cf16:	4936      	ldr	r1, [pc, #216]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf18:	4613      	mov	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	4413      	add	r3, r2
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	440b      	add	r3, r1
 800cf22:	3312      	adds	r3, #18
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cf2a:	d919      	bls.n	800cf60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cf2c:	79fa      	ldrb	r2, [r7, #7]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	4a2e      	ldr	r2, [pc, #184]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf38:	4413      	add	r3, r2
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 fb4c 	bl	800d5dc <etharp_request>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d138      	bne.n	800cfbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf4a:	79fa      	ldrb	r2, [r7, #7]
 800cf4c:	4928      	ldr	r1, [pc, #160]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf4e:	4613      	mov	r3, r2
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	4413      	add	r3, r2
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	440b      	add	r3, r1
 800cf58:	3314      	adds	r3, #20
 800cf5a:	2203      	movs	r2, #3
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e02d      	b.n	800cfbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cf60:	79fa      	ldrb	r2, [r7, #7]
 800cf62:	4923      	ldr	r1, [pc, #140]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf64:	4613      	mov	r3, r2
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	4413      	add	r3, r2
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	440b      	add	r3, r1
 800cf6e:	3312      	adds	r3, #18
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cf76:	d321      	bcc.n	800cfbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cf78:	79fa      	ldrb	r2, [r7, #7]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	4413      	add	r3, r2
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	4a1b      	ldr	r2, [pc, #108]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf84:	4413      	add	r3, r2
 800cf86:	1d19      	adds	r1, r3, #4
 800cf88:	79fa      	ldrb	r2, [r7, #7]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	00db      	lsls	r3, r3, #3
 800cf92:	3308      	adds	r3, #8
 800cf94:	4a16      	ldr	r2, [pc, #88]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cf96:	4413      	add	r3, r2
 800cf98:	3304      	adds	r3, #4
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f000 fafb 	bl	800d598 <etharp_request_dst>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d109      	bne.n	800cfbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cfa8:	79fa      	ldrb	r2, [r7, #7]
 800cfaa:	4911      	ldr	r1, [pc, #68]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cfac:	4613      	mov	r3, r2
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	4413      	add	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	440b      	add	r3, r1
 800cfb6:	3314      	adds	r3, #20
 800cfb8:	2203      	movs	r2, #3
 800cfba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cfc2:	79fa      	ldrb	r2, [r7, #7]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	005b      	lsls	r3, r3, #1
 800cfc8:	4413      	add	r3, r2
 800cfca:	00db      	lsls	r3, r3, #3
 800cfcc:	3308      	adds	r3, #8
 800cfce:	4a08      	ldr	r2, [pc, #32]	; (800cff0 <etharp_output_to_arp_index+0x124>)
 800cfd0:	4413      	add	r3, r2
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	460a      	mov	r2, r1
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f001 fe3a 	bl	800ec58 <ethernet_output>
 800cfe4:	4603      	mov	r3, r0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20000140 	.word	0x20000140
 800cff4:	08012680 	.word	0x08012680
 800cff8:	080127f0 	.word	0x080127f0
 800cffc:	080126f8 	.word	0x080126f8

0800d000 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b08a      	sub	sp, #40	; 0x28
 800d004:	af02      	add	r7, sp, #8
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d106      	bne.n	800d024 <etharp_output+0x24>
 800d016:	4b73      	ldr	r3, [pc, #460]	; (800d1e4 <etharp_output+0x1e4>)
 800d018:	f240 321e 	movw	r2, #798	; 0x31e
 800d01c:	4972      	ldr	r1, [pc, #456]	; (800d1e8 <etharp_output+0x1e8>)
 800d01e:	4873      	ldr	r0, [pc, #460]	; (800d1ec <etharp_output+0x1ec>)
 800d020:	f001 fec4 	bl	800edac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d106      	bne.n	800d038 <etharp_output+0x38>
 800d02a:	4b6e      	ldr	r3, [pc, #440]	; (800d1e4 <etharp_output+0x1e4>)
 800d02c:	f240 321f 	movw	r2, #799	; 0x31f
 800d030:	496f      	ldr	r1, [pc, #444]	; (800d1f0 <etharp_output+0x1f0>)
 800d032:	486e      	ldr	r0, [pc, #440]	; (800d1ec <etharp_output+0x1ec>)
 800d034:	f001 feba 	bl	800edac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <etharp_output+0x4c>
 800d03e:	4b69      	ldr	r3, [pc, #420]	; (800d1e4 <etharp_output+0x1e4>)
 800d040:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d044:	496b      	ldr	r1, [pc, #428]	; (800d1f4 <etharp_output+0x1f4>)
 800d046:	4869      	ldr	r0, [pc, #420]	; (800d1ec <etharp_output+0x1ec>)
 800d048:	f001 feb0 	bl	800edac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	68f9      	ldr	r1, [r7, #12]
 800d052:	4618      	mov	r0, r3
 800d054:	f000 fef8 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d05e:	4b66      	ldr	r3, [pc, #408]	; (800d1f8 <etharp_output+0x1f8>)
 800d060:	61fb      	str	r3, [r7, #28]
 800d062:	e0af      	b.n	800d1c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d06c:	2be0      	cmp	r3, #224	; 0xe0
 800d06e:	d118      	bne.n	800d0a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d070:	2301      	movs	r3, #1
 800d072:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d074:	2300      	movs	r3, #0
 800d076:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d078:	235e      	movs	r3, #94	; 0x5e
 800d07a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3301      	adds	r3, #1
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d086:	b2db      	uxtb	r3, r3
 800d088:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3302      	adds	r3, #2
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	3303      	adds	r3, #3
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d09a:	f107 0310 	add.w	r3, r7, #16
 800d09e:	61fb      	str	r3, [r7, #28]
 800d0a0:	e090      	b.n	800d1c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	405a      	eors	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d012      	beq.n	800d0e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d0c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00b      	beq.n	800d0e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	330c      	adds	r3, #12
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	61bb      	str	r3, [r7, #24]
 800d0d8:	e002      	b.n	800d0e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d0da:	f06f 0303 	mvn.w	r3, #3
 800d0de:	e07d      	b.n	800d1dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d0e0:	4b46      	ldr	r3, [pc, #280]	; (800d1fc <etharp_output+0x1fc>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4a46      	ldr	r2, [pc, #280]	; (800d200 <etharp_output+0x200>)
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	440b      	add	r3, r1
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	4413      	add	r3, r2
 800d0f2:	3314      	adds	r3, #20
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d925      	bls.n	800d146 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d0fa:	4b40      	ldr	r3, [pc, #256]	; (800d1fc <etharp_output+0x1fc>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	4619      	mov	r1, r3
 800d100:	4a3f      	ldr	r2, [pc, #252]	; (800d200 <etharp_output+0x200>)
 800d102:	460b      	mov	r3, r1
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	440b      	add	r3, r1
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	4413      	add	r3, r2
 800d10c:	3308      	adds	r3, #8
 800d10e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	429a      	cmp	r2, r3
 800d114:	d117      	bne.n	800d146 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	4b38      	ldr	r3, [pc, #224]	; (800d1fc <etharp_output+0x1fc>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	4618      	mov	r0, r3
 800d120:	4937      	ldr	r1, [pc, #220]	; (800d200 <etharp_output+0x200>)
 800d122:	4603      	mov	r3, r0
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	4403      	add	r3, r0
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	440b      	add	r3, r1
 800d12c:	3304      	adds	r3, #4
 800d12e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d130:	429a      	cmp	r2, r3
 800d132:	d108      	bne.n	800d146 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d134:	4b31      	ldr	r3, [pc, #196]	; (800d1fc <etharp_output+0x1fc>)
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	461a      	mov	r2, r3
 800d13a:	68b9      	ldr	r1, [r7, #8]
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff fec5 	bl	800cecc <etharp_output_to_arp_index>
 800d142:	4603      	mov	r3, r0
 800d144:	e04a      	b.n	800d1dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d146:	2300      	movs	r3, #0
 800d148:	75fb      	strb	r3, [r7, #23]
 800d14a:	e031      	b.n	800d1b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d14c:	7dfa      	ldrb	r2, [r7, #23]
 800d14e:	492c      	ldr	r1, [pc, #176]	; (800d200 <etharp_output+0x200>)
 800d150:	4613      	mov	r3, r2
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	4413      	add	r3, r2
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	440b      	add	r3, r1
 800d15a:	3314      	adds	r3, #20
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d923      	bls.n	800d1aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d162:	7dfa      	ldrb	r2, [r7, #23]
 800d164:	4926      	ldr	r1, [pc, #152]	; (800d200 <etharp_output+0x200>)
 800d166:	4613      	mov	r3, r2
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	4413      	add	r3, r2
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	440b      	add	r3, r1
 800d170:	3308      	adds	r3, #8
 800d172:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	429a      	cmp	r2, r3
 800d178:	d117      	bne.n	800d1aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	6819      	ldr	r1, [r3, #0]
 800d17e:	7dfa      	ldrb	r2, [r7, #23]
 800d180:	481f      	ldr	r0, [pc, #124]	; (800d200 <etharp_output+0x200>)
 800d182:	4613      	mov	r3, r2
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4413      	add	r3, r2
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	4403      	add	r3, r0
 800d18c:	3304      	adds	r3, #4
 800d18e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d190:	4299      	cmp	r1, r3
 800d192:	d10a      	bne.n	800d1aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d194:	4a19      	ldr	r2, [pc, #100]	; (800d1fc <etharp_output+0x1fc>)
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d19a:	7dfb      	ldrb	r3, [r7, #23]
 800d19c:	461a      	mov	r2, r3
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff fe93 	bl	800cecc <etharp_output_to_arp_index>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	e018      	b.n	800d1dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	75fb      	strb	r3, [r7, #23]
 800d1b0:	7dfb      	ldrb	r3, [r7, #23]
 800d1b2:	2b09      	cmp	r3, #9
 800d1b4:	d9ca      	bls.n	800d14c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	69b9      	ldr	r1, [r7, #24]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 f822 	bl	800d204 <etharp_query>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	e00b      	b.n	800d1dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d1ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f001 fd3f 	bl	800ec58 <ethernet_output>
 800d1da:	4603      	mov	r3, r0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3720      	adds	r7, #32
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	08012680 	.word	0x08012680
 800d1e8:	080127d0 	.word	0x080127d0
 800d1ec:	080126f8 	.word	0x080126f8
 800d1f0:	08012820 	.word	0x08012820
 800d1f4:	080127c0 	.word	0x080127c0
 800d1f8:	08012e3c 	.word	0x08012e3c
 800d1fc:	20000230 	.word	0x20000230
 800d200:	20000140 	.word	0x20000140

0800d204 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08c      	sub	sp, #48	; 0x30
 800d208:	af02      	add	r7, sp, #8
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	3326      	adds	r3, #38	; 0x26
 800d214:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d216:	23ff      	movs	r3, #255	; 0xff
 800d218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d21c:	2300      	movs	r3, #0
 800d21e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68f9      	ldr	r1, [r7, #12]
 800d226:	4618      	mov	r0, r3
 800d228:	f000 fe0e 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10c      	bne.n	800d24c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d23a:	2be0      	cmp	r3, #224	; 0xe0
 800d23c:	d006      	beq.n	800d24c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d003      	beq.n	800d24c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d102      	bne.n	800d252 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d24c:	f06f 030f 	mvn.w	r3, #15
 800d250:	e101      	b.n	800d456 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d252:	68fa      	ldr	r2, [r7, #12]
 800d254:	2101      	movs	r1, #1
 800d256:	68b8      	ldr	r0, [r7, #8]
 800d258:	f7ff fb60 	bl	800c91c <etharp_find_entry>
 800d25c:	4603      	mov	r3, r0
 800d25e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d264:	2b00      	cmp	r3, #0
 800d266:	da02      	bge.n	800d26e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d268:	8a7b      	ldrh	r3, [r7, #18]
 800d26a:	b25b      	sxtb	r3, r3
 800d26c:	e0f3      	b.n	800d456 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d26e:	8a7b      	ldrh	r3, [r7, #18]
 800d270:	2b7e      	cmp	r3, #126	; 0x7e
 800d272:	d906      	bls.n	800d282 <etharp_query+0x7e>
 800d274:	4b7a      	ldr	r3, [pc, #488]	; (800d460 <etharp_query+0x25c>)
 800d276:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d27a:	497a      	ldr	r1, [pc, #488]	; (800d464 <etharp_query+0x260>)
 800d27c:	487a      	ldr	r0, [pc, #488]	; (800d468 <etharp_query+0x264>)
 800d27e:	f001 fd95 	bl	800edac <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d282:	8a7b      	ldrh	r3, [r7, #18]
 800d284:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d286:	7c7a      	ldrb	r2, [r7, #17]
 800d288:	4978      	ldr	r1, [pc, #480]	; (800d46c <etharp_query+0x268>)
 800d28a:	4613      	mov	r3, r2
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4413      	add	r3, r2
 800d290:	00db      	lsls	r3, r3, #3
 800d292:	440b      	add	r3, r1
 800d294:	3314      	adds	r3, #20
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d115      	bne.n	800d2c8 <etharp_query+0xc4>
    is_new_entry = 1;
 800d29c:	2301      	movs	r3, #1
 800d29e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d2a0:	7c7a      	ldrb	r2, [r7, #17]
 800d2a2:	4972      	ldr	r1, [pc, #456]	; (800d46c <etharp_query+0x268>)
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	005b      	lsls	r3, r3, #1
 800d2a8:	4413      	add	r3, r2
 800d2aa:	00db      	lsls	r3, r3, #3
 800d2ac:	440b      	add	r3, r1
 800d2ae:	3314      	adds	r3, #20
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d2b4:	7c7a      	ldrb	r2, [r7, #17]
 800d2b6:	496d      	ldr	r1, [pc, #436]	; (800d46c <etharp_query+0x268>)
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	4413      	add	r3, r2
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	440b      	add	r3, r1
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d2c8:	7c7a      	ldrb	r2, [r7, #17]
 800d2ca:	4968      	ldr	r1, [pc, #416]	; (800d46c <etharp_query+0x268>)
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	4413      	add	r3, r2
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	440b      	add	r3, r1
 800d2d6:	3314      	adds	r3, #20
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d011      	beq.n	800d302 <etharp_query+0xfe>
 800d2de:	7c7a      	ldrb	r2, [r7, #17]
 800d2e0:	4962      	ldr	r1, [pc, #392]	; (800d46c <etharp_query+0x268>)
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	4413      	add	r3, r2
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	440b      	add	r3, r1
 800d2ec:	3314      	adds	r3, #20
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d806      	bhi.n	800d302 <etharp_query+0xfe>
 800d2f4:	4b5a      	ldr	r3, [pc, #360]	; (800d460 <etharp_query+0x25c>)
 800d2f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d2fa:	495d      	ldr	r1, [pc, #372]	; (800d470 <etharp_query+0x26c>)
 800d2fc:	485a      	ldr	r0, [pc, #360]	; (800d468 <etharp_query+0x264>)
 800d2fe:	f001 fd55 	bl	800edac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <etharp_query+0x10a>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d10c      	bne.n	800d328 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f000 f963 	bl	800d5dc <etharp_request>
 800d316:	4603      	mov	r3, r0
 800d318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d102      	bne.n	800d328 <etharp_query+0x124>
      return result;
 800d322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d326:	e096      	b.n	800d456 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d106      	bne.n	800d33c <etharp_query+0x138>
 800d32e:	4b4c      	ldr	r3, [pc, #304]	; (800d460 <etharp_query+0x25c>)
 800d330:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d334:	494f      	ldr	r1, [pc, #316]	; (800d474 <etharp_query+0x270>)
 800d336:	484c      	ldr	r0, [pc, #304]	; (800d468 <etharp_query+0x264>)
 800d338:	f001 fd38 	bl	800edac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d33c:	7c7a      	ldrb	r2, [r7, #17]
 800d33e:	494b      	ldr	r1, [pc, #300]	; (800d46c <etharp_query+0x268>)
 800d340:	4613      	mov	r3, r2
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	4413      	add	r3, r2
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	440b      	add	r3, r1
 800d34a:	3314      	adds	r3, #20
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d917      	bls.n	800d382 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d352:	4a49      	ldr	r2, [pc, #292]	; (800d478 <etharp_query+0x274>)
 800d354:	7c7b      	ldrb	r3, [r7, #17]
 800d356:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d358:	7c7a      	ldrb	r2, [r7, #17]
 800d35a:	4613      	mov	r3, r2
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	4413      	add	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	3308      	adds	r3, #8
 800d364:	4a41      	ldr	r2, [pc, #260]	; (800d46c <etharp_query+0x268>)
 800d366:	4413      	add	r3, r2
 800d368:	3304      	adds	r3, #4
 800d36a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d36e:	9200      	str	r2, [sp, #0]
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	6879      	ldr	r1, [r7, #4]
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f001 fc6f 	bl	800ec58 <ethernet_output>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d380:	e067      	b.n	800d452 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d382:	7c7a      	ldrb	r2, [r7, #17]
 800d384:	4939      	ldr	r1, [pc, #228]	; (800d46c <etharp_query+0x268>)
 800d386:	4613      	mov	r3, r2
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	4413      	add	r3, r2
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	440b      	add	r3, r1
 800d390:	3314      	adds	r3, #20
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d15c      	bne.n	800d452 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d3a0:	e01c      	b.n	800d3dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	895a      	ldrh	r2, [r3, #10]
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	891b      	ldrh	r3, [r3, #8]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d10a      	bne.n	800d3c4 <etharp_query+0x1c0>
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d006      	beq.n	800d3c4 <etharp_query+0x1c0>
 800d3b6:	4b2a      	ldr	r3, [pc, #168]	; (800d460 <etharp_query+0x25c>)
 800d3b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d3bc:	492f      	ldr	r1, [pc, #188]	; (800d47c <etharp_query+0x278>)
 800d3be:	482a      	ldr	r0, [pc, #168]	; (800d468 <etharp_query+0x264>)
 800d3c0:	f001 fcf4 	bl	800edac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	7b1b      	ldrb	r3, [r3, #12]
 800d3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	61bb      	str	r3, [r7, #24]
        break;
 800d3d4:	e005      	b.n	800d3e2 <etharp_query+0x1de>
      }
      p = p->next;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1df      	bne.n	800d3a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d007      	beq.n	800d3f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d3ee:	200e      	movs	r0, #14
 800d3f0:	f7f9 fa14 	bl	800681c <pbuf_clone>
 800d3f4:	61f8      	str	r0, [r7, #28]
 800d3f6:	e004      	b.n	800d402 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d3fc:	69f8      	ldr	r0, [r7, #28]
 800d3fe:	f7f9 f841 	bl	8006484 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d021      	beq.n	800d44c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d408:	7c7a      	ldrb	r2, [r7, #17]
 800d40a:	4918      	ldr	r1, [pc, #96]	; (800d46c <etharp_query+0x268>)
 800d40c:	4613      	mov	r3, r2
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	4413      	add	r3, r2
 800d412:	00db      	lsls	r3, r3, #3
 800d414:	440b      	add	r3, r1
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00a      	beq.n	800d432 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d41c:	7c7a      	ldrb	r2, [r7, #17]
 800d41e:	4913      	ldr	r1, [pc, #76]	; (800d46c <etharp_query+0x268>)
 800d420:	4613      	mov	r3, r2
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	4413      	add	r3, r2
 800d426:	00db      	lsls	r3, r3, #3
 800d428:	440b      	add	r3, r1
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7f8 ff89 	bl	8006344 <pbuf_free>
      }
      arp_table[i].q = p;
 800d432:	7c7a      	ldrb	r2, [r7, #17]
 800d434:	490d      	ldr	r1, [pc, #52]	; (800d46c <etharp_query+0x268>)
 800d436:	4613      	mov	r3, r2
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	4413      	add	r3, r2
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	440b      	add	r3, r1
 800d440:	69fa      	ldr	r2, [r7, #28]
 800d442:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d44a:	e002      	b.n	800d452 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d44c:	23ff      	movs	r3, #255	; 0xff
 800d44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d456:	4618      	mov	r0, r3
 800d458:	3728      	adds	r7, #40	; 0x28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	08012680 	.word	0x08012680
 800d464:	0801282c 	.word	0x0801282c
 800d468:	080126f8 	.word	0x080126f8
 800d46c:	20000140 	.word	0x20000140
 800d470:	0801283c 	.word	0x0801283c
 800d474:	08012820 	.word	0x08012820
 800d478:	20000230 	.word	0x20000230
 800d47c:	08012864 	.word	0x08012864

0800d480 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08a      	sub	sp, #40	; 0x28
 800d484:	af02      	add	r7, sp, #8
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
 800d48c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d106      	bne.n	800d4a6 <etharp_raw+0x26>
 800d498:	4b3a      	ldr	r3, [pc, #232]	; (800d584 <etharp_raw+0x104>)
 800d49a:	f240 4257 	movw	r2, #1111	; 0x457
 800d49e:	493a      	ldr	r1, [pc, #232]	; (800d588 <etharp_raw+0x108>)
 800d4a0:	483a      	ldr	r0, [pc, #232]	; (800d58c <etharp_raw+0x10c>)
 800d4a2:	f001 fc83 	bl	800edac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d4a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d4aa:	211c      	movs	r1, #28
 800d4ac:	200e      	movs	r0, #14
 800d4ae:	f7f8 fc65 	bl	8005d7c <pbuf_alloc>
 800d4b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d102      	bne.n	800d4c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	e05d      	b.n	800d57c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	895b      	ldrh	r3, [r3, #10]
 800d4c4:	2b1b      	cmp	r3, #27
 800d4c6:	d806      	bhi.n	800d4d6 <etharp_raw+0x56>
 800d4c8:	4b2e      	ldr	r3, [pc, #184]	; (800d584 <etharp_raw+0x104>)
 800d4ca:	f240 4262 	movw	r2, #1122	; 0x462
 800d4ce:	4930      	ldr	r1, [pc, #192]	; (800d590 <etharp_raw+0x110>)
 800d4d0:	482e      	ldr	r0, [pc, #184]	; (800d58c <etharp_raw+0x10c>)
 800d4d2:	f001 fc6b 	bl	800edac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d4dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f7 fbd2 	bl	8004c88 <lwip_htons>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4f2:	2b06      	cmp	r3, #6
 800d4f4:	d006      	beq.n	800d504 <etharp_raw+0x84>
 800d4f6:	4b23      	ldr	r3, [pc, #140]	; (800d584 <etharp_raw+0x104>)
 800d4f8:	f240 4269 	movw	r2, #1129	; 0x469
 800d4fc:	4925      	ldr	r1, [pc, #148]	; (800d594 <etharp_raw+0x114>)
 800d4fe:	4823      	ldr	r0, [pc, #140]	; (800d58c <etharp_raw+0x10c>)
 800d500:	f001 fc54 	bl	800edac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	3308      	adds	r3, #8
 800d508:	2206      	movs	r2, #6
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f001 fc1d 	bl	800ed4c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	3312      	adds	r3, #18
 800d516:	2206      	movs	r2, #6
 800d518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d51a:	4618      	mov	r0, r3
 800d51c:	f001 fc16 	bl	800ed4c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	330e      	adds	r3, #14
 800d524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d526:	6812      	ldr	r2, [r2, #0]
 800d528:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	3318      	adds	r3, #24
 800d52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d530:	6812      	ldr	r2, [r2, #0]
 800d532:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2200      	movs	r2, #0
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f042 0201 	orr.w	r2, r2, #1
 800d540:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2200      	movs	r2, #0
 800d546:	f042 0208 	orr.w	r2, r2, #8
 800d54a:	709a      	strb	r2, [r3, #2]
 800d54c:	2200      	movs	r2, #0
 800d54e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	2206      	movs	r2, #6
 800d554:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2204      	movs	r2, #4
 800d55a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d55c:	f640 0306 	movw	r3, #2054	; 0x806
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	69b9      	ldr	r1, [r7, #24]
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f001 fb75 	bl	800ec58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d56e:	69b8      	ldr	r0, [r7, #24]
 800d570:	f7f8 fee8 	bl	8006344 <pbuf_free>
  p = NULL;
 800d574:	2300      	movs	r3, #0
 800d576:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d578:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3720      	adds	r7, #32
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	08012680 	.word	0x08012680
 800d588:	080127d0 	.word	0x080127d0
 800d58c:	080126f8 	.word	0x080126f8
 800d590:	08012880 	.word	0x08012880
 800d594:	080128b4 	.word	0x080128b4

0800d598 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af04      	add	r7, sp, #16
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	9203      	str	r2, [sp, #12]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	9202      	str	r2, [sp, #8]
 800d5bc:	4a06      	ldr	r2, [pc, #24]	; (800d5d8 <etharp_request_dst+0x40>)
 800d5be:	9201      	str	r2, [sp, #4]
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff ff5a 	bl	800d480 <etharp_raw>
 800d5cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	08012e44 	.word	0x08012e44

0800d5dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d5e6:	4a05      	ldr	r2, [pc, #20]	; (800d5fc <etharp_request+0x20>)
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7ff ffd4 	bl	800d598 <etharp_request_dst>
 800d5f0:	4603      	mov	r3, r0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	08012e3c 	.word	0x08012e3c

0800d600 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b08e      	sub	sp, #56	; 0x38
 800d604:	af04      	add	r7, sp, #16
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d60a:	4b79      	ldr	r3, [pc, #484]	; (800d7f0 <icmp_input+0x1f0>)
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	f003 030f 	and.w	r3, r3, #15
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d622:	2b13      	cmp	r3, #19
 800d624:	f240 80cd 	bls.w	800d7c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	895b      	ldrh	r3, [r3, #10]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	f240 80ca 	bls.w	800d7c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d63c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 80b7 	beq.w	800d7b4 <icmp_input+0x1b4>
 800d646:	2b08      	cmp	r3, #8
 800d648:	f040 80b7 	bne.w	800d7ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d64c:	4b69      	ldr	r3, [pc, #420]	; (800d7f4 <icmp_input+0x1f4>)
 800d64e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d650:	4b67      	ldr	r3, [pc, #412]	; (800d7f0 <icmp_input+0x1f0>)
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d658:	2be0      	cmp	r3, #224	; 0xe0
 800d65a:	f000 80bb 	beq.w	800d7d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d65e:	4b64      	ldr	r3, [pc, #400]	; (800d7f0 <icmp_input+0x1f0>)
 800d660:	695b      	ldr	r3, [r3, #20]
 800d662:	4a63      	ldr	r2, [pc, #396]	; (800d7f0 <icmp_input+0x1f0>)
 800d664:	6812      	ldr	r2, [r2, #0]
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f000 fbed 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	f040 80b1 	bne.w	800d7d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	891b      	ldrh	r3, [r3, #8]
 800d67a:	2b07      	cmp	r3, #7
 800d67c:	f240 80a5 	bls.w	800d7ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d680:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d682:	330e      	adds	r3, #14
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7f8 fdc6 	bl	8006218 <pbuf_add_header>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d04b      	beq.n	800d72a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	891a      	ldrh	r2, [r3, #8]
 800d696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d698:	4413      	add	r3, r2
 800d69a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	891b      	ldrh	r3, [r3, #8]
 800d6a0:	8b7a      	ldrh	r2, [r7, #26]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	f0c0 809a 	bcc.w	800d7dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d6a8:	8b7b      	ldrh	r3, [r7, #26]
 800d6aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	200e      	movs	r0, #14
 800d6b2:	f7f8 fb63 	bl	8005d7c <pbuf_alloc>
 800d6b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 8090 	beq.w	800d7e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	895b      	ldrh	r3, [r3, #10]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d203      	bcs.n	800d6d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d6ce:	6978      	ldr	r0, [r7, #20]
 800d6d0:	f7f8 fe38 	bl	8006344 <pbuf_free>
          goto icmperr;
 800d6d4:	e085      	b.n	800d7e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d6dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f001 fb34 	bl	800ed4c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d6e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6978      	ldr	r0, [r7, #20]
 800d6ea:	f7f8 fda5 	bl	8006238 <pbuf_remove_header>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d009      	beq.n	800d708 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d6f4:	4b40      	ldr	r3, [pc, #256]	; (800d7f8 <icmp_input+0x1f8>)
 800d6f6:	22b6      	movs	r2, #182	; 0xb6
 800d6f8:	4940      	ldr	r1, [pc, #256]	; (800d7fc <icmp_input+0x1fc>)
 800d6fa:	4841      	ldr	r0, [pc, #260]	; (800d800 <icmp_input+0x200>)
 800d6fc:	f001 fb56 	bl	800edac <iprintf>
          pbuf_free(r);
 800d700:	6978      	ldr	r0, [r7, #20]
 800d702:	f7f8 fe1f 	bl	8006344 <pbuf_free>
          goto icmperr;
 800d706:	e06c      	b.n	800d7e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	6978      	ldr	r0, [r7, #20]
 800d70c:	f7f8 ff42 	bl	8006594 <pbuf_copy>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d716:	6978      	ldr	r0, [r7, #20]
 800d718:	f7f8 fe14 	bl	8006344 <pbuf_free>
          goto icmperr;
 800d71c:	e061      	b.n	800d7e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7f8 fe10 	bl	8006344 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	607b      	str	r3, [r7, #4]
 800d728:	e00f      	b.n	800d74a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d72a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d72c:	330e      	adds	r3, #14
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7f8 fd81 	bl	8006238 <pbuf_remove_header>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d006      	beq.n	800d74a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d73c:	4b2e      	ldr	r3, [pc, #184]	; (800d7f8 <icmp_input+0x1f8>)
 800d73e:	22c7      	movs	r2, #199	; 0xc7
 800d740:	4930      	ldr	r1, [pc, #192]	; (800d804 <icmp_input+0x204>)
 800d742:	482f      	ldr	r0, [pc, #188]	; (800d800 <icmp_input+0x200>)
 800d744:	f001 fb32 	bl	800edac <iprintf>
          goto icmperr;
 800d748:	e04b      	b.n	800d7e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7f8 fd5f 	bl	8006218 <pbuf_add_header>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d12b      	bne.n	800d7b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d76e:	4b20      	ldr	r3, [pc, #128]	; (800d7f0 <icmp_input+0x1f0>)
 800d770:	691a      	ldr	r2, [r3, #16]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	2200      	movs	r2, #0
 800d77a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	2200      	movs	r2, #0
 800d780:	709a      	strb	r2, [r3, #2]
 800d782:	2200      	movs	r2, #0
 800d784:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	22ff      	movs	r2, #255	; 0xff
 800d78a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	729a      	strb	r2, [r3, #10]
 800d792:	2200      	movs	r2, #0
 800d794:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	9302      	str	r3, [sp, #8]
 800d79a:	2301      	movs	r3, #1
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	23ff      	movs	r3, #255	; 0xff
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	69f9      	ldr	r1, [r7, #28]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fa75 	bl	800dc98 <ip4_output_if>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d7b2:	e001      	b.n	800d7b8 <icmp_input+0x1b8>
      break;
 800d7b4:	bf00      	nop
 800d7b6:	e000      	b.n	800d7ba <icmp_input+0x1ba>
      break;
 800d7b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7f8 fdc2 	bl	8006344 <pbuf_free>
  return;
 800d7c0:	e013      	b.n	800d7ea <icmp_input+0x1ea>
    goto lenerr;
 800d7c2:	bf00      	nop
 800d7c4:	e002      	b.n	800d7cc <icmp_input+0x1cc>
    goto lenerr;
 800d7c6:	bf00      	nop
 800d7c8:	e000      	b.n	800d7cc <icmp_input+0x1cc>
        goto lenerr;
 800d7ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7f8 fdb9 	bl	8006344 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7d2:	e00a      	b.n	800d7ea <icmp_input+0x1ea>
        goto icmperr;
 800d7d4:	bf00      	nop
 800d7d6:	e004      	b.n	800d7e2 <icmp_input+0x1e2>
        goto icmperr;
 800d7d8:	bf00      	nop
 800d7da:	e002      	b.n	800d7e2 <icmp_input+0x1e2>
          goto icmperr;
 800d7dc:	bf00      	nop
 800d7de:	e000      	b.n	800d7e2 <icmp_input+0x1e2>
          goto icmperr;
 800d7e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7f8 fdae 	bl	8006344 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d7ea:	3728      	adds	r7, #40	; 0x28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	20004ed0 	.word	0x20004ed0
 800d7f4:	20004ee4 	.word	0x20004ee4
 800d7f8:	080128f8 	.word	0x080128f8
 800d7fc:	08012930 	.word	0x08012930
 800d800:	08012968 	.word	0x08012968
 800d804:	08012990 	.word	0x08012990

0800d808 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d814:	78fb      	ldrb	r3, [r7, #3]
 800d816:	461a      	mov	r2, r3
 800d818:	2103      	movs	r1, #3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f814 	bl	800d848 <icmp_send_response>
}
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d834:	78fb      	ldrb	r3, [r7, #3]
 800d836:	461a      	mov	r2, r3
 800d838:	210b      	movs	r1, #11
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f804 	bl	800d848 <icmp_send_response>
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08c      	sub	sp, #48	; 0x30
 800d84c:	af04      	add	r7, sp, #16
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
 800d854:	4613      	mov	r3, r2
 800d856:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d858:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d85c:	2124      	movs	r1, #36	; 0x24
 800d85e:	2022      	movs	r0, #34	; 0x22
 800d860:	f7f8 fa8c 	bl	8005d7c <pbuf_alloc>
 800d864:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d04c      	beq.n	800d906 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	895b      	ldrh	r3, [r3, #10]
 800d870:	2b23      	cmp	r3, #35	; 0x23
 800d872:	d806      	bhi.n	800d882 <icmp_send_response+0x3a>
 800d874:	4b26      	ldr	r3, [pc, #152]	; (800d910 <icmp_send_response+0xc8>)
 800d876:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d87a:	4926      	ldr	r1, [pc, #152]	; (800d914 <icmp_send_response+0xcc>)
 800d87c:	4826      	ldr	r0, [pc, #152]	; (800d918 <icmp_send_response+0xd0>)
 800d87e:	f001 fa95 	bl	800edac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	78fa      	ldrb	r2, [r7, #3]
 800d892:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	78ba      	ldrb	r2, [r7, #2]
 800d898:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	2200      	movs	r2, #0
 800d89e:	711a      	strb	r2, [r3, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	719a      	strb	r2, [r3, #6]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	f103 0008 	add.w	r0, r3, #8
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	221c      	movs	r2, #28
 800d8bc:	4619      	mov	r1, r3
 800d8be:	f001 fa45 	bl	800ed4c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d8c8:	f107 030c 	add.w	r3, r7, #12
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 f825 	bl	800d91c <ip4_route>
 800d8d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d011      	beq.n	800d8fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	709a      	strb	r2, [r3, #2]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d8e4:	f107 020c 	add.w	r2, r7, #12
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	9302      	str	r3, [sp, #8]
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	9301      	str	r3, [sp, #4]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	23ff      	movs	r3, #255	; 0xff
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	69f8      	ldr	r0, [r7, #28]
 800d8fa:	f000 f9cd 	bl	800dc98 <ip4_output_if>
  }
  pbuf_free(q);
 800d8fe:	69f8      	ldr	r0, [r7, #28]
 800d900:	f7f8 fd20 	bl	8006344 <pbuf_free>
 800d904:	e000      	b.n	800d908 <icmp_send_response+0xc0>
    return;
 800d906:	bf00      	nop
}
 800d908:	3720      	adds	r7, #32
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	080128f8 	.word	0x080128f8
 800d914:	080129c4 	.word	0x080129c4
 800d918:	08012968 	.word	0x08012968

0800d91c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d924:	4b33      	ldr	r3, [pc, #204]	; (800d9f4 <ip4_route+0xd8>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	60fb      	str	r3, [r7, #12]
 800d92a:	e036      	b.n	800d99a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d02b      	beq.n	800d994 <ip4_route+0x78>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d942:	089b      	lsrs	r3, r3, #2
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d022      	beq.n	800d994 <ip4_route+0x78>
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3304      	adds	r3, #4
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d01d      	beq.n	800d994 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3304      	adds	r3, #4
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	405a      	eors	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	3308      	adds	r3, #8
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4013      	ands	r3, r2
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	e038      	b.n	800d9e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d97a:	f003 0302 	and.w	r3, r3, #2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d108      	bne.n	800d994 <ip4_route+0x78>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	330c      	adds	r3, #12
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d101      	bne.n	800d994 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	e028      	b.n	800d9e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1c5      	bne.n	800d92c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d9a0:	4b15      	ldr	r3, [pc, #84]	; (800d9f8 <ip4_route+0xdc>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d01a      	beq.n	800d9de <ip4_route+0xc2>
 800d9a8:	4b13      	ldr	r3, [pc, #76]	; (800d9f8 <ip4_route+0xdc>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d012      	beq.n	800d9de <ip4_route+0xc2>
 800d9b8:	4b0f      	ldr	r3, [pc, #60]	; (800d9f8 <ip4_route+0xdc>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9c0:	f003 0304 	and.w	r3, r3, #4
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00a      	beq.n	800d9de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <ip4_route+0xdc>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d004      	beq.n	800d9de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	2b7f      	cmp	r3, #127	; 0x7f
 800d9dc:	d101      	bne.n	800d9e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e001      	b.n	800d9e6 <ip4_route+0xca>
  }

  return netif_default;
 800d9e2:	4b05      	ldr	r3, [pc, #20]	; (800d9f8 <ip4_route+0xdc>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	20008404 	.word	0x20008404
 800d9f8:	20008408 	.word	0x20008408

0800d9fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	2b00      	cmp	r3, #0
 800da12:	d016      	beq.n	800da42 <ip4_input_accept+0x46>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	3304      	adds	r3, #4
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d011      	beq.n	800da42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da1e:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <ip4_input_accept+0x50>)
 800da20:	695a      	ldr	r2, [r3, #20]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3304      	adds	r3, #4
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d008      	beq.n	800da3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800da2c:	4b07      	ldr	r3, [pc, #28]	; (800da4c <ip4_input_accept+0x50>)
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	6879      	ldr	r1, [r7, #4]
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fa08 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800da38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d001      	beq.n	800da42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800da3e:	2301      	movs	r3, #1
 800da40:	e000      	b.n	800da44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20004ed0 	.word	0x20004ed0

0800da50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	091b      	lsrs	r3, r3, #4
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b04      	cmp	r3, #4
 800da6a:	d004      	beq.n	800da76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7f8 fc69 	bl	8006344 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	e107      	b.n	800dc86 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	f003 030f 	and.w	r3, r3, #15
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	b2db      	uxtb	r3, r3
 800da84:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	885b      	ldrh	r3, [r3, #2]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f7 f8fb 	bl	8004c88 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	891b      	ldrh	r3, [r3, #8]
 800da9a:	89ba      	ldrh	r2, [r7, #12]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d204      	bcs.n	800daaa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800daa0:	89bb      	ldrh	r3, [r7, #12]
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7f8 fac7 	bl	8006038 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	895b      	ldrh	r3, [r3, #10]
 800daae:	89fa      	ldrh	r2, [r7, #14]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d807      	bhi.n	800dac4 <ip4_input+0x74>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	891b      	ldrh	r3, [r3, #8]
 800dab8:	89ba      	ldrh	r2, [r7, #12]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d802      	bhi.n	800dac4 <ip4_input+0x74>
 800dabe:	89fb      	ldrh	r3, [r7, #14]
 800dac0:	2b13      	cmp	r3, #19
 800dac2:	d804      	bhi.n	800dace <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7f8 fc3d 	bl	8006344 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	e0db      	b.n	800dc86 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	4a6f      	ldr	r2, [pc, #444]	; (800dc90 <ip4_input+0x240>)
 800dad4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	4a6d      	ldr	r2, [pc, #436]	; (800dc90 <ip4_input+0x240>)
 800dadc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dade:	4b6c      	ldr	r3, [pc, #432]	; (800dc90 <ip4_input+0x240>)
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dae6:	2be0      	cmp	r3, #224	; 0xe0
 800dae8:	d112      	bne.n	800db10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d007      	beq.n	800db0a <ip4_input+0xba>
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	3304      	adds	r3, #4
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <ip4_input+0xba>
      netif = inp;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	613b      	str	r3, [r7, #16]
 800db08:	e02a      	b.n	800db60 <ip4_input+0x110>
    } else {
      netif = NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	613b      	str	r3, [r7, #16]
 800db0e:	e027      	b.n	800db60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800db10:	6838      	ldr	r0, [r7, #0]
 800db12:	f7ff ff73 	bl	800d9fc <ip4_input_accept>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d002      	beq.n	800db22 <ip4_input+0xd2>
      netif = inp;
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	613b      	str	r3, [r7, #16]
 800db20:	e01e      	b.n	800db60 <ip4_input+0x110>
    } else {
      netif = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800db26:	4b5a      	ldr	r3, [pc, #360]	; (800dc90 <ip4_input+0x240>)
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b7f      	cmp	r3, #127	; 0x7f
 800db2e:	d017      	beq.n	800db60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800db30:	4b58      	ldr	r3, [pc, #352]	; (800dc94 <ip4_input+0x244>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	613b      	str	r3, [r7, #16]
 800db36:	e00e      	b.n	800db56 <ip4_input+0x106>
          if (netif == inp) {
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d006      	beq.n	800db4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800db40:	6938      	ldr	r0, [r7, #16]
 800db42:	f7ff ff5b 	bl	800d9fc <ip4_input_accept>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d108      	bne.n	800db5e <ip4_input+0x10e>
 800db4c:	e000      	b.n	800db50 <ip4_input+0x100>
            continue;
 800db4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	613b      	str	r3, [r7, #16]
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1ed      	bne.n	800db38 <ip4_input+0xe8>
 800db5c:	e000      	b.n	800db60 <ip4_input+0x110>
            break;
 800db5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db60:	4b4b      	ldr	r3, [pc, #300]	; (800dc90 <ip4_input+0x240>)
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	4618      	mov	r0, r3
 800db68:	f000 f96e 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d105      	bne.n	800db7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800db72:	4b47      	ldr	r3, [pc, #284]	; (800dc90 <ip4_input+0x240>)
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db7a:	2be0      	cmp	r3, #224	; 0xe0
 800db7c:	d104      	bne.n	800db88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7f8 fbe0 	bl	8006344 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	e07e      	b.n	800dc86 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d104      	bne.n	800db98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7f8 fbd8 	bl	8006344 <pbuf_free>
    return ERR_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	e076      	b.n	800dc86 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	88db      	ldrh	r3, [r3, #6]
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	461a      	mov	r2, r3
 800dba0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dba4:	4013      	ands	r3, r2
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00b      	beq.n	800dbc2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fc92 	bl	800e4d4 <ip4_reass>
 800dbb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d101      	bne.n	800dbbc <ip4_input+0x16c>
      return ERR_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e064      	b.n	800dc86 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dbc2:	4a33      	ldr	r2, [pc, #204]	; (800dc90 <ip4_input+0x240>)
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dbc8:	4a31      	ldr	r2, [pc, #196]	; (800dc90 <ip4_input+0x240>)
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dbce:	4a30      	ldr	r2, [pc, #192]	; (800dc90 <ip4_input+0x240>)
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	f003 030f 	and.w	r3, r3, #15
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	4b2a      	ldr	r3, [pc, #168]	; (800dc90 <ip4_input+0x240>)
 800dbe6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dbe8:	89fb      	ldrh	r3, [r7, #14]
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7f8 fb23 	bl	8006238 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	7a5b      	ldrb	r3, [r3, #9]
 800dbf6:	2b11      	cmp	r3, #17
 800dbf8:	d006      	beq.n	800dc08 <ip4_input+0x1b8>
 800dbfa:	2b11      	cmp	r3, #17
 800dbfc:	dc13      	bgt.n	800dc26 <ip4_input+0x1d6>
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d00c      	beq.n	800dc1c <ip4_input+0x1cc>
 800dc02:	2b06      	cmp	r3, #6
 800dc04:	d005      	beq.n	800dc12 <ip4_input+0x1c2>
 800dc06:	e00e      	b.n	800dc26 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7fe f988 	bl	800bf20 <udp_input>
        break;
 800dc10:	e026      	b.n	800dc60 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7fa f9cd 	bl	8007fb4 <tcp_input>
        break;
 800dc1a:	e021      	b.n	800dc60 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dc1c:	6839      	ldr	r1, [r7, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff fcee 	bl	800d600 <icmp_input>
        break;
 800dc24:	e01c      	b.n	800dc60 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc26:	4b1a      	ldr	r3, [pc, #104]	; (800dc90 <ip4_input+0x240>)
 800dc28:	695b      	ldr	r3, [r3, #20]
 800dc2a:	6939      	ldr	r1, [r7, #16]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 f90b 	bl	800de48 <ip4_addr_isbroadcast_u32>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10f      	bne.n	800dc58 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc38:	4b15      	ldr	r3, [pc, #84]	; (800dc90 <ip4_input+0x240>)
 800dc3a:	695b      	ldr	r3, [r3, #20]
 800dc3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc40:	2be0      	cmp	r3, #224	; 0xe0
 800dc42:	d009      	beq.n	800dc58 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dc44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7f8 fb67 	bl	800631e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dc50:	2102      	movs	r1, #2
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7ff fdd8 	bl	800d808 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7f8 fb73 	bl	8006344 <pbuf_free>
        break;
 800dc5e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dc60:	4b0b      	ldr	r3, [pc, #44]	; (800dc90 <ip4_input+0x240>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dc66:	4b0a      	ldr	r3, [pc, #40]	; (800dc90 <ip4_input+0x240>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dc6c:	4b08      	ldr	r3, [pc, #32]	; (800dc90 <ip4_input+0x240>)
 800dc6e:	2200      	movs	r2, #0
 800dc70:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dc72:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <ip4_input+0x240>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dc78:	4b05      	ldr	r3, [pc, #20]	; (800dc90 <ip4_input+0x240>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dc7e:	4b04      	ldr	r3, [pc, #16]	; (800dc90 <ip4_input+0x240>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3718      	adds	r7, #24
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20004ed0 	.word	0x20004ed0
 800dc94:	20008404 	.word	0x20008404

0800dc98 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08a      	sub	sp, #40	; 0x28
 800dc9c:	af04      	add	r7, sp, #16
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d009      	beq.n	800dcc4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d003      	beq.n	800dcbe <ip4_output_if+0x26>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d102      	bne.n	800dcc4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dcc4:	78fa      	ldrb	r2, [r7, #3]
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	9302      	str	r3, [sp, #8]
 800dcca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	6979      	ldr	r1, [r7, #20]
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 f805 	bl	800dcec <ip4_output_if_src>
 800dce2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b088      	sub	sp, #32
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	7b9b      	ldrb	r3, [r3, #14]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d006      	beq.n	800dd10 <ip4_output_if_src+0x24>
 800dd02:	4b4b      	ldr	r3, [pc, #300]	; (800de30 <ip4_output_if_src+0x144>)
 800dd04:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dd08:	494a      	ldr	r1, [pc, #296]	; (800de34 <ip4_output_if_src+0x148>)
 800dd0a:	484b      	ldr	r0, [pc, #300]	; (800de38 <ip4_output_if_src+0x14c>)
 800dd0c:	f001 f84e 	bl	800edac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d060      	beq.n	800ddd8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dd16:	2314      	movs	r3, #20
 800dd18:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dd1a:	2114      	movs	r1, #20
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7f8 fa7b 	bl	8006218 <pbuf_add_header>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd28:	f06f 0301 	mvn.w	r3, #1
 800dd2c:	e07c      	b.n	800de28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	895b      	ldrh	r3, [r3, #10]
 800dd38:	2b13      	cmp	r3, #19
 800dd3a:	d806      	bhi.n	800dd4a <ip4_output_if_src+0x5e>
 800dd3c:	4b3c      	ldr	r3, [pc, #240]	; (800de30 <ip4_output_if_src+0x144>)
 800dd3e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dd42:	493e      	ldr	r1, [pc, #248]	; (800de3c <ip4_output_if_src+0x150>)
 800dd44:	483c      	ldr	r0, [pc, #240]	; (800de38 <ip4_output_if_src+0x14c>)
 800dd46:	f001 f831 	bl	800edac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	78fa      	ldrb	r2, [r7, #3]
 800dd4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dd60:	8b7b      	ldrh	r3, [r7, #26]
 800dd62:	089b      	lsrs	r3, r3, #2
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6c:	b2da      	uxtb	r2, r3
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dd78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	891b      	ldrh	r3, [r3, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f6 ff82 	bl	8004c88 <lwip_htons>
 800dd84:	4603      	mov	r3, r0
 800dd86:	461a      	mov	r2, r3
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	719a      	strb	r2, [r3, #6]
 800dd92:	2200      	movs	r2, #0
 800dd94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dd96:	4b2a      	ldr	r3, [pc, #168]	; (800de40 <ip4_output_if_src+0x154>)
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7f6 ff74 	bl	8004c88 <lwip_htons>
 800dda0:	4603      	mov	r3, r0
 800dda2:	461a      	mov	r2, r3
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dda8:	4b25      	ldr	r3, [pc, #148]	; (800de40 <ip4_output_if_src+0x154>)
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	3301      	adds	r3, #1
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	4b23      	ldr	r3, [pc, #140]	; (800de40 <ip4_output_if_src+0x154>)
 800ddb2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d104      	bne.n	800ddc4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ddba:	4b22      	ldr	r3, [pc, #136]	; (800de44 <ip4_output_if_src+0x158>)
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	60da      	str	r2, [r3, #12]
 800ddc2:	e003      	b.n	800ddcc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	729a      	strb	r2, [r3, #10]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	72da      	strb	r2, [r3, #11]
 800ddd6:	e00f      	b.n	800ddf8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	895b      	ldrh	r3, [r3, #10]
 800dddc:	2b13      	cmp	r3, #19
 800ddde:	d802      	bhi.n	800dde6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dde0:	f06f 0301 	mvn.w	r3, #1
 800dde4:	e020      	b.n	800de28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ddf2:	f107 0314 	add.w	r3, r7, #20
 800ddf6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00c      	beq.n	800de1a <ip4_output_if_src+0x12e>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	891a      	ldrh	r2, [r3, #8]
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de08:	429a      	cmp	r2, r3
 800de0a:	d906      	bls.n	800de1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f000 fd4d 	bl	800e8b0 <ip4_frag>
 800de16:	4603      	mov	r3, r0
 800de18:	e006      	b.n	800de28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800de1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	68f9      	ldr	r1, [r7, #12]
 800de22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de24:	4798      	blx	r3
 800de26:	4603      	mov	r3, r0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	080129f0 	.word	0x080129f0
 800de34:	08012a24 	.word	0x08012a24
 800de38:	08012a30 	.word	0x08012a30
 800de3c:	08012a58 	.word	0x08012a58
 800de40:	20000232 	.word	0x20000232
 800de44:	08012e38 	.word	0x08012e38

0800de48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5c:	d002      	beq.n	800de64 <ip4_addr_isbroadcast_u32+0x1c>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d101      	bne.n	800de68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800de64:	2301      	movs	r3, #1
 800de66:	e02a      	b.n	800debe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800de76:	2300      	movs	r3, #0
 800de78:	e021      	b.n	800debe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	3304      	adds	r3, #4
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d101      	bne.n	800de8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800de86:	2300      	movs	r3, #0
 800de88:	e019      	b.n	800debe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	3304      	adds	r3, #4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	405a      	eors	r2, r3
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	3308      	adds	r3, #8
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4013      	ands	r3, r2
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10d      	bne.n	800debc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	3308      	adds	r3, #8
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	43da      	mvns	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	3308      	adds	r3, #8
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d101      	bne.n	800debc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800deb8:	2301      	movs	r3, #1
 800deba:	e000      	b.n	800debe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800debc:	2300      	movs	r3, #0
  }
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3714      	adds	r7, #20
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
	...

0800decc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ded6:	4b12      	ldr	r3, [pc, #72]	; (800df20 <ip_reass_tmr+0x54>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dedc:	e018      	b.n	800df10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	7fdb      	ldrb	r3, [r3, #31]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00b      	beq.n	800defe <ip_reass_tmr+0x32>
      r->timer--;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	7fdb      	ldrb	r3, [r3, #31]
 800deea:	3b01      	subs	r3, #1
 800deec:	b2da      	uxtb	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	e008      	b.n	800df10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800df08:	68b9      	ldr	r1, [r7, #8]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f80a 	bl	800df24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1e3      	bne.n	800dede <ip_reass_tmr+0x12>
    }
  }
}
 800df16:	bf00      	nop
 800df18:	bf00      	nop
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	20000234 	.word	0x20000234

0800df24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b088      	sub	sp, #32
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800df2e:	2300      	movs	r3, #0
 800df30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	429a      	cmp	r2, r3
 800df38:	d105      	bne.n	800df46 <ip_reass_free_complete_datagram+0x22>
 800df3a:	4b45      	ldr	r3, [pc, #276]	; (800e050 <ip_reass_free_complete_datagram+0x12c>)
 800df3c:	22ab      	movs	r2, #171	; 0xab
 800df3e:	4945      	ldr	r1, [pc, #276]	; (800e054 <ip_reass_free_complete_datagram+0x130>)
 800df40:	4845      	ldr	r0, [pc, #276]	; (800e058 <ip_reass_free_complete_datagram+0x134>)
 800df42:	f000 ff33 	bl	800edac <iprintf>
  if (prev != NULL) {
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00a      	beq.n	800df62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	429a      	cmp	r2, r3
 800df54:	d005      	beq.n	800df62 <ip_reass_free_complete_datagram+0x3e>
 800df56:	4b3e      	ldr	r3, [pc, #248]	; (800e050 <ip_reass_free_complete_datagram+0x12c>)
 800df58:	22ad      	movs	r2, #173	; 0xad
 800df5a:	4940      	ldr	r1, [pc, #256]	; (800e05c <ip_reass_free_complete_datagram+0x138>)
 800df5c:	483e      	ldr	r0, [pc, #248]	; (800e058 <ip_reass_free_complete_datagram+0x134>)
 800df5e:	f000 ff25 	bl	800edac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	889b      	ldrh	r3, [r3, #4]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d12a      	bne.n	800dfca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	6858      	ldr	r0, [r3, #4]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	3308      	adds	r3, #8
 800df8a:	2214      	movs	r2, #20
 800df8c:	4619      	mov	r1, r3
 800df8e:	f000 fedd 	bl	800ed4c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800df92:	2101      	movs	r1, #1
 800df94:	69b8      	ldr	r0, [r7, #24]
 800df96:	f7ff fc47 	bl	800d828 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800df9a:	69b8      	ldr	r0, [r7, #24]
 800df9c:	f7f8 fa5a 	bl	8006454 <pbuf_clen>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dfa4:	8bfa      	ldrh	r2, [r7, #30]
 800dfa6:	8a7b      	ldrh	r3, [r7, #18]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfae:	db05      	blt.n	800dfbc <ip_reass_free_complete_datagram+0x98>
 800dfb0:	4b27      	ldr	r3, [pc, #156]	; (800e050 <ip_reass_free_complete_datagram+0x12c>)
 800dfb2:	22bc      	movs	r2, #188	; 0xbc
 800dfb4:	492a      	ldr	r1, [pc, #168]	; (800e060 <ip_reass_free_complete_datagram+0x13c>)
 800dfb6:	4828      	ldr	r0, [pc, #160]	; (800e058 <ip_reass_free_complete_datagram+0x134>)
 800dfb8:	f000 fef8 	bl	800edac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dfbc:	8bfa      	ldrh	r2, [r7, #30]
 800dfbe:	8a7b      	ldrh	r3, [r7, #18]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dfc4:	69b8      	ldr	r0, [r7, #24]
 800dfc6:	f7f8 f9bd 	bl	8006344 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dfd0:	e01f      	b.n	800e012 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7f8 fa36 	bl	8006454 <pbuf_clen>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dfec:	8bfa      	ldrh	r2, [r7, #30]
 800dfee:	8a7b      	ldrh	r3, [r7, #18]
 800dff0:	4413      	add	r3, r2
 800dff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dff6:	db05      	blt.n	800e004 <ip_reass_free_complete_datagram+0xe0>
 800dff8:	4b15      	ldr	r3, [pc, #84]	; (800e050 <ip_reass_free_complete_datagram+0x12c>)
 800dffa:	22cc      	movs	r2, #204	; 0xcc
 800dffc:	4918      	ldr	r1, [pc, #96]	; (800e060 <ip_reass_free_complete_datagram+0x13c>)
 800dffe:	4816      	ldr	r0, [pc, #88]	; (800e058 <ip_reass_free_complete_datagram+0x134>)
 800e000:	f000 fed4 	bl	800edac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e004:	8bfa      	ldrh	r2, [r7, #30]
 800e006:	8a7b      	ldrh	r3, [r7, #18]
 800e008:	4413      	add	r3, r2
 800e00a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7f8 f999 	bl	8006344 <pbuf_free>
  while (p != NULL) {
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1dc      	bne.n	800dfd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f8c2 	bl	800e1a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e020:	4b10      	ldr	r3, [pc, #64]	; (800e064 <ip_reass_free_complete_datagram+0x140>)
 800e022:	881b      	ldrh	r3, [r3, #0]
 800e024:	8bfa      	ldrh	r2, [r7, #30]
 800e026:	429a      	cmp	r2, r3
 800e028:	d905      	bls.n	800e036 <ip_reass_free_complete_datagram+0x112>
 800e02a:	4b09      	ldr	r3, [pc, #36]	; (800e050 <ip_reass_free_complete_datagram+0x12c>)
 800e02c:	22d2      	movs	r2, #210	; 0xd2
 800e02e:	490e      	ldr	r1, [pc, #56]	; (800e068 <ip_reass_free_complete_datagram+0x144>)
 800e030:	4809      	ldr	r0, [pc, #36]	; (800e058 <ip_reass_free_complete_datagram+0x134>)
 800e032:	f000 febb 	bl	800edac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e036:	4b0b      	ldr	r3, [pc, #44]	; (800e064 <ip_reass_free_complete_datagram+0x140>)
 800e038:	881a      	ldrh	r2, [r3, #0]
 800e03a:	8bfb      	ldrh	r3, [r7, #30]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	b29a      	uxth	r2, r3
 800e040:	4b08      	ldr	r3, [pc, #32]	; (800e064 <ip_reass_free_complete_datagram+0x140>)
 800e042:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e044:	8bfb      	ldrh	r3, [r7, #30]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3720      	adds	r7, #32
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	08012a88 	.word	0x08012a88
 800e054:	08012ac4 	.word	0x08012ac4
 800e058:	08012ad0 	.word	0x08012ad0
 800e05c:	08012af8 	.word	0x08012af8
 800e060:	08012b0c 	.word	0x08012b0c
 800e064:	20000238 	.word	0x20000238
 800e068:	08012b2c 	.word	0x08012b2c

0800e06c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08a      	sub	sp, #40	; 0x28
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e076:	2300      	movs	r3, #0
 800e078:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e07e:	2300      	movs	r3, #0
 800e080:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e082:	2300      	movs	r3, #0
 800e084:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e08a:	4b28      	ldr	r3, [pc, #160]	; (800e12c <ip_reass_remove_oldest_datagram+0xc0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e090:	e030      	b.n	800e0f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e094:	695a      	ldr	r2, [r3, #20]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d10c      	bne.n	800e0b8 <ip_reass_remove_oldest_datagram+0x4c>
 800e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a0:	699a      	ldr	r2, [r3, #24]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d106      	bne.n	800e0b8 <ip_reass_remove_oldest_datagram+0x4c>
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	899a      	ldrh	r2, [r3, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	889b      	ldrh	r3, [r3, #4]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d014      	beq.n	800e0e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d104      	bne.n	800e0ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	61bb      	str	r3, [r7, #24]
 800e0cc:	e009      	b.n	800e0e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d0:	7fda      	ldrb	r2, [r3, #31]
 800e0d2:	6a3b      	ldr	r3, [r7, #32]
 800e0d4:	7fdb      	ldrb	r3, [r3, #31]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d803      	bhi.n	800e0e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1cb      	bne.n	800e092 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d008      	beq.n	800e112 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e100:	69b9      	ldr	r1, [r7, #24]
 800e102:	6a38      	ldr	r0, [r7, #32]
 800e104:	f7ff ff0e 	bl	800df24 <ip_reass_free_complete_datagram>
 800e108:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e112:	697a      	ldr	r2, [r7, #20]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	429a      	cmp	r2, r3
 800e118:	da02      	bge.n	800e120 <ip_reass_remove_oldest_datagram+0xb4>
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	dcac      	bgt.n	800e07a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e120:	697b      	ldr	r3, [r7, #20]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3728      	adds	r7, #40	; 0x28
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	20000234 	.word	0x20000234

0800e130 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e13a:	2004      	movs	r0, #4
 800e13c:	f7f7 fa1c 	bl	8005578 <memp_malloc>
 800e140:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d110      	bne.n	800e16a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff ff8e 	bl	800e06c <ip_reass_remove_oldest_datagram>
 800e150:	4602      	mov	r2, r0
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	4293      	cmp	r3, r2
 800e156:	dc03      	bgt.n	800e160 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e158:	2004      	movs	r0, #4
 800e15a:	f7f7 fa0d 	bl	8005578 <memp_malloc>
 800e15e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d101      	bne.n	800e16a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	e016      	b.n	800e198 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e16a:	2220      	movs	r2, #32
 800e16c:	2100      	movs	r1, #0
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f000 fe14 	bl	800ed9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	220f      	movs	r2, #15
 800e178:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e17a:	4b09      	ldr	r3, [pc, #36]	; (800e1a0 <ip_reass_enqueue_new_datagram+0x70>)
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e182:	4a07      	ldr	r2, [pc, #28]	; (800e1a0 <ip_reass_enqueue_new_datagram+0x70>)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	3308      	adds	r3, #8
 800e18c:	2214      	movs	r2, #20
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	4618      	mov	r0, r3
 800e192:	f000 fddb 	bl	800ed4c <memcpy>
  return ipr;
 800e196:	68fb      	ldr	r3, [r7, #12]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20000234 	.word	0x20000234

0800e1a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e1ae:	4b10      	ldr	r3, [pc, #64]	; (800e1f0 <ip_reass_dequeue_datagram+0x4c>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d104      	bne.n	800e1c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a0c      	ldr	r2, [pc, #48]	; (800e1f0 <ip_reass_dequeue_datagram+0x4c>)
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	e00d      	b.n	800e1de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d106      	bne.n	800e1d6 <ip_reass_dequeue_datagram+0x32>
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <ip_reass_dequeue_datagram+0x50>)
 800e1ca:	f240 1245 	movw	r2, #325	; 0x145
 800e1ce:	490a      	ldr	r1, [pc, #40]	; (800e1f8 <ip_reass_dequeue_datagram+0x54>)
 800e1d0:	480a      	ldr	r0, [pc, #40]	; (800e1fc <ip_reass_dequeue_datagram+0x58>)
 800e1d2:	f000 fdeb 	bl	800edac <iprintf>
    prev->next = ipr->next;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e1de:	6879      	ldr	r1, [r7, #4]
 800e1e0:	2004      	movs	r0, #4
 800e1e2:	f7f7 fa39 	bl	8005658 <memp_free>
}
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	20000234 	.word	0x20000234
 800e1f4:	08012a88 	.word	0x08012a88
 800e1f8:	08012b50 	.word	0x08012b50
 800e1fc:	08012ad0 	.word	0x08012ad0

0800e200 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08c      	sub	sp, #48	; 0x30
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e20c:	2300      	movs	r3, #0
 800e20e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e210:	2301      	movs	r3, #1
 800e212:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	885b      	ldrh	r3, [r3, #2]
 800e21e:	b29b      	uxth	r3, r3
 800e220:	4618      	mov	r0, r3
 800e222:	f7f6 fd31 	bl	8004c88 <lwip_htons>
 800e226:	4603      	mov	r3, r0
 800e228:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	f003 030f 	and.w	r3, r3, #15
 800e232:	b2db      	uxtb	r3, r3
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e238:	7e7b      	ldrb	r3, [r7, #25]
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	8b7a      	ldrh	r2, [r7, #26]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d202      	bcs.n	800e248 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e242:	f04f 33ff 	mov.w	r3, #4294967295
 800e246:	e135      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e248:	7e7b      	ldrb	r3, [r7, #25]
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	8b7a      	ldrh	r2, [r7, #26]
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	88db      	ldrh	r3, [r3, #6]
 800e256:	b29b      	uxth	r3, r3
 800e258:	4618      	mov	r0, r3
 800e25a:	f7f6 fd15 	bl	8004c88 <lwip_htons>
 800e25e:	4603      	mov	r3, r0
 800e260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e264:	b29b      	uxth	r3, r3
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	2200      	movs	r2, #0
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	2200      	movs	r2, #0
 800e278:	705a      	strb	r2, [r3, #1]
 800e27a:	2200      	movs	r2, #0
 800e27c:	709a      	strb	r2, [r3, #2]
 800e27e:	2200      	movs	r2, #0
 800e280:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	8afa      	ldrh	r2, [r7, #22]
 800e286:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e288:	8afa      	ldrh	r2, [r7, #22]
 800e28a:	8b7b      	ldrh	r3, [r7, #26]
 800e28c:	4413      	add	r3, r2
 800e28e:	b29a      	uxth	r2, r3
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	88db      	ldrh	r3, [r3, #6]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	8afa      	ldrh	r2, [r7, #22]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d902      	bls.n	800e2a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a4:	e106      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ac:	e068      	b.n	800e380 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	889b      	ldrh	r3, [r3, #4]
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	889b      	ldrh	r3, [r3, #4]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d235      	bcs.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d020      	beq.n	800e312 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d2:	889b      	ldrh	r3, [r3, #4]
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	88db      	ldrh	r3, [r3, #6]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d307      	bcc.n	800e2f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	88db      	ldrh	r3, [r3, #6]
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	889b      	ldrh	r3, [r3, #4]
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d902      	bls.n	800e2f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f4:	e0de      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fe:	88db      	ldrh	r3, [r3, #6]
 800e300:	b29a      	uxth	r2, r3
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	889b      	ldrh	r3, [r3, #4]
 800e306:	b29b      	uxth	r3, r3
 800e308:	429a      	cmp	r2, r3
 800e30a:	d03d      	beq.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e310:	e03a      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e314:	88db      	ldrh	r3, [r3, #6]
 800e316:	b29a      	uxth	r2, r3
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	889b      	ldrh	r3, [r3, #4]
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	429a      	cmp	r2, r3
 800e320:	d902      	bls.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e322:	f04f 33ff 	mov.w	r3, #4294967295
 800e326:	e0c5      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	605a      	str	r2, [r3, #4]
      break;
 800e32e:	e02b      	b.n	800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	889b      	ldrh	r3, [r3, #4]
 800e334:	b29a      	uxth	r2, r3
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	889b      	ldrh	r3, [r3, #4]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d102      	bne.n	800e346 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e340:	f04f 33ff 	mov.w	r3, #4294967295
 800e344:	e0b6      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e348:	889b      	ldrh	r3, [r3, #4]
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	88db      	ldrh	r3, [r3, #6]
 800e350:	b29b      	uxth	r3, r3
 800e352:	429a      	cmp	r2, r3
 800e354:	d202      	bcs.n	800e35c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e356:	f04f 33ff 	mov.w	r3, #4294967295
 800e35a:	e0ab      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d009      	beq.n	800e376 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	88db      	ldrh	r3, [r3, #6]
 800e366:	b29a      	uxth	r2, r3
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	889b      	ldrh	r3, [r3, #4]
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	429a      	cmp	r2, r3
 800e370:	d001      	beq.n	800e376 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	2b00      	cmp	r3, #0
 800e384:	d193      	bne.n	800e2ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e386:	e000      	b.n	800e38a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e388:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d12d      	bne.n	800e3ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	2b00      	cmp	r3, #0
 800e394:	d01c      	beq.n	800e3d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	88db      	ldrh	r3, [r3, #6]
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	889b      	ldrh	r3, [r3, #4]
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d906      	bls.n	800e3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e3a6:	4b45      	ldr	r3, [pc, #276]	; (800e4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e3ac:	4944      	ldr	r1, [pc, #272]	; (800e4c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e3ae:	4845      	ldr	r0, [pc, #276]	; (800e4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3b0:	f000 fcfc 	bl	800edac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3bc:	88db      	ldrh	r3, [r3, #6]
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	889b      	ldrh	r3, [r3, #4]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d010      	beq.n	800e3ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	623b      	str	r3, [r7, #32]
 800e3ce:	e00d      	b.n	800e3ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d006      	beq.n	800e3e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e3d8:	4b38      	ldr	r3, [pc, #224]	; (800e4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e3de:	493a      	ldr	r1, [pc, #232]	; (800e4c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e3e0:	4838      	ldr	r0, [pc, #224]	; (800e4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3e2:	f000 fce3 	bl	800edac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d105      	bne.n	800e3fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	7f9b      	ldrb	r3, [r3, #30]
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d059      	beq.n	800e4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d04f      	beq.n	800e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d006      	beq.n	800e41a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	889b      	ldrh	r3, [r3, #4]
 800e414:	b29b      	uxth	r3, r3
 800e416:	2b00      	cmp	r3, #0
 800e418:	d002      	beq.n	800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	623b      	str	r3, [r7, #32]
 800e41e:	e041      	b.n	800e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e42a:	e012      	b.n	800e452 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	88db      	ldrh	r3, [r3, #6]
 800e436:	b29a      	uxth	r2, r3
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	889b      	ldrh	r3, [r3, #4]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	429a      	cmp	r2, r3
 800e440:	d002      	beq.n	800e448 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	623b      	str	r3, [r7, #32]
            break;
 800e446:	e007      	b.n	800e458 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1e9      	bne.n	800e42c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e458:	6a3b      	ldr	r3, [r7, #32]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d022      	beq.n	800e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d106      	bne.n	800e474 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e466:	4b15      	ldr	r3, [pc, #84]	; (800e4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e468:	f240 12df 	movw	r2, #479	; 0x1df
 800e46c:	4917      	ldr	r1, [pc, #92]	; (800e4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e46e:	4815      	ldr	r0, [pc, #84]	; (800e4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e470:	f000 fc9c 	bl	800edac <iprintf>
          LWIP_ASSERT("sanity check",
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d106      	bne.n	800e48e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e480:	4b0e      	ldr	r3, [pc, #56]	; (800e4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e482:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e486:	4911      	ldr	r1, [pc, #68]	; (800e4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e488:	480e      	ldr	r0, [pc, #56]	; (800e4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e48a:	f000 fc8f 	bl	800edac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d006      	beq.n	800e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e496:	4b09      	ldr	r3, [pc, #36]	; (800e4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e498:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e49c:	490c      	ldr	r1, [pc, #48]	; (800e4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e49e:	4809      	ldr	r0, [pc, #36]	; (800e4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e4a0:	f000 fc84 	bl	800edac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	bf14      	ite	ne
 800e4aa:	2301      	movne	r3, #1
 800e4ac:	2300      	moveq	r3, #0
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	e000      	b.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3730      	adds	r7, #48	; 0x30
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	08012a88 	.word	0x08012a88
 800e4c0:	08012b6c 	.word	0x08012b6c
 800e4c4:	08012ad0 	.word	0x08012ad0
 800e4c8:	08012b8c 	.word	0x08012b8c
 800e4cc:	08012bc4 	.word	0x08012bc4
 800e4d0:	08012bd4 	.word	0x08012bd4

0800e4d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b08e      	sub	sp, #56	; 0x38
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	f003 030f 	and.w	r3, r3, #15
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	2b14      	cmp	r3, #20
 800e4f2:	f040 8167 	bne.w	800e7c4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	88db      	ldrh	r3, [r3, #6]
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7f6 fbc3 	bl	8004c88 <lwip_htons>
 800e502:	4603      	mov	r3, r0
 800e504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e508:	b29b      	uxth	r3, r3
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e510:	885b      	ldrh	r3, [r3, #2]
 800e512:	b29b      	uxth	r3, r3
 800e514:	4618      	mov	r0, r3
 800e516:	f7f6 fbb7 	bl	8004c88 <lwip_htons>
 800e51a:	4603      	mov	r3, r0
 800e51c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	b2db      	uxtb	r3, r3
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e52e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e532:	b29b      	uxth	r3, r3
 800e534:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e536:	429a      	cmp	r2, r3
 800e538:	f0c0 8146 	bcc.w	800e7c8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e53c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e540:	b29b      	uxth	r3, r3
 800e542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e544:	1ad3      	subs	r3, r2, r3
 800e546:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7f7 ff83 	bl	8006454 <pbuf_clen>
 800e54e:	4603      	mov	r3, r0
 800e550:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e552:	4b9f      	ldr	r3, [pc, #636]	; (800e7d0 <ip4_reass+0x2fc>)
 800e554:	881b      	ldrh	r3, [r3, #0]
 800e556:	461a      	mov	r2, r3
 800e558:	8c3b      	ldrh	r3, [r7, #32]
 800e55a:	4413      	add	r3, r2
 800e55c:	2b0a      	cmp	r3, #10
 800e55e:	dd10      	ble.n	800e582 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e560:	8c3b      	ldrh	r3, [r7, #32]
 800e562:	4619      	mov	r1, r3
 800e564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e566:	f7ff fd81 	bl	800e06c <ip_reass_remove_oldest_datagram>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 812d 	beq.w	800e7cc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e572:	4b97      	ldr	r3, [pc, #604]	; (800e7d0 <ip4_reass+0x2fc>)
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	8c3b      	ldrh	r3, [r7, #32]
 800e57a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e57c:	2b0a      	cmp	r3, #10
 800e57e:	f300 8125 	bgt.w	800e7cc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e582:	4b94      	ldr	r3, [pc, #592]	; (800e7d4 <ip4_reass+0x300>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	633b      	str	r3, [r7, #48]	; 0x30
 800e588:	e015      	b.n	800e5b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	695a      	ldr	r2, [r3, #20]
 800e58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	429a      	cmp	r2, r3
 800e594:	d10c      	bne.n	800e5b0 <ip4_reass+0xdc>
 800e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e598:	699a      	ldr	r2, [r3, #24]
 800e59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d106      	bne.n	800e5b0 <ip4_reass+0xdc>
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a4:	899a      	ldrh	r2, [r3, #12]
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	889b      	ldrh	r3, [r3, #4]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d006      	beq.n	800e5be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	633b      	str	r3, [r7, #48]	; 0x30
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e6      	bne.n	800e58a <ip4_reass+0xb6>
 800e5bc:	e000      	b.n	800e5c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e5be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d109      	bne.n	800e5da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e5c6:	8c3b      	ldrh	r3, [r7, #32]
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5cc:	f7ff fdb0 	bl	800e130 <ip_reass_enqueue_new_datagram>
 800e5d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d11c      	bne.n	800e612 <ip4_reass+0x13e>
      goto nullreturn;
 800e5d8:	e109      	b.n	800e7ee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5dc:	88db      	ldrh	r3, [r3, #6]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7f6 fb51 	bl	8004c88 <lwip_htons>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d110      	bne.n	800e612 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f2:	89db      	ldrh	r3, [r3, #14]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7f6 fb47 	bl	8004c88 <lwip_htons>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e600:	2b00      	cmp	r3, #0
 800e602:	d006      	beq.n	800e612 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e606:	3308      	adds	r3, #8
 800e608:	2214      	movs	r2, #20
 800e60a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 fb9d 	bl	800ed4c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e614:	88db      	ldrh	r3, [r3, #6]
 800e616:	b29b      	uxth	r3, r3
 800e618:	f003 0320 	and.w	r3, r3, #32
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	bf0c      	ite	eq
 800e620:	2301      	moveq	r3, #1
 800e622:	2300      	movne	r3, #0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00e      	beq.n	800e64c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e62e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e632:	4413      	add	r3, r2
 800e634:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e636:	8b7a      	ldrh	r2, [r7, #26]
 800e638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e63a:	429a      	cmp	r2, r3
 800e63c:	f0c0 80a0 	bcc.w	800e780 <ip4_reass+0x2ac>
 800e640:	8b7b      	ldrh	r3, [r7, #26]
 800e642:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e646:	4293      	cmp	r3, r2
 800e648:	f200 809a 	bhi.w	800e780 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e64c:	69fa      	ldr	r2, [r7, #28]
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e652:	f7ff fdd5 	bl	800e200 <ip_reass_chain_frag_into_datagram_and_validate>
 800e656:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e65e:	f000 8091 	beq.w	800e784 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e662:	4b5b      	ldr	r3, [pc, #364]	; (800e7d0 <ip4_reass+0x2fc>)
 800e664:	881a      	ldrh	r2, [r3, #0]
 800e666:	8c3b      	ldrh	r3, [r7, #32]
 800e668:	4413      	add	r3, r2
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	4b58      	ldr	r3, [pc, #352]	; (800e7d0 <ip4_reass+0x2fc>)
 800e66e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00d      	beq.n	800e692 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e676:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e67a:	4413      	add	r3, r2
 800e67c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e680:	8a7a      	ldrh	r2, [r7, #18]
 800e682:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	7f9b      	ldrb	r3, [r3, #30]
 800e688:	f043 0301 	orr.w	r3, r3, #1
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b01      	cmp	r3, #1
 800e696:	d171      	bne.n	800e77c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	8b9b      	ldrh	r3, [r3, #28]
 800e69c:	3314      	adds	r3, #20
 800e69e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	2214      	movs	r2, #20
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6bc:	f000 fb46 	bl	800ed4c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e6c0:	8a3b      	ldrh	r3, [r7, #16]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7f6 fae0 	bl	8004c88 <lwip_htons>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	719a      	strb	r2, [r3, #6]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	2200      	movs	r2, #0
 800e6de:	729a      	strb	r2, [r3, #10]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e6ea:	e00d      	b.n	800e708 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e6f2:	2114      	movs	r1, #20
 800e6f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6f6:	f7f7 fd9f 	bl	8006238 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e6fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7f7 fee3 	bl	80064c8 <pbuf_cat>
      r = iprh->next_pbuf;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1ee      	bne.n	800e6ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e70e:	4b31      	ldr	r3, [pc, #196]	; (800e7d4 <ip4_reass+0x300>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e714:	429a      	cmp	r2, r3
 800e716:	d102      	bne.n	800e71e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e718:	2300      	movs	r3, #0
 800e71a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e71c:	e010      	b.n	800e740 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e71e:	4b2d      	ldr	r3, [pc, #180]	; (800e7d4 <ip4_reass+0x300>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e724:	e007      	b.n	800e736 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d006      	beq.n	800e73e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1f4      	bne.n	800e726 <ip4_reass+0x252>
 800e73c:	e000      	b.n	800e740 <ip4_reass+0x26c>
          break;
 800e73e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e740:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e744:	f7ff fd2e 	bl	800e1a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7f7 fe83 	bl	8006454 <pbuf_clen>
 800e74e:	4603      	mov	r3, r0
 800e750:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e752:	4b1f      	ldr	r3, [pc, #124]	; (800e7d0 <ip4_reass+0x2fc>)
 800e754:	881b      	ldrh	r3, [r3, #0]
 800e756:	8c3a      	ldrh	r2, [r7, #32]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d906      	bls.n	800e76a <ip4_reass+0x296>
 800e75c:	4b1e      	ldr	r3, [pc, #120]	; (800e7d8 <ip4_reass+0x304>)
 800e75e:	f240 229b 	movw	r2, #667	; 0x29b
 800e762:	491e      	ldr	r1, [pc, #120]	; (800e7dc <ip4_reass+0x308>)
 800e764:	481e      	ldr	r0, [pc, #120]	; (800e7e0 <ip4_reass+0x30c>)
 800e766:	f000 fb21 	bl	800edac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e76a:	4b19      	ldr	r3, [pc, #100]	; (800e7d0 <ip4_reass+0x2fc>)
 800e76c:	881a      	ldrh	r2, [r3, #0]
 800e76e:	8c3b      	ldrh	r3, [r7, #32]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	b29a      	uxth	r2, r3
 800e774:	4b16      	ldr	r3, [pc, #88]	; (800e7d0 <ip4_reass+0x2fc>)
 800e776:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	e03c      	b.n	800e7f6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	e03a      	b.n	800e7f6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e780:	bf00      	nop
 800e782:	e000      	b.n	800e786 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e784:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d106      	bne.n	800e79a <ip4_reass+0x2c6>
 800e78c:	4b12      	ldr	r3, [pc, #72]	; (800e7d8 <ip4_reass+0x304>)
 800e78e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e792:	4914      	ldr	r1, [pc, #80]	; (800e7e4 <ip4_reass+0x310>)
 800e794:	4812      	ldr	r0, [pc, #72]	; (800e7e0 <ip4_reass+0x30c>)
 800e796:	f000 fb09 	bl	800edac <iprintf>
  if (ipr->p == NULL) {
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d124      	bne.n	800e7ec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e7a2:	4b0c      	ldr	r3, [pc, #48]	; (800e7d4 <ip4_reass+0x300>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d006      	beq.n	800e7ba <ip4_reass+0x2e6>
 800e7ac:	4b0a      	ldr	r3, [pc, #40]	; (800e7d8 <ip4_reass+0x304>)
 800e7ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e7b2:	490d      	ldr	r1, [pc, #52]	; (800e7e8 <ip4_reass+0x314>)
 800e7b4:	480a      	ldr	r0, [pc, #40]	; (800e7e0 <ip4_reass+0x30c>)
 800e7b6:	f000 faf9 	bl	800edac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7be:	f7ff fcf1 	bl	800e1a4 <ip_reass_dequeue_datagram>
 800e7c2:	e014      	b.n	800e7ee <ip4_reass+0x31a>
    goto nullreturn;
 800e7c4:	bf00      	nop
 800e7c6:	e012      	b.n	800e7ee <ip4_reass+0x31a>
    goto nullreturn;
 800e7c8:	bf00      	nop
 800e7ca:	e010      	b.n	800e7ee <ip4_reass+0x31a>
      goto nullreturn;
 800e7cc:	bf00      	nop
 800e7ce:	e00e      	b.n	800e7ee <ip4_reass+0x31a>
 800e7d0:	20000238 	.word	0x20000238
 800e7d4:	20000234 	.word	0x20000234
 800e7d8:	08012a88 	.word	0x08012a88
 800e7dc:	08012bf8 	.word	0x08012bf8
 800e7e0:	08012ad0 	.word	0x08012ad0
 800e7e4:	08012c14 	.word	0x08012c14
 800e7e8:	08012c20 	.word	0x08012c20
  }

nullreturn:
 800e7ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7f7 fda8 	bl	8006344 <pbuf_free>
  return NULL;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3738      	adds	r7, #56	; 0x38
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop

0800e800 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e804:	2005      	movs	r0, #5
 800e806:	f7f6 feb7 	bl	8005578 <memp_malloc>
 800e80a:	4603      	mov	r3, r0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d106      	bne.n	800e82c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e81e:	4b07      	ldr	r3, [pc, #28]	; (800e83c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e820:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e824:	4906      	ldr	r1, [pc, #24]	; (800e840 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e826:	4807      	ldr	r0, [pc, #28]	; (800e844 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e828:	f000 fac0 	bl	800edac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e82c:	6879      	ldr	r1, [r7, #4]
 800e82e:	2005      	movs	r0, #5
 800e830:	f7f6 ff12 	bl	8005658 <memp_free>
}
 800e834:	bf00      	nop
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	08012a88 	.word	0x08012a88
 800e840:	08012c40 	.word	0x08012c40
 800e844:	08012ad0 	.word	0x08012ad0

0800e848 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d106      	bne.n	800e868 <ipfrag_free_pbuf_custom+0x20>
 800e85a:	4b11      	ldr	r3, [pc, #68]	; (800e8a0 <ipfrag_free_pbuf_custom+0x58>)
 800e85c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e860:	4910      	ldr	r1, [pc, #64]	; (800e8a4 <ipfrag_free_pbuf_custom+0x5c>)
 800e862:	4811      	ldr	r0, [pc, #68]	; (800e8a8 <ipfrag_free_pbuf_custom+0x60>)
 800e864:	f000 faa2 	bl	800edac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d006      	beq.n	800e87e <ipfrag_free_pbuf_custom+0x36>
 800e870:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <ipfrag_free_pbuf_custom+0x58>)
 800e872:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e876:	490d      	ldr	r1, [pc, #52]	; (800e8ac <ipfrag_free_pbuf_custom+0x64>)
 800e878:	480b      	ldr	r0, [pc, #44]	; (800e8a8 <ipfrag_free_pbuf_custom+0x60>)
 800e87a:	f000 fa97 	bl	800edac <iprintf>
  if (pcr->original != NULL) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d004      	beq.n	800e890 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	695b      	ldr	r3, [r3, #20]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7f7 fd5a 	bl	8006344 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff ffbd 	bl	800e810 <ip_frag_free_pbuf_custom_ref>
}
 800e896:	bf00      	nop
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	08012a88 	.word	0x08012a88
 800e8a4:	08012c4c 	.word	0x08012c4c
 800e8a8:	08012ad0 	.word	0x08012ad0
 800e8ac:	08012c58 	.word	0x08012c58

0800e8b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b094      	sub	sp, #80	; 0x50
 800e8b4:	af02      	add	r7, sp, #8
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8c6:	3b14      	subs	r3, #20
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	da00      	bge.n	800e8ce <ip4_frag+0x1e>
 800e8cc:	3307      	adds	r3, #7
 800e8ce:	10db      	asrs	r3, r3, #3
 800e8d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e8d2:	2314      	movs	r3, #20
 800e8d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	f003 030f 	and.w	r3, r3, #15
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	2b14      	cmp	r3, #20
 800e8f0:	d002      	beq.n	800e8f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e8f2:	f06f 0305 	mvn.w	r3, #5
 800e8f6:	e110      	b.n	800eb1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	895b      	ldrh	r3, [r3, #10]
 800e8fc:	2b13      	cmp	r3, #19
 800e8fe:	d809      	bhi.n	800e914 <ip4_frag+0x64>
 800e900:	4b88      	ldr	r3, [pc, #544]	; (800eb24 <ip4_frag+0x274>)
 800e902:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e906:	4988      	ldr	r1, [pc, #544]	; (800eb28 <ip4_frag+0x278>)
 800e908:	4888      	ldr	r0, [pc, #544]	; (800eb2c <ip4_frag+0x27c>)
 800e90a:	f000 fa4f 	bl	800edac <iprintf>
 800e90e:	f06f 0305 	mvn.w	r3, #5
 800e912:	e102      	b.n	800eb1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	88db      	ldrh	r3, [r3, #6]
 800e918:	b29b      	uxth	r3, r3
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7f6 f9b4 	bl	8004c88 <lwip_htons>
 800e920:	4603      	mov	r3, r0
 800e922:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e924:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e926:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e92a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e92e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e934:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	891b      	ldrh	r3, [r3, #8]
 800e93a:	3b14      	subs	r3, #20
 800e93c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e940:	e0e1      	b.n	800eb06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e942:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	b29b      	uxth	r3, r3
 800e948:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e94c:	4293      	cmp	r3, r2
 800e94e:	bf28      	it	cs
 800e950:	4613      	movcs	r3, r2
 800e952:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e954:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e958:	2114      	movs	r1, #20
 800e95a:	200e      	movs	r0, #14
 800e95c:	f7f7 fa0e 	bl	8005d7c <pbuf_alloc>
 800e960:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 80d5 	beq.w	800eb14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	895b      	ldrh	r3, [r3, #10]
 800e96e:	2b13      	cmp	r3, #19
 800e970:	d806      	bhi.n	800e980 <ip4_frag+0xd0>
 800e972:	4b6c      	ldr	r3, [pc, #432]	; (800eb24 <ip4_frag+0x274>)
 800e974:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e978:	496d      	ldr	r1, [pc, #436]	; (800eb30 <ip4_frag+0x280>)
 800e97a:	486c      	ldr	r0, [pc, #432]	; (800eb2c <ip4_frag+0x27c>)
 800e97c:	f000 fa16 	bl	800edac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	2214      	movs	r2, #20
 800e986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 f9df 	bl	800ed4c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e994:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e996:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e99a:	e064      	b.n	800ea66 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	895a      	ldrh	r2, [r3, #10]
 800e9a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	895b      	ldrh	r3, [r3, #10]
 800e9aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d906      	bls.n	800e9be <ip4_frag+0x10e>
 800e9b0:	4b5c      	ldr	r3, [pc, #368]	; (800eb24 <ip4_frag+0x274>)
 800e9b2:	f240 322d 	movw	r2, #813	; 0x32d
 800e9b6:	495f      	ldr	r1, [pc, #380]	; (800eb34 <ip4_frag+0x284>)
 800e9b8:	485c      	ldr	r0, [pc, #368]	; (800eb2c <ip4_frag+0x27c>)
 800e9ba:	f000 f9f7 	bl	800edac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e9be:	8bfa      	ldrh	r2, [r7, #30]
 800e9c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	bf28      	it	cs
 800e9c8:	4613      	movcs	r3, r2
 800e9ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e9ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d105      	bne.n	800e9e2 <ip4_frag+0x132>
        poff = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	60fb      	str	r3, [r7, #12]
        continue;
 800e9e0:	e041      	b.n	800ea66 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e9e2:	f7ff ff0d 	bl	800e800 <ip_frag_alloc_pbuf_custom_ref>
 800e9e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d103      	bne.n	800e9f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e9ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9f0:	f7f7 fca8 	bl	8006344 <pbuf_free>
        goto memerr;
 800e9f4:	e08f      	b.n	800eb16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9fe:	4413      	add	r3, r2
 800ea00:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ea04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ea08:	9201      	str	r2, [sp, #4]
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2241      	movs	r2, #65	; 0x41
 800ea10:	2000      	movs	r0, #0
 800ea12:	f7f7 fadd 	bl	8005fd0 <pbuf_alloced_custom>
 800ea16:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d106      	bne.n	800ea2c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ea1e:	69b8      	ldr	r0, [r7, #24]
 800ea20:	f7ff fef6 	bl	800e810 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ea24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea26:	f7f7 fc8d 	bl	8006344 <pbuf_free>
        goto memerr;
 800ea2a:	e074      	b.n	800eb16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f7f7 fd29 	bl	8006484 <pbuf_ref>
      pcr->original = p;
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	4a3f      	ldr	r2, [pc, #252]	; (800eb38 <ip4_frag+0x288>)
 800ea3c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ea3e:	6979      	ldr	r1, [r7, #20]
 800ea40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea42:	f7f7 fd41 	bl	80064c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ea46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ea4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ea54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d004      	beq.n	800ea66 <ip4_frag+0x1b6>
        poff = 0;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ea66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d196      	bne.n	800e99c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ea6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ea70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea74:	4413      	add	r3, r2
 800ea76:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea7c:	f1a3 0213 	sub.w	r2, r3, #19
 800ea80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea84:	429a      	cmp	r2, r3
 800ea86:	bfcc      	ite	gt
 800ea88:	2301      	movgt	r3, #1
 800ea8a:	2300      	movle	r3, #0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ea90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ea94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea98:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ea9a:	6a3b      	ldr	r3, [r7, #32]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <ip4_frag+0x1f6>
 800eaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d003      	beq.n	800eaae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eaa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eaa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eaac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eaae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f6 f8e9 	bl	8004c88 <lwip_htons>
 800eab6:	4603      	mov	r3, r0
 800eab8:	461a      	mov	r2, r3
 800eaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eabe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eac0:	3314      	adds	r3, #20
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7f6 f8df 	bl	8004c88 <lwip_htons>
 800eaca:	4603      	mov	r3, r0
 800eacc:	461a      	mov	r2, r3
 800eace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	2200      	movs	r2, #0
 800ead6:	729a      	strb	r2, [r3, #10]
 800ead8:	2200      	movs	r2, #0
 800eada:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	695b      	ldr	r3, [r3, #20]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eae4:	68b8      	ldr	r0, [r7, #8]
 800eae6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaea:	f7f7 fc2b 	bl	8006344 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eaee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eaf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eafa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eafe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eb00:	4413      	add	r3, r2
 800eb02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800eb06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f47f af19 	bne.w	800e942 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eb10:	2300      	movs	r3, #0
 800eb12:	e002      	b.n	800eb1a <ip4_frag+0x26a>
      goto memerr;
 800eb14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eb16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3748      	adds	r7, #72	; 0x48
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	08012a88 	.word	0x08012a88
 800eb28:	08012c64 	.word	0x08012c64
 800eb2c:	08012ad0 	.word	0x08012ad0
 800eb30:	08012c80 	.word	0x08012c80
 800eb34:	08012ca0 	.word	0x08012ca0
 800eb38:	0800e849 	.word	0x0800e849

0800eb3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800eb46:	230e      	movs	r3, #14
 800eb48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	895b      	ldrh	r3, [r3, #10]
 800eb4e:	2b0e      	cmp	r3, #14
 800eb50:	d96e      	bls.n	800ec30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	7bdb      	ldrb	r3, [r3, #15]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb60:	3301      	adds	r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	7b1a      	ldrb	r2, [r3, #12]
 800eb72:	7b5b      	ldrb	r3, [r3, #13]
 800eb74:	021b      	lsls	r3, r3, #8
 800eb76:	4313      	orrs	r3, r2
 800eb78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d023      	beq.n	800ebce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d10f      	bne.n	800ebae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	785b      	ldrb	r3, [r3, #1]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d11b      	bne.n	800ebce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eb9a:	2b5e      	cmp	r3, #94	; 0x5e
 800eb9c:	d117      	bne.n	800ebce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7b5b      	ldrb	r3, [r3, #13]
 800eba2:	f043 0310 	orr.w	r3, r3, #16
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	735a      	strb	r2, [r3, #13]
 800ebac:	e00f      	b.n	800ebce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	2206      	movs	r2, #6
 800ebb2:	4928      	ldr	r1, [pc, #160]	; (800ec54 <ethernet_input+0x118>)
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f8bb 	bl	800ed30 <memcmp>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d106      	bne.n	800ebce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	7b5b      	ldrb	r3, [r3, #13]
 800ebc4:	f043 0308 	orr.w	r3, r3, #8
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ebce:	89fb      	ldrh	r3, [r7, #14]
 800ebd0:	2b08      	cmp	r3, #8
 800ebd2:	d003      	beq.n	800ebdc <ethernet_input+0xa0>
 800ebd4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ebd8:	d014      	beq.n	800ec04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ebda:	e032      	b.n	800ec42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebe2:	f003 0308 	and.w	r3, r3, #8
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d024      	beq.n	800ec34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ebea:	8afb      	ldrh	r3, [r7, #22]
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7f7 fb22 	bl	8006238 <pbuf_remove_header>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d11e      	bne.n	800ec38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ebfa:	6839      	ldr	r1, [r7, #0]
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7fe ff27 	bl	800da50 <ip4_input>
      break;
 800ec02:	e013      	b.n	800ec2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec0a:	f003 0308 	and.w	r3, r3, #8
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d014      	beq.n	800ec3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ec12:	8afb      	ldrh	r3, [r7, #22]
 800ec14:	4619      	mov	r1, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7f7 fb0e 	bl	8006238 <pbuf_remove_header>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10e      	bne.n	800ec40 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7fe f8c7 	bl	800cdb8 <etharp_input>
      break;
 800ec2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e00c      	b.n	800ec4a <ethernet_input+0x10e>
    goto free_and_return;
 800ec30:	bf00      	nop
 800ec32:	e006      	b.n	800ec42 <ethernet_input+0x106>
        goto free_and_return;
 800ec34:	bf00      	nop
 800ec36:	e004      	b.n	800ec42 <ethernet_input+0x106>
        goto free_and_return;
 800ec38:	bf00      	nop
 800ec3a:	e002      	b.n	800ec42 <ethernet_input+0x106>
        goto free_and_return;
 800ec3c:	bf00      	nop
 800ec3e:	e000      	b.n	800ec42 <ethernet_input+0x106>
        goto free_and_return;
 800ec40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7f7 fb7e 	bl	8006344 <pbuf_free>
  return ERR_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3718      	adds	r7, #24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	08012e3c 	.word	0x08012e3c

0800ec58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ec66:	8c3b      	ldrh	r3, [r7, #32]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7f6 f80d 	bl	8004c88 <lwip_htons>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ec72:	210e      	movs	r1, #14
 800ec74:	68b8      	ldr	r0, [r7, #8]
 800ec76:	f7f7 facf 	bl	8006218 <pbuf_add_header>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d125      	bne.n	800eccc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	8afa      	ldrh	r2, [r7, #22]
 800ec8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	2206      	movs	r2, #6
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f000 f85a 	bl	800ed4c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	3306      	adds	r3, #6
 800ec9c:	2206      	movs	r2, #6
 800ec9e:	6879      	ldr	r1, [r7, #4]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 f853 	bl	800ed4c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ecac:	2b06      	cmp	r3, #6
 800ecae:	d006      	beq.n	800ecbe <ethernet_output+0x66>
 800ecb0:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <ethernet_output+0x84>)
 800ecb2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ecb6:	490a      	ldr	r1, [pc, #40]	; (800ece0 <ethernet_output+0x88>)
 800ecb8:	480a      	ldr	r0, [pc, #40]	; (800ece4 <ethernet_output+0x8c>)
 800ecba:	f000 f877 	bl	800edac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	699b      	ldr	r3, [r3, #24]
 800ecc2:	68b9      	ldr	r1, [r7, #8]
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	4798      	blx	r3
 800ecc8:	4603      	mov	r3, r0
 800ecca:	e002      	b.n	800ecd2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eccc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ecce:	f06f 0301 	mvn.w	r3, #1
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	08012cb0 	.word	0x08012cb0
 800ece0:	08012ce8 	.word	0x08012ce8
 800ece4:	08012d1c 	.word	0x08012d1c

0800ece8 <__libc_init_array>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	4d0d      	ldr	r5, [pc, #52]	; (800ed20 <__libc_init_array+0x38>)
 800ecec:	4c0d      	ldr	r4, [pc, #52]	; (800ed24 <__libc_init_array+0x3c>)
 800ecee:	1b64      	subs	r4, r4, r5
 800ecf0:	10a4      	asrs	r4, r4, #2
 800ecf2:	2600      	movs	r6, #0
 800ecf4:	42a6      	cmp	r6, r4
 800ecf6:	d109      	bne.n	800ed0c <__libc_init_array+0x24>
 800ecf8:	4d0b      	ldr	r5, [pc, #44]	; (800ed28 <__libc_init_array+0x40>)
 800ecfa:	4c0c      	ldr	r4, [pc, #48]	; (800ed2c <__libc_init_array+0x44>)
 800ecfc:	f001 faa4 	bl	8010248 <_init>
 800ed00:	1b64      	subs	r4, r4, r5
 800ed02:	10a4      	asrs	r4, r4, #2
 800ed04:	2600      	movs	r6, #0
 800ed06:	42a6      	cmp	r6, r4
 800ed08:	d105      	bne.n	800ed16 <__libc_init_array+0x2e>
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed10:	4798      	blx	r3
 800ed12:	3601      	adds	r6, #1
 800ed14:	e7ee      	b.n	800ecf4 <__libc_init_array+0xc>
 800ed16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed1a:	4798      	blx	r3
 800ed1c:	3601      	adds	r6, #1
 800ed1e:	e7f2      	b.n	800ed06 <__libc_init_array+0x1e>
 800ed20:	08012fa0 	.word	0x08012fa0
 800ed24:	08012fa0 	.word	0x08012fa0
 800ed28:	08012fa0 	.word	0x08012fa0
 800ed2c:	08012fa4 	.word	0x08012fa4

0800ed30 <memcmp>:
 800ed30:	b530      	push	{r4, r5, lr}
 800ed32:	3901      	subs	r1, #1
 800ed34:	2400      	movs	r4, #0
 800ed36:	42a2      	cmp	r2, r4
 800ed38:	d101      	bne.n	800ed3e <memcmp+0xe>
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	e005      	b.n	800ed4a <memcmp+0x1a>
 800ed3e:	5d03      	ldrb	r3, [r0, r4]
 800ed40:	3401      	adds	r4, #1
 800ed42:	5d0d      	ldrb	r5, [r1, r4]
 800ed44:	42ab      	cmp	r3, r5
 800ed46:	d0f6      	beq.n	800ed36 <memcmp+0x6>
 800ed48:	1b58      	subs	r0, r3, r5
 800ed4a:	bd30      	pop	{r4, r5, pc}

0800ed4c <memcpy>:
 800ed4c:	440a      	add	r2, r1
 800ed4e:	4291      	cmp	r1, r2
 800ed50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed54:	d100      	bne.n	800ed58 <memcpy+0xc>
 800ed56:	4770      	bx	lr
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed62:	4291      	cmp	r1, r2
 800ed64:	d1f9      	bne.n	800ed5a <memcpy+0xe>
 800ed66:	bd10      	pop	{r4, pc}

0800ed68 <memmove>:
 800ed68:	4288      	cmp	r0, r1
 800ed6a:	b510      	push	{r4, lr}
 800ed6c:	eb01 0402 	add.w	r4, r1, r2
 800ed70:	d902      	bls.n	800ed78 <memmove+0x10>
 800ed72:	4284      	cmp	r4, r0
 800ed74:	4623      	mov	r3, r4
 800ed76:	d807      	bhi.n	800ed88 <memmove+0x20>
 800ed78:	1e43      	subs	r3, r0, #1
 800ed7a:	42a1      	cmp	r1, r4
 800ed7c:	d008      	beq.n	800ed90 <memmove+0x28>
 800ed7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed86:	e7f8      	b.n	800ed7a <memmove+0x12>
 800ed88:	4402      	add	r2, r0
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	428a      	cmp	r2, r1
 800ed8e:	d100      	bne.n	800ed92 <memmove+0x2a>
 800ed90:	bd10      	pop	{r4, pc}
 800ed92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed9a:	e7f7      	b.n	800ed8c <memmove+0x24>

0800ed9c <memset>:
 800ed9c:	4402      	add	r2, r0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d100      	bne.n	800eda6 <memset+0xa>
 800eda4:	4770      	bx	lr
 800eda6:	f803 1b01 	strb.w	r1, [r3], #1
 800edaa:	e7f9      	b.n	800eda0 <memset+0x4>

0800edac <iprintf>:
 800edac:	b40f      	push	{r0, r1, r2, r3}
 800edae:	4b0a      	ldr	r3, [pc, #40]	; (800edd8 <iprintf+0x2c>)
 800edb0:	b513      	push	{r0, r1, r4, lr}
 800edb2:	681c      	ldr	r4, [r3, #0]
 800edb4:	b124      	cbz	r4, 800edc0 <iprintf+0x14>
 800edb6:	69a3      	ldr	r3, [r4, #24]
 800edb8:	b913      	cbnz	r3, 800edc0 <iprintf+0x14>
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 faf0 	bl	800f3a0 <__sinit>
 800edc0:	ab05      	add	r3, sp, #20
 800edc2:	9a04      	ldr	r2, [sp, #16]
 800edc4:	68a1      	ldr	r1, [r4, #8]
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 fe37 	bl	800fa3c <_vfiprintf_r>
 800edce:	b002      	add	sp, #8
 800edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd4:	b004      	add	sp, #16
 800edd6:	4770      	bx	lr
 800edd8:	2000002c 	.word	0x2000002c

0800eddc <_puts_r>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	460e      	mov	r6, r1
 800ede0:	4605      	mov	r5, r0
 800ede2:	b118      	cbz	r0, 800edec <_puts_r+0x10>
 800ede4:	6983      	ldr	r3, [r0, #24]
 800ede6:	b90b      	cbnz	r3, 800edec <_puts_r+0x10>
 800ede8:	f000 fada 	bl	800f3a0 <__sinit>
 800edec:	69ab      	ldr	r3, [r5, #24]
 800edee:	68ac      	ldr	r4, [r5, #8]
 800edf0:	b913      	cbnz	r3, 800edf8 <_puts_r+0x1c>
 800edf2:	4628      	mov	r0, r5
 800edf4:	f000 fad4 	bl	800f3a0 <__sinit>
 800edf8:	4b2c      	ldr	r3, [pc, #176]	; (800eeac <_puts_r+0xd0>)
 800edfa:	429c      	cmp	r4, r3
 800edfc:	d120      	bne.n	800ee40 <_puts_r+0x64>
 800edfe:	686c      	ldr	r4, [r5, #4]
 800ee00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee02:	07db      	lsls	r3, r3, #31
 800ee04:	d405      	bmi.n	800ee12 <_puts_r+0x36>
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	0598      	lsls	r0, r3, #22
 800ee0a:	d402      	bmi.n	800ee12 <_puts_r+0x36>
 800ee0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee0e:	f000 fb77 	bl	800f500 <__retarget_lock_acquire_recursive>
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	0719      	lsls	r1, r3, #28
 800ee16:	d51d      	bpl.n	800ee54 <_puts_r+0x78>
 800ee18:	6923      	ldr	r3, [r4, #16]
 800ee1a:	b1db      	cbz	r3, 800ee54 <_puts_r+0x78>
 800ee1c:	3e01      	subs	r6, #1
 800ee1e:	68a3      	ldr	r3, [r4, #8]
 800ee20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee24:	3b01      	subs	r3, #1
 800ee26:	60a3      	str	r3, [r4, #8]
 800ee28:	bb39      	cbnz	r1, 800ee7a <_puts_r+0x9e>
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	da38      	bge.n	800eea0 <_puts_r+0xc4>
 800ee2e:	4622      	mov	r2, r4
 800ee30:	210a      	movs	r1, #10
 800ee32:	4628      	mov	r0, r5
 800ee34:	f000 f8bc 	bl	800efb0 <__swbuf_r>
 800ee38:	3001      	adds	r0, #1
 800ee3a:	d011      	beq.n	800ee60 <_puts_r+0x84>
 800ee3c:	250a      	movs	r5, #10
 800ee3e:	e011      	b.n	800ee64 <_puts_r+0x88>
 800ee40:	4b1b      	ldr	r3, [pc, #108]	; (800eeb0 <_puts_r+0xd4>)
 800ee42:	429c      	cmp	r4, r3
 800ee44:	d101      	bne.n	800ee4a <_puts_r+0x6e>
 800ee46:	68ac      	ldr	r4, [r5, #8]
 800ee48:	e7da      	b.n	800ee00 <_puts_r+0x24>
 800ee4a:	4b1a      	ldr	r3, [pc, #104]	; (800eeb4 <_puts_r+0xd8>)
 800ee4c:	429c      	cmp	r4, r3
 800ee4e:	bf08      	it	eq
 800ee50:	68ec      	ldreq	r4, [r5, #12]
 800ee52:	e7d5      	b.n	800ee00 <_puts_r+0x24>
 800ee54:	4621      	mov	r1, r4
 800ee56:	4628      	mov	r0, r5
 800ee58:	f000 f8fc 	bl	800f054 <__swsetup_r>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d0dd      	beq.n	800ee1c <_puts_r+0x40>
 800ee60:	f04f 35ff 	mov.w	r5, #4294967295
 800ee64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee66:	07da      	lsls	r2, r3, #31
 800ee68:	d405      	bmi.n	800ee76 <_puts_r+0x9a>
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	059b      	lsls	r3, r3, #22
 800ee6e:	d402      	bmi.n	800ee76 <_puts_r+0x9a>
 800ee70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee72:	f000 fb46 	bl	800f502 <__retarget_lock_release_recursive>
 800ee76:	4628      	mov	r0, r5
 800ee78:	bd70      	pop	{r4, r5, r6, pc}
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	da04      	bge.n	800ee88 <_puts_r+0xac>
 800ee7e:	69a2      	ldr	r2, [r4, #24]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	dc06      	bgt.n	800ee92 <_puts_r+0xb6>
 800ee84:	290a      	cmp	r1, #10
 800ee86:	d004      	beq.n	800ee92 <_puts_r+0xb6>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	6022      	str	r2, [r4, #0]
 800ee8e:	7019      	strb	r1, [r3, #0]
 800ee90:	e7c5      	b.n	800ee1e <_puts_r+0x42>
 800ee92:	4622      	mov	r2, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f88b 	bl	800efb0 <__swbuf_r>
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	d1bf      	bne.n	800ee1e <_puts_r+0x42>
 800ee9e:	e7df      	b.n	800ee60 <_puts_r+0x84>
 800eea0:	6823      	ldr	r3, [r4, #0]
 800eea2:	250a      	movs	r5, #10
 800eea4:	1c5a      	adds	r2, r3, #1
 800eea6:	6022      	str	r2, [r4, #0]
 800eea8:	701d      	strb	r5, [r3, #0]
 800eeaa:	e7db      	b.n	800ee64 <_puts_r+0x88>
 800eeac:	08012f24 	.word	0x08012f24
 800eeb0:	08012f44 	.word	0x08012f44
 800eeb4:	08012f04 	.word	0x08012f04

0800eeb8 <puts>:
 800eeb8:	4b02      	ldr	r3, [pc, #8]	; (800eec4 <puts+0xc>)
 800eeba:	4601      	mov	r1, r0
 800eebc:	6818      	ldr	r0, [r3, #0]
 800eebe:	f7ff bf8d 	b.w	800eddc <_puts_r>
 800eec2:	bf00      	nop
 800eec4:	2000002c 	.word	0x2000002c

0800eec8 <rand>:
 800eec8:	4b17      	ldr	r3, [pc, #92]	; (800ef28 <rand+0x60>)
 800eeca:	b510      	push	{r4, lr}
 800eecc:	681c      	ldr	r4, [r3, #0]
 800eece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eed0:	b9b3      	cbnz	r3, 800ef00 <rand+0x38>
 800eed2:	2018      	movs	r0, #24
 800eed4:	f000 fb7a 	bl	800f5cc <malloc>
 800eed8:	63a0      	str	r0, [r4, #56]	; 0x38
 800eeda:	b928      	cbnz	r0, 800eee8 <rand+0x20>
 800eedc:	4602      	mov	r2, r0
 800eede:	4b13      	ldr	r3, [pc, #76]	; (800ef2c <rand+0x64>)
 800eee0:	4813      	ldr	r0, [pc, #76]	; (800ef30 <rand+0x68>)
 800eee2:	214e      	movs	r1, #78	; 0x4e
 800eee4:	f000 f924 	bl	800f130 <__assert_func>
 800eee8:	4a12      	ldr	r2, [pc, #72]	; (800ef34 <rand+0x6c>)
 800eeea:	4b13      	ldr	r3, [pc, #76]	; (800ef38 <rand+0x70>)
 800eeec:	e9c0 2300 	strd	r2, r3, [r0]
 800eef0:	4b12      	ldr	r3, [pc, #72]	; (800ef3c <rand+0x74>)
 800eef2:	6083      	str	r3, [r0, #8]
 800eef4:	230b      	movs	r3, #11
 800eef6:	8183      	strh	r3, [r0, #12]
 800eef8:	2201      	movs	r2, #1
 800eefa:	2300      	movs	r3, #0
 800eefc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef02:	480f      	ldr	r0, [pc, #60]	; (800ef40 <rand+0x78>)
 800ef04:	690a      	ldr	r2, [r1, #16]
 800ef06:	694b      	ldr	r3, [r1, #20]
 800ef08:	4c0e      	ldr	r4, [pc, #56]	; (800ef44 <rand+0x7c>)
 800ef0a:	4350      	muls	r0, r2
 800ef0c:	fb04 0003 	mla	r0, r4, r3, r0
 800ef10:	fba2 3404 	umull	r3, r4, r2, r4
 800ef14:	1c5a      	adds	r2, r3, #1
 800ef16:	4404      	add	r4, r0
 800ef18:	f144 0000 	adc.w	r0, r4, #0
 800ef1c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ef20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef24:	bd10      	pop	{r4, pc}
 800ef26:	bf00      	nop
 800ef28:	2000002c 	.word	0x2000002c
 800ef2c:	08012e50 	.word	0x08012e50
 800ef30:	08012e67 	.word	0x08012e67
 800ef34:	abcd330e 	.word	0xabcd330e
 800ef38:	e66d1234 	.word	0xe66d1234
 800ef3c:	0005deec 	.word	0x0005deec
 800ef40:	5851f42d 	.word	0x5851f42d
 800ef44:	4c957f2d 	.word	0x4c957f2d

0800ef48 <siprintf>:
 800ef48:	b40e      	push	{r1, r2, r3}
 800ef4a:	b500      	push	{lr}
 800ef4c:	b09c      	sub	sp, #112	; 0x70
 800ef4e:	ab1d      	add	r3, sp, #116	; 0x74
 800ef50:	9002      	str	r0, [sp, #8]
 800ef52:	9006      	str	r0, [sp, #24]
 800ef54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef58:	4809      	ldr	r0, [pc, #36]	; (800ef80 <siprintf+0x38>)
 800ef5a:	9107      	str	r1, [sp, #28]
 800ef5c:	9104      	str	r1, [sp, #16]
 800ef5e:	4909      	ldr	r1, [pc, #36]	; (800ef84 <siprintf+0x3c>)
 800ef60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef64:	9105      	str	r1, [sp, #20]
 800ef66:	6800      	ldr	r0, [r0, #0]
 800ef68:	9301      	str	r3, [sp, #4]
 800ef6a:	a902      	add	r1, sp, #8
 800ef6c:	f000 fc3c 	bl	800f7e8 <_svfiprintf_r>
 800ef70:	9b02      	ldr	r3, [sp, #8]
 800ef72:	2200      	movs	r2, #0
 800ef74:	701a      	strb	r2, [r3, #0]
 800ef76:	b01c      	add	sp, #112	; 0x70
 800ef78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef7c:	b003      	add	sp, #12
 800ef7e:	4770      	bx	lr
 800ef80:	2000002c 	.word	0x2000002c
 800ef84:	ffff0208 	.word	0xffff0208

0800ef88 <strncpy>:
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	3901      	subs	r1, #1
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	b132      	cbz	r2, 800ef9e <strncpy+0x16>
 800ef90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef94:	f803 4b01 	strb.w	r4, [r3], #1
 800ef98:	3a01      	subs	r2, #1
 800ef9a:	2c00      	cmp	r4, #0
 800ef9c:	d1f7      	bne.n	800ef8e <strncpy+0x6>
 800ef9e:	441a      	add	r2, r3
 800efa0:	2100      	movs	r1, #0
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d100      	bne.n	800efa8 <strncpy+0x20>
 800efa6:	bd10      	pop	{r4, pc}
 800efa8:	f803 1b01 	strb.w	r1, [r3], #1
 800efac:	e7f9      	b.n	800efa2 <strncpy+0x1a>
	...

0800efb0 <__swbuf_r>:
 800efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb2:	460e      	mov	r6, r1
 800efb4:	4614      	mov	r4, r2
 800efb6:	4605      	mov	r5, r0
 800efb8:	b118      	cbz	r0, 800efc2 <__swbuf_r+0x12>
 800efba:	6983      	ldr	r3, [r0, #24]
 800efbc:	b90b      	cbnz	r3, 800efc2 <__swbuf_r+0x12>
 800efbe:	f000 f9ef 	bl	800f3a0 <__sinit>
 800efc2:	4b21      	ldr	r3, [pc, #132]	; (800f048 <__swbuf_r+0x98>)
 800efc4:	429c      	cmp	r4, r3
 800efc6:	d12b      	bne.n	800f020 <__swbuf_r+0x70>
 800efc8:	686c      	ldr	r4, [r5, #4]
 800efca:	69a3      	ldr	r3, [r4, #24]
 800efcc:	60a3      	str	r3, [r4, #8]
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	071a      	lsls	r2, r3, #28
 800efd2:	d52f      	bpl.n	800f034 <__swbuf_r+0x84>
 800efd4:	6923      	ldr	r3, [r4, #16]
 800efd6:	b36b      	cbz	r3, 800f034 <__swbuf_r+0x84>
 800efd8:	6923      	ldr	r3, [r4, #16]
 800efda:	6820      	ldr	r0, [r4, #0]
 800efdc:	1ac0      	subs	r0, r0, r3
 800efde:	6963      	ldr	r3, [r4, #20]
 800efe0:	b2f6      	uxtb	r6, r6
 800efe2:	4283      	cmp	r3, r0
 800efe4:	4637      	mov	r7, r6
 800efe6:	dc04      	bgt.n	800eff2 <__swbuf_r+0x42>
 800efe8:	4621      	mov	r1, r4
 800efea:	4628      	mov	r0, r5
 800efec:	f000 f944 	bl	800f278 <_fflush_r>
 800eff0:	bb30      	cbnz	r0, 800f040 <__swbuf_r+0x90>
 800eff2:	68a3      	ldr	r3, [r4, #8]
 800eff4:	3b01      	subs	r3, #1
 800eff6:	60a3      	str	r3, [r4, #8]
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	6022      	str	r2, [r4, #0]
 800effe:	701e      	strb	r6, [r3, #0]
 800f000:	6963      	ldr	r3, [r4, #20]
 800f002:	3001      	adds	r0, #1
 800f004:	4283      	cmp	r3, r0
 800f006:	d004      	beq.n	800f012 <__swbuf_r+0x62>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	07db      	lsls	r3, r3, #31
 800f00c:	d506      	bpl.n	800f01c <__swbuf_r+0x6c>
 800f00e:	2e0a      	cmp	r6, #10
 800f010:	d104      	bne.n	800f01c <__swbuf_r+0x6c>
 800f012:	4621      	mov	r1, r4
 800f014:	4628      	mov	r0, r5
 800f016:	f000 f92f 	bl	800f278 <_fflush_r>
 800f01a:	b988      	cbnz	r0, 800f040 <__swbuf_r+0x90>
 800f01c:	4638      	mov	r0, r7
 800f01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f020:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <__swbuf_r+0x9c>)
 800f022:	429c      	cmp	r4, r3
 800f024:	d101      	bne.n	800f02a <__swbuf_r+0x7a>
 800f026:	68ac      	ldr	r4, [r5, #8]
 800f028:	e7cf      	b.n	800efca <__swbuf_r+0x1a>
 800f02a:	4b09      	ldr	r3, [pc, #36]	; (800f050 <__swbuf_r+0xa0>)
 800f02c:	429c      	cmp	r4, r3
 800f02e:	bf08      	it	eq
 800f030:	68ec      	ldreq	r4, [r5, #12]
 800f032:	e7ca      	b.n	800efca <__swbuf_r+0x1a>
 800f034:	4621      	mov	r1, r4
 800f036:	4628      	mov	r0, r5
 800f038:	f000 f80c 	bl	800f054 <__swsetup_r>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d0cb      	beq.n	800efd8 <__swbuf_r+0x28>
 800f040:	f04f 37ff 	mov.w	r7, #4294967295
 800f044:	e7ea      	b.n	800f01c <__swbuf_r+0x6c>
 800f046:	bf00      	nop
 800f048:	08012f24 	.word	0x08012f24
 800f04c:	08012f44 	.word	0x08012f44
 800f050:	08012f04 	.word	0x08012f04

0800f054 <__swsetup_r>:
 800f054:	4b32      	ldr	r3, [pc, #200]	; (800f120 <__swsetup_r+0xcc>)
 800f056:	b570      	push	{r4, r5, r6, lr}
 800f058:	681d      	ldr	r5, [r3, #0]
 800f05a:	4606      	mov	r6, r0
 800f05c:	460c      	mov	r4, r1
 800f05e:	b125      	cbz	r5, 800f06a <__swsetup_r+0x16>
 800f060:	69ab      	ldr	r3, [r5, #24]
 800f062:	b913      	cbnz	r3, 800f06a <__swsetup_r+0x16>
 800f064:	4628      	mov	r0, r5
 800f066:	f000 f99b 	bl	800f3a0 <__sinit>
 800f06a:	4b2e      	ldr	r3, [pc, #184]	; (800f124 <__swsetup_r+0xd0>)
 800f06c:	429c      	cmp	r4, r3
 800f06e:	d10f      	bne.n	800f090 <__swsetup_r+0x3c>
 800f070:	686c      	ldr	r4, [r5, #4]
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f078:	0719      	lsls	r1, r3, #28
 800f07a:	d42c      	bmi.n	800f0d6 <__swsetup_r+0x82>
 800f07c:	06dd      	lsls	r5, r3, #27
 800f07e:	d411      	bmi.n	800f0a4 <__swsetup_r+0x50>
 800f080:	2309      	movs	r3, #9
 800f082:	6033      	str	r3, [r6, #0]
 800f084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	f04f 30ff 	mov.w	r0, #4294967295
 800f08e:	e03e      	b.n	800f10e <__swsetup_r+0xba>
 800f090:	4b25      	ldr	r3, [pc, #148]	; (800f128 <__swsetup_r+0xd4>)
 800f092:	429c      	cmp	r4, r3
 800f094:	d101      	bne.n	800f09a <__swsetup_r+0x46>
 800f096:	68ac      	ldr	r4, [r5, #8]
 800f098:	e7eb      	b.n	800f072 <__swsetup_r+0x1e>
 800f09a:	4b24      	ldr	r3, [pc, #144]	; (800f12c <__swsetup_r+0xd8>)
 800f09c:	429c      	cmp	r4, r3
 800f09e:	bf08      	it	eq
 800f0a0:	68ec      	ldreq	r4, [r5, #12]
 800f0a2:	e7e6      	b.n	800f072 <__swsetup_r+0x1e>
 800f0a4:	0758      	lsls	r0, r3, #29
 800f0a6:	d512      	bpl.n	800f0ce <__swsetup_r+0x7a>
 800f0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0aa:	b141      	cbz	r1, 800f0be <__swsetup_r+0x6a>
 800f0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0b0:	4299      	cmp	r1, r3
 800f0b2:	d002      	beq.n	800f0ba <__swsetup_r+0x66>
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f000 fa91 	bl	800f5dc <_free_r>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6363      	str	r3, [r4, #52]	; 0x34
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	f043 0308 	orr.w	r3, r3, #8
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	b94b      	cbnz	r3, 800f0ee <__swsetup_r+0x9a>
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0e4:	d003      	beq.n	800f0ee <__swsetup_r+0x9a>
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f000 fa2f 	bl	800f54c <__smakebuf_r>
 800f0ee:	89a0      	ldrh	r0, [r4, #12]
 800f0f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0f4:	f010 0301 	ands.w	r3, r0, #1
 800f0f8:	d00a      	beq.n	800f110 <__swsetup_r+0xbc>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	60a3      	str	r3, [r4, #8]
 800f0fe:	6963      	ldr	r3, [r4, #20]
 800f100:	425b      	negs	r3, r3
 800f102:	61a3      	str	r3, [r4, #24]
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	b943      	cbnz	r3, 800f11a <__swsetup_r+0xc6>
 800f108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f10c:	d1ba      	bne.n	800f084 <__swsetup_r+0x30>
 800f10e:	bd70      	pop	{r4, r5, r6, pc}
 800f110:	0781      	lsls	r1, r0, #30
 800f112:	bf58      	it	pl
 800f114:	6963      	ldrpl	r3, [r4, #20]
 800f116:	60a3      	str	r3, [r4, #8]
 800f118:	e7f4      	b.n	800f104 <__swsetup_r+0xb0>
 800f11a:	2000      	movs	r0, #0
 800f11c:	e7f7      	b.n	800f10e <__swsetup_r+0xba>
 800f11e:	bf00      	nop
 800f120:	2000002c 	.word	0x2000002c
 800f124:	08012f24 	.word	0x08012f24
 800f128:	08012f44 	.word	0x08012f44
 800f12c:	08012f04 	.word	0x08012f04

0800f130 <__assert_func>:
 800f130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f132:	4614      	mov	r4, r2
 800f134:	461a      	mov	r2, r3
 800f136:	4b09      	ldr	r3, [pc, #36]	; (800f15c <__assert_func+0x2c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4605      	mov	r5, r0
 800f13c:	68d8      	ldr	r0, [r3, #12]
 800f13e:	b14c      	cbz	r4, 800f154 <__assert_func+0x24>
 800f140:	4b07      	ldr	r3, [pc, #28]	; (800f160 <__assert_func+0x30>)
 800f142:	9100      	str	r1, [sp, #0]
 800f144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f148:	4906      	ldr	r1, [pc, #24]	; (800f164 <__assert_func+0x34>)
 800f14a:	462b      	mov	r3, r5
 800f14c:	f000 f9a6 	bl	800f49c <fiprintf>
 800f150:	f000 ff9e 	bl	8010090 <abort>
 800f154:	4b04      	ldr	r3, [pc, #16]	; (800f168 <__assert_func+0x38>)
 800f156:	461c      	mov	r4, r3
 800f158:	e7f3      	b.n	800f142 <__assert_func+0x12>
 800f15a:	bf00      	nop
 800f15c:	2000002c 	.word	0x2000002c
 800f160:	08012ec6 	.word	0x08012ec6
 800f164:	08012ed3 	.word	0x08012ed3
 800f168:	08012f01 	.word	0x08012f01

0800f16c <__sflush_r>:
 800f16c:	898a      	ldrh	r2, [r1, #12]
 800f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f172:	4605      	mov	r5, r0
 800f174:	0710      	lsls	r0, r2, #28
 800f176:	460c      	mov	r4, r1
 800f178:	d458      	bmi.n	800f22c <__sflush_r+0xc0>
 800f17a:	684b      	ldr	r3, [r1, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	dc05      	bgt.n	800f18c <__sflush_r+0x20>
 800f180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f182:	2b00      	cmp	r3, #0
 800f184:	dc02      	bgt.n	800f18c <__sflush_r+0x20>
 800f186:	2000      	movs	r0, #0
 800f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f18e:	2e00      	cmp	r6, #0
 800f190:	d0f9      	beq.n	800f186 <__sflush_r+0x1a>
 800f192:	2300      	movs	r3, #0
 800f194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f198:	682f      	ldr	r7, [r5, #0]
 800f19a:	602b      	str	r3, [r5, #0]
 800f19c:	d032      	beq.n	800f204 <__sflush_r+0x98>
 800f19e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	075a      	lsls	r2, r3, #29
 800f1a4:	d505      	bpl.n	800f1b2 <__sflush_r+0x46>
 800f1a6:	6863      	ldr	r3, [r4, #4]
 800f1a8:	1ac0      	subs	r0, r0, r3
 800f1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1ac:	b10b      	cbz	r3, 800f1b2 <__sflush_r+0x46>
 800f1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1b0:	1ac0      	subs	r0, r0, r3
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1b8:	6a21      	ldr	r1, [r4, #32]
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	47b0      	blx	r6
 800f1be:	1c43      	adds	r3, r0, #1
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	d106      	bne.n	800f1d2 <__sflush_r+0x66>
 800f1c4:	6829      	ldr	r1, [r5, #0]
 800f1c6:	291d      	cmp	r1, #29
 800f1c8:	d82c      	bhi.n	800f224 <__sflush_r+0xb8>
 800f1ca:	4a2a      	ldr	r2, [pc, #168]	; (800f274 <__sflush_r+0x108>)
 800f1cc:	40ca      	lsrs	r2, r1
 800f1ce:	07d6      	lsls	r6, r2, #31
 800f1d0:	d528      	bpl.n	800f224 <__sflush_r+0xb8>
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	6062      	str	r2, [r4, #4]
 800f1d6:	04d9      	lsls	r1, r3, #19
 800f1d8:	6922      	ldr	r2, [r4, #16]
 800f1da:	6022      	str	r2, [r4, #0]
 800f1dc:	d504      	bpl.n	800f1e8 <__sflush_r+0x7c>
 800f1de:	1c42      	adds	r2, r0, #1
 800f1e0:	d101      	bne.n	800f1e6 <__sflush_r+0x7a>
 800f1e2:	682b      	ldr	r3, [r5, #0]
 800f1e4:	b903      	cbnz	r3, 800f1e8 <__sflush_r+0x7c>
 800f1e6:	6560      	str	r0, [r4, #84]	; 0x54
 800f1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1ea:	602f      	str	r7, [r5, #0]
 800f1ec:	2900      	cmp	r1, #0
 800f1ee:	d0ca      	beq.n	800f186 <__sflush_r+0x1a>
 800f1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1f4:	4299      	cmp	r1, r3
 800f1f6:	d002      	beq.n	800f1fe <__sflush_r+0x92>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f000 f9ef 	bl	800f5dc <_free_r>
 800f1fe:	2000      	movs	r0, #0
 800f200:	6360      	str	r0, [r4, #52]	; 0x34
 800f202:	e7c1      	b.n	800f188 <__sflush_r+0x1c>
 800f204:	6a21      	ldr	r1, [r4, #32]
 800f206:	2301      	movs	r3, #1
 800f208:	4628      	mov	r0, r5
 800f20a:	47b0      	blx	r6
 800f20c:	1c41      	adds	r1, r0, #1
 800f20e:	d1c7      	bne.n	800f1a0 <__sflush_r+0x34>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d0c4      	beq.n	800f1a0 <__sflush_r+0x34>
 800f216:	2b1d      	cmp	r3, #29
 800f218:	d001      	beq.n	800f21e <__sflush_r+0xb2>
 800f21a:	2b16      	cmp	r3, #22
 800f21c:	d101      	bne.n	800f222 <__sflush_r+0xb6>
 800f21e:	602f      	str	r7, [r5, #0]
 800f220:	e7b1      	b.n	800f186 <__sflush_r+0x1a>
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	e7ad      	b.n	800f188 <__sflush_r+0x1c>
 800f22c:	690f      	ldr	r7, [r1, #16]
 800f22e:	2f00      	cmp	r7, #0
 800f230:	d0a9      	beq.n	800f186 <__sflush_r+0x1a>
 800f232:	0793      	lsls	r3, r2, #30
 800f234:	680e      	ldr	r6, [r1, #0]
 800f236:	bf08      	it	eq
 800f238:	694b      	ldreq	r3, [r1, #20]
 800f23a:	600f      	str	r7, [r1, #0]
 800f23c:	bf18      	it	ne
 800f23e:	2300      	movne	r3, #0
 800f240:	eba6 0807 	sub.w	r8, r6, r7
 800f244:	608b      	str	r3, [r1, #8]
 800f246:	f1b8 0f00 	cmp.w	r8, #0
 800f24a:	dd9c      	ble.n	800f186 <__sflush_r+0x1a>
 800f24c:	6a21      	ldr	r1, [r4, #32]
 800f24e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f250:	4643      	mov	r3, r8
 800f252:	463a      	mov	r2, r7
 800f254:	4628      	mov	r0, r5
 800f256:	47b0      	blx	r6
 800f258:	2800      	cmp	r0, #0
 800f25a:	dc06      	bgt.n	800f26a <__sflush_r+0xfe>
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	e78e      	b.n	800f188 <__sflush_r+0x1c>
 800f26a:	4407      	add	r7, r0
 800f26c:	eba8 0800 	sub.w	r8, r8, r0
 800f270:	e7e9      	b.n	800f246 <__sflush_r+0xda>
 800f272:	bf00      	nop
 800f274:	20400001 	.word	0x20400001

0800f278 <_fflush_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	690b      	ldr	r3, [r1, #16]
 800f27c:	4605      	mov	r5, r0
 800f27e:	460c      	mov	r4, r1
 800f280:	b913      	cbnz	r3, 800f288 <_fflush_r+0x10>
 800f282:	2500      	movs	r5, #0
 800f284:	4628      	mov	r0, r5
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	b118      	cbz	r0, 800f292 <_fflush_r+0x1a>
 800f28a:	6983      	ldr	r3, [r0, #24]
 800f28c:	b90b      	cbnz	r3, 800f292 <_fflush_r+0x1a>
 800f28e:	f000 f887 	bl	800f3a0 <__sinit>
 800f292:	4b14      	ldr	r3, [pc, #80]	; (800f2e4 <_fflush_r+0x6c>)
 800f294:	429c      	cmp	r4, r3
 800f296:	d11b      	bne.n	800f2d0 <_fflush_r+0x58>
 800f298:	686c      	ldr	r4, [r5, #4]
 800f29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d0ef      	beq.n	800f282 <_fflush_r+0xa>
 800f2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2a4:	07d0      	lsls	r0, r2, #31
 800f2a6:	d404      	bmi.n	800f2b2 <_fflush_r+0x3a>
 800f2a8:	0599      	lsls	r1, r3, #22
 800f2aa:	d402      	bmi.n	800f2b2 <_fflush_r+0x3a>
 800f2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ae:	f000 f927 	bl	800f500 <__retarget_lock_acquire_recursive>
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	f7ff ff59 	bl	800f16c <__sflush_r>
 800f2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2bc:	07da      	lsls	r2, r3, #31
 800f2be:	4605      	mov	r5, r0
 800f2c0:	d4e0      	bmi.n	800f284 <_fflush_r+0xc>
 800f2c2:	89a3      	ldrh	r3, [r4, #12]
 800f2c4:	059b      	lsls	r3, r3, #22
 800f2c6:	d4dd      	bmi.n	800f284 <_fflush_r+0xc>
 800f2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ca:	f000 f91a 	bl	800f502 <__retarget_lock_release_recursive>
 800f2ce:	e7d9      	b.n	800f284 <_fflush_r+0xc>
 800f2d0:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <_fflush_r+0x70>)
 800f2d2:	429c      	cmp	r4, r3
 800f2d4:	d101      	bne.n	800f2da <_fflush_r+0x62>
 800f2d6:	68ac      	ldr	r4, [r5, #8]
 800f2d8:	e7df      	b.n	800f29a <_fflush_r+0x22>
 800f2da:	4b04      	ldr	r3, [pc, #16]	; (800f2ec <_fflush_r+0x74>)
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	bf08      	it	eq
 800f2e0:	68ec      	ldreq	r4, [r5, #12]
 800f2e2:	e7da      	b.n	800f29a <_fflush_r+0x22>
 800f2e4:	08012f24 	.word	0x08012f24
 800f2e8:	08012f44 	.word	0x08012f44
 800f2ec:	08012f04 	.word	0x08012f04

0800f2f0 <std>:
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	b510      	push	{r4, lr}
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	e9c0 3300 	strd	r3, r3, [r0]
 800f2fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2fe:	6083      	str	r3, [r0, #8]
 800f300:	8181      	strh	r1, [r0, #12]
 800f302:	6643      	str	r3, [r0, #100]	; 0x64
 800f304:	81c2      	strh	r2, [r0, #14]
 800f306:	6183      	str	r3, [r0, #24]
 800f308:	4619      	mov	r1, r3
 800f30a:	2208      	movs	r2, #8
 800f30c:	305c      	adds	r0, #92	; 0x5c
 800f30e:	f7ff fd45 	bl	800ed9c <memset>
 800f312:	4b05      	ldr	r3, [pc, #20]	; (800f328 <std+0x38>)
 800f314:	6263      	str	r3, [r4, #36]	; 0x24
 800f316:	4b05      	ldr	r3, [pc, #20]	; (800f32c <std+0x3c>)
 800f318:	62a3      	str	r3, [r4, #40]	; 0x28
 800f31a:	4b05      	ldr	r3, [pc, #20]	; (800f330 <std+0x40>)
 800f31c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f31e:	4b05      	ldr	r3, [pc, #20]	; (800f334 <std+0x44>)
 800f320:	6224      	str	r4, [r4, #32]
 800f322:	6323      	str	r3, [r4, #48]	; 0x30
 800f324:	bd10      	pop	{r4, pc}
 800f326:	bf00      	nop
 800f328:	0800ffe5 	.word	0x0800ffe5
 800f32c:	08010007 	.word	0x08010007
 800f330:	0801003f 	.word	0x0801003f
 800f334:	08010063 	.word	0x08010063

0800f338 <_cleanup_r>:
 800f338:	4901      	ldr	r1, [pc, #4]	; (800f340 <_cleanup_r+0x8>)
 800f33a:	f000 b8c1 	b.w	800f4c0 <_fwalk_reent>
 800f33e:	bf00      	nop
 800f340:	0800f279 	.word	0x0800f279

0800f344 <__sfmoreglue>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	1e4a      	subs	r2, r1, #1
 800f348:	2568      	movs	r5, #104	; 0x68
 800f34a:	4355      	muls	r5, r2
 800f34c:	460e      	mov	r6, r1
 800f34e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f352:	f000 f993 	bl	800f67c <_malloc_r>
 800f356:	4604      	mov	r4, r0
 800f358:	b140      	cbz	r0, 800f36c <__sfmoreglue+0x28>
 800f35a:	2100      	movs	r1, #0
 800f35c:	e9c0 1600 	strd	r1, r6, [r0]
 800f360:	300c      	adds	r0, #12
 800f362:	60a0      	str	r0, [r4, #8]
 800f364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f368:	f7ff fd18 	bl	800ed9c <memset>
 800f36c:	4620      	mov	r0, r4
 800f36e:	bd70      	pop	{r4, r5, r6, pc}

0800f370 <__sfp_lock_acquire>:
 800f370:	4801      	ldr	r0, [pc, #4]	; (800f378 <__sfp_lock_acquire+0x8>)
 800f372:	f000 b8c5 	b.w	800f500 <__retarget_lock_acquire_recursive>
 800f376:	bf00      	nop
 800f378:	2000843c 	.word	0x2000843c

0800f37c <__sfp_lock_release>:
 800f37c:	4801      	ldr	r0, [pc, #4]	; (800f384 <__sfp_lock_release+0x8>)
 800f37e:	f000 b8c0 	b.w	800f502 <__retarget_lock_release_recursive>
 800f382:	bf00      	nop
 800f384:	2000843c 	.word	0x2000843c

0800f388 <__sinit_lock_acquire>:
 800f388:	4801      	ldr	r0, [pc, #4]	; (800f390 <__sinit_lock_acquire+0x8>)
 800f38a:	f000 b8b9 	b.w	800f500 <__retarget_lock_acquire_recursive>
 800f38e:	bf00      	nop
 800f390:	20008437 	.word	0x20008437

0800f394 <__sinit_lock_release>:
 800f394:	4801      	ldr	r0, [pc, #4]	; (800f39c <__sinit_lock_release+0x8>)
 800f396:	f000 b8b4 	b.w	800f502 <__retarget_lock_release_recursive>
 800f39a:	bf00      	nop
 800f39c:	20008437 	.word	0x20008437

0800f3a0 <__sinit>:
 800f3a0:	b510      	push	{r4, lr}
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	f7ff fff0 	bl	800f388 <__sinit_lock_acquire>
 800f3a8:	69a3      	ldr	r3, [r4, #24]
 800f3aa:	b11b      	cbz	r3, 800f3b4 <__sinit+0x14>
 800f3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b0:	f7ff bff0 	b.w	800f394 <__sinit_lock_release>
 800f3b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3b8:	6523      	str	r3, [r4, #80]	; 0x50
 800f3ba:	4b13      	ldr	r3, [pc, #76]	; (800f408 <__sinit+0x68>)
 800f3bc:	4a13      	ldr	r2, [pc, #76]	; (800f40c <__sinit+0x6c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3c2:	42a3      	cmp	r3, r4
 800f3c4:	bf04      	itt	eq
 800f3c6:	2301      	moveq	r3, #1
 800f3c8:	61a3      	streq	r3, [r4, #24]
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 f820 	bl	800f410 <__sfp>
 800f3d0:	6060      	str	r0, [r4, #4]
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f81c 	bl	800f410 <__sfp>
 800f3d8:	60a0      	str	r0, [r4, #8]
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 f818 	bl	800f410 <__sfp>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	60e0      	str	r0, [r4, #12]
 800f3e4:	2104      	movs	r1, #4
 800f3e6:	6860      	ldr	r0, [r4, #4]
 800f3e8:	f7ff ff82 	bl	800f2f0 <std>
 800f3ec:	68a0      	ldr	r0, [r4, #8]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	2109      	movs	r1, #9
 800f3f2:	f7ff ff7d 	bl	800f2f0 <std>
 800f3f6:	68e0      	ldr	r0, [r4, #12]
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	2112      	movs	r1, #18
 800f3fc:	f7ff ff78 	bl	800f2f0 <std>
 800f400:	2301      	movs	r3, #1
 800f402:	61a3      	str	r3, [r4, #24]
 800f404:	e7d2      	b.n	800f3ac <__sinit+0xc>
 800f406:	bf00      	nop
 800f408:	08012e4c 	.word	0x08012e4c
 800f40c:	0800f339 	.word	0x0800f339

0800f410 <__sfp>:
 800f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f412:	4607      	mov	r7, r0
 800f414:	f7ff ffac 	bl	800f370 <__sfp_lock_acquire>
 800f418:	4b1e      	ldr	r3, [pc, #120]	; (800f494 <__sfp+0x84>)
 800f41a:	681e      	ldr	r6, [r3, #0]
 800f41c:	69b3      	ldr	r3, [r6, #24]
 800f41e:	b913      	cbnz	r3, 800f426 <__sfp+0x16>
 800f420:	4630      	mov	r0, r6
 800f422:	f7ff ffbd 	bl	800f3a0 <__sinit>
 800f426:	3648      	adds	r6, #72	; 0x48
 800f428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	d503      	bpl.n	800f438 <__sfp+0x28>
 800f430:	6833      	ldr	r3, [r6, #0]
 800f432:	b30b      	cbz	r3, 800f478 <__sfp+0x68>
 800f434:	6836      	ldr	r6, [r6, #0]
 800f436:	e7f7      	b.n	800f428 <__sfp+0x18>
 800f438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f43c:	b9d5      	cbnz	r5, 800f474 <__sfp+0x64>
 800f43e:	4b16      	ldr	r3, [pc, #88]	; (800f498 <__sfp+0x88>)
 800f440:	60e3      	str	r3, [r4, #12]
 800f442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f446:	6665      	str	r5, [r4, #100]	; 0x64
 800f448:	f000 f859 	bl	800f4fe <__retarget_lock_init_recursive>
 800f44c:	f7ff ff96 	bl	800f37c <__sfp_lock_release>
 800f450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f458:	6025      	str	r5, [r4, #0]
 800f45a:	61a5      	str	r5, [r4, #24]
 800f45c:	2208      	movs	r2, #8
 800f45e:	4629      	mov	r1, r5
 800f460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f464:	f7ff fc9a 	bl	800ed9c <memset>
 800f468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f46c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f470:	4620      	mov	r0, r4
 800f472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f474:	3468      	adds	r4, #104	; 0x68
 800f476:	e7d9      	b.n	800f42c <__sfp+0x1c>
 800f478:	2104      	movs	r1, #4
 800f47a:	4638      	mov	r0, r7
 800f47c:	f7ff ff62 	bl	800f344 <__sfmoreglue>
 800f480:	4604      	mov	r4, r0
 800f482:	6030      	str	r0, [r6, #0]
 800f484:	2800      	cmp	r0, #0
 800f486:	d1d5      	bne.n	800f434 <__sfp+0x24>
 800f488:	f7ff ff78 	bl	800f37c <__sfp_lock_release>
 800f48c:	230c      	movs	r3, #12
 800f48e:	603b      	str	r3, [r7, #0]
 800f490:	e7ee      	b.n	800f470 <__sfp+0x60>
 800f492:	bf00      	nop
 800f494:	08012e4c 	.word	0x08012e4c
 800f498:	ffff0001 	.word	0xffff0001

0800f49c <fiprintf>:
 800f49c:	b40e      	push	{r1, r2, r3}
 800f49e:	b503      	push	{r0, r1, lr}
 800f4a0:	4601      	mov	r1, r0
 800f4a2:	ab03      	add	r3, sp, #12
 800f4a4:	4805      	ldr	r0, [pc, #20]	; (800f4bc <fiprintf+0x20>)
 800f4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	f000 fac5 	bl	800fa3c <_vfiprintf_r>
 800f4b2:	b002      	add	sp, #8
 800f4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4b8:	b003      	add	sp, #12
 800f4ba:	4770      	bx	lr
 800f4bc:	2000002c 	.word	0x2000002c

0800f4c0 <_fwalk_reent>:
 800f4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c4:	4606      	mov	r6, r0
 800f4c6:	4688      	mov	r8, r1
 800f4c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4cc:	2700      	movs	r7, #0
 800f4ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4d2:	f1b9 0901 	subs.w	r9, r9, #1
 800f4d6:	d505      	bpl.n	800f4e4 <_fwalk_reent+0x24>
 800f4d8:	6824      	ldr	r4, [r4, #0]
 800f4da:	2c00      	cmp	r4, #0
 800f4dc:	d1f7      	bne.n	800f4ce <_fwalk_reent+0xe>
 800f4de:	4638      	mov	r0, r7
 800f4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e4:	89ab      	ldrh	r3, [r5, #12]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d907      	bls.n	800f4fa <_fwalk_reent+0x3a>
 800f4ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	d003      	beq.n	800f4fa <_fwalk_reent+0x3a>
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	47c0      	blx	r8
 800f4f8:	4307      	orrs	r7, r0
 800f4fa:	3568      	adds	r5, #104	; 0x68
 800f4fc:	e7e9      	b.n	800f4d2 <_fwalk_reent+0x12>

0800f4fe <__retarget_lock_init_recursive>:
 800f4fe:	4770      	bx	lr

0800f500 <__retarget_lock_acquire_recursive>:
 800f500:	4770      	bx	lr

0800f502 <__retarget_lock_release_recursive>:
 800f502:	4770      	bx	lr

0800f504 <__swhatbuf_r>:
 800f504:	b570      	push	{r4, r5, r6, lr}
 800f506:	460e      	mov	r6, r1
 800f508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f50c:	2900      	cmp	r1, #0
 800f50e:	b096      	sub	sp, #88	; 0x58
 800f510:	4614      	mov	r4, r2
 800f512:	461d      	mov	r5, r3
 800f514:	da07      	bge.n	800f526 <__swhatbuf_r+0x22>
 800f516:	2300      	movs	r3, #0
 800f518:	602b      	str	r3, [r5, #0]
 800f51a:	89b3      	ldrh	r3, [r6, #12]
 800f51c:	061a      	lsls	r2, r3, #24
 800f51e:	d410      	bmi.n	800f542 <__swhatbuf_r+0x3e>
 800f520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f524:	e00e      	b.n	800f544 <__swhatbuf_r+0x40>
 800f526:	466a      	mov	r2, sp
 800f528:	f000 fdca 	bl	80100c0 <_fstat_r>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	dbf2      	blt.n	800f516 <__swhatbuf_r+0x12>
 800f530:	9a01      	ldr	r2, [sp, #4]
 800f532:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f536:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f53a:	425a      	negs	r2, r3
 800f53c:	415a      	adcs	r2, r3
 800f53e:	602a      	str	r2, [r5, #0]
 800f540:	e7ee      	b.n	800f520 <__swhatbuf_r+0x1c>
 800f542:	2340      	movs	r3, #64	; 0x40
 800f544:	2000      	movs	r0, #0
 800f546:	6023      	str	r3, [r4, #0]
 800f548:	b016      	add	sp, #88	; 0x58
 800f54a:	bd70      	pop	{r4, r5, r6, pc}

0800f54c <__smakebuf_r>:
 800f54c:	898b      	ldrh	r3, [r1, #12]
 800f54e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f550:	079d      	lsls	r5, r3, #30
 800f552:	4606      	mov	r6, r0
 800f554:	460c      	mov	r4, r1
 800f556:	d507      	bpl.n	800f568 <__smakebuf_r+0x1c>
 800f558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	6123      	str	r3, [r4, #16]
 800f560:	2301      	movs	r3, #1
 800f562:	6163      	str	r3, [r4, #20]
 800f564:	b002      	add	sp, #8
 800f566:	bd70      	pop	{r4, r5, r6, pc}
 800f568:	ab01      	add	r3, sp, #4
 800f56a:	466a      	mov	r2, sp
 800f56c:	f7ff ffca 	bl	800f504 <__swhatbuf_r>
 800f570:	9900      	ldr	r1, [sp, #0]
 800f572:	4605      	mov	r5, r0
 800f574:	4630      	mov	r0, r6
 800f576:	f000 f881 	bl	800f67c <_malloc_r>
 800f57a:	b948      	cbnz	r0, 800f590 <__smakebuf_r+0x44>
 800f57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f580:	059a      	lsls	r2, r3, #22
 800f582:	d4ef      	bmi.n	800f564 <__smakebuf_r+0x18>
 800f584:	f023 0303 	bic.w	r3, r3, #3
 800f588:	f043 0302 	orr.w	r3, r3, #2
 800f58c:	81a3      	strh	r3, [r4, #12]
 800f58e:	e7e3      	b.n	800f558 <__smakebuf_r+0xc>
 800f590:	4b0d      	ldr	r3, [pc, #52]	; (800f5c8 <__smakebuf_r+0x7c>)
 800f592:	62b3      	str	r3, [r6, #40]	; 0x28
 800f594:	89a3      	ldrh	r3, [r4, #12]
 800f596:	6020      	str	r0, [r4, #0]
 800f598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f59c:	81a3      	strh	r3, [r4, #12]
 800f59e:	9b00      	ldr	r3, [sp, #0]
 800f5a0:	6163      	str	r3, [r4, #20]
 800f5a2:	9b01      	ldr	r3, [sp, #4]
 800f5a4:	6120      	str	r0, [r4, #16]
 800f5a6:	b15b      	cbz	r3, 800f5c0 <__smakebuf_r+0x74>
 800f5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f000 fd99 	bl	80100e4 <_isatty_r>
 800f5b2:	b128      	cbz	r0, 800f5c0 <__smakebuf_r+0x74>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	f023 0303 	bic.w	r3, r3, #3
 800f5ba:	f043 0301 	orr.w	r3, r3, #1
 800f5be:	81a3      	strh	r3, [r4, #12]
 800f5c0:	89a0      	ldrh	r0, [r4, #12]
 800f5c2:	4305      	orrs	r5, r0
 800f5c4:	81a5      	strh	r5, [r4, #12]
 800f5c6:	e7cd      	b.n	800f564 <__smakebuf_r+0x18>
 800f5c8:	0800f339 	.word	0x0800f339

0800f5cc <malloc>:
 800f5cc:	4b02      	ldr	r3, [pc, #8]	; (800f5d8 <malloc+0xc>)
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	6818      	ldr	r0, [r3, #0]
 800f5d2:	f000 b853 	b.w	800f67c <_malloc_r>
 800f5d6:	bf00      	nop
 800f5d8:	2000002c 	.word	0x2000002c

0800f5dc <_free_r>:
 800f5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5de:	2900      	cmp	r1, #0
 800f5e0:	d048      	beq.n	800f674 <_free_r+0x98>
 800f5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5e6:	9001      	str	r0, [sp, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800f5ee:	bfb8      	it	lt
 800f5f0:	18e4      	addlt	r4, r4, r3
 800f5f2:	f000 fd99 	bl	8010128 <__malloc_lock>
 800f5f6:	4a20      	ldr	r2, [pc, #128]	; (800f678 <_free_r+0x9c>)
 800f5f8:	9801      	ldr	r0, [sp, #4]
 800f5fa:	6813      	ldr	r3, [r2, #0]
 800f5fc:	4615      	mov	r5, r2
 800f5fe:	b933      	cbnz	r3, 800f60e <_free_r+0x32>
 800f600:	6063      	str	r3, [r4, #4]
 800f602:	6014      	str	r4, [r2, #0]
 800f604:	b003      	add	sp, #12
 800f606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f60a:	f000 bd93 	b.w	8010134 <__malloc_unlock>
 800f60e:	42a3      	cmp	r3, r4
 800f610:	d90b      	bls.n	800f62a <_free_r+0x4e>
 800f612:	6821      	ldr	r1, [r4, #0]
 800f614:	1862      	adds	r2, r4, r1
 800f616:	4293      	cmp	r3, r2
 800f618:	bf04      	itt	eq
 800f61a:	681a      	ldreq	r2, [r3, #0]
 800f61c:	685b      	ldreq	r3, [r3, #4]
 800f61e:	6063      	str	r3, [r4, #4]
 800f620:	bf04      	itt	eq
 800f622:	1852      	addeq	r2, r2, r1
 800f624:	6022      	streq	r2, [r4, #0]
 800f626:	602c      	str	r4, [r5, #0]
 800f628:	e7ec      	b.n	800f604 <_free_r+0x28>
 800f62a:	461a      	mov	r2, r3
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	b10b      	cbz	r3, 800f634 <_free_r+0x58>
 800f630:	42a3      	cmp	r3, r4
 800f632:	d9fa      	bls.n	800f62a <_free_r+0x4e>
 800f634:	6811      	ldr	r1, [r2, #0]
 800f636:	1855      	adds	r5, r2, r1
 800f638:	42a5      	cmp	r5, r4
 800f63a:	d10b      	bne.n	800f654 <_free_r+0x78>
 800f63c:	6824      	ldr	r4, [r4, #0]
 800f63e:	4421      	add	r1, r4
 800f640:	1854      	adds	r4, r2, r1
 800f642:	42a3      	cmp	r3, r4
 800f644:	6011      	str	r1, [r2, #0]
 800f646:	d1dd      	bne.n	800f604 <_free_r+0x28>
 800f648:	681c      	ldr	r4, [r3, #0]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	6053      	str	r3, [r2, #4]
 800f64e:	4421      	add	r1, r4
 800f650:	6011      	str	r1, [r2, #0]
 800f652:	e7d7      	b.n	800f604 <_free_r+0x28>
 800f654:	d902      	bls.n	800f65c <_free_r+0x80>
 800f656:	230c      	movs	r3, #12
 800f658:	6003      	str	r3, [r0, #0]
 800f65a:	e7d3      	b.n	800f604 <_free_r+0x28>
 800f65c:	6825      	ldr	r5, [r4, #0]
 800f65e:	1961      	adds	r1, r4, r5
 800f660:	428b      	cmp	r3, r1
 800f662:	bf04      	itt	eq
 800f664:	6819      	ldreq	r1, [r3, #0]
 800f666:	685b      	ldreq	r3, [r3, #4]
 800f668:	6063      	str	r3, [r4, #4]
 800f66a:	bf04      	itt	eq
 800f66c:	1949      	addeq	r1, r1, r5
 800f66e:	6021      	streq	r1, [r4, #0]
 800f670:	6054      	str	r4, [r2, #4]
 800f672:	e7c7      	b.n	800f604 <_free_r+0x28>
 800f674:	b003      	add	sp, #12
 800f676:	bd30      	pop	{r4, r5, pc}
 800f678:	2000023c 	.word	0x2000023c

0800f67c <_malloc_r>:
 800f67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f67e:	1ccd      	adds	r5, r1, #3
 800f680:	f025 0503 	bic.w	r5, r5, #3
 800f684:	3508      	adds	r5, #8
 800f686:	2d0c      	cmp	r5, #12
 800f688:	bf38      	it	cc
 800f68a:	250c      	movcc	r5, #12
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	4606      	mov	r6, r0
 800f690:	db01      	blt.n	800f696 <_malloc_r+0x1a>
 800f692:	42a9      	cmp	r1, r5
 800f694:	d903      	bls.n	800f69e <_malloc_r+0x22>
 800f696:	230c      	movs	r3, #12
 800f698:	6033      	str	r3, [r6, #0]
 800f69a:	2000      	movs	r0, #0
 800f69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f69e:	f000 fd43 	bl	8010128 <__malloc_lock>
 800f6a2:	4921      	ldr	r1, [pc, #132]	; (800f728 <_malloc_r+0xac>)
 800f6a4:	680a      	ldr	r2, [r1, #0]
 800f6a6:	4614      	mov	r4, r2
 800f6a8:	b99c      	cbnz	r4, 800f6d2 <_malloc_r+0x56>
 800f6aa:	4f20      	ldr	r7, [pc, #128]	; (800f72c <_malloc_r+0xb0>)
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	b923      	cbnz	r3, 800f6ba <_malloc_r+0x3e>
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f000 fc86 	bl	800ffc4 <_sbrk_r>
 800f6b8:	6038      	str	r0, [r7, #0]
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f000 fc81 	bl	800ffc4 <_sbrk_r>
 800f6c2:	1c43      	adds	r3, r0, #1
 800f6c4:	d123      	bne.n	800f70e <_malloc_r+0x92>
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	6033      	str	r3, [r6, #0]
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f000 fd32 	bl	8010134 <__malloc_unlock>
 800f6d0:	e7e3      	b.n	800f69a <_malloc_r+0x1e>
 800f6d2:	6823      	ldr	r3, [r4, #0]
 800f6d4:	1b5b      	subs	r3, r3, r5
 800f6d6:	d417      	bmi.n	800f708 <_malloc_r+0x8c>
 800f6d8:	2b0b      	cmp	r3, #11
 800f6da:	d903      	bls.n	800f6e4 <_malloc_r+0x68>
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	441c      	add	r4, r3
 800f6e0:	6025      	str	r5, [r4, #0]
 800f6e2:	e004      	b.n	800f6ee <_malloc_r+0x72>
 800f6e4:	6863      	ldr	r3, [r4, #4]
 800f6e6:	42a2      	cmp	r2, r4
 800f6e8:	bf0c      	ite	eq
 800f6ea:	600b      	streq	r3, [r1, #0]
 800f6ec:	6053      	strne	r3, [r2, #4]
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f000 fd20 	bl	8010134 <__malloc_unlock>
 800f6f4:	f104 000b 	add.w	r0, r4, #11
 800f6f8:	1d23      	adds	r3, r4, #4
 800f6fa:	f020 0007 	bic.w	r0, r0, #7
 800f6fe:	1ac2      	subs	r2, r0, r3
 800f700:	d0cc      	beq.n	800f69c <_malloc_r+0x20>
 800f702:	1a1b      	subs	r3, r3, r0
 800f704:	50a3      	str	r3, [r4, r2]
 800f706:	e7c9      	b.n	800f69c <_malloc_r+0x20>
 800f708:	4622      	mov	r2, r4
 800f70a:	6864      	ldr	r4, [r4, #4]
 800f70c:	e7cc      	b.n	800f6a8 <_malloc_r+0x2c>
 800f70e:	1cc4      	adds	r4, r0, #3
 800f710:	f024 0403 	bic.w	r4, r4, #3
 800f714:	42a0      	cmp	r0, r4
 800f716:	d0e3      	beq.n	800f6e0 <_malloc_r+0x64>
 800f718:	1a21      	subs	r1, r4, r0
 800f71a:	4630      	mov	r0, r6
 800f71c:	f000 fc52 	bl	800ffc4 <_sbrk_r>
 800f720:	3001      	adds	r0, #1
 800f722:	d1dd      	bne.n	800f6e0 <_malloc_r+0x64>
 800f724:	e7cf      	b.n	800f6c6 <_malloc_r+0x4a>
 800f726:	bf00      	nop
 800f728:	2000023c 	.word	0x2000023c
 800f72c:	20000240 	.word	0x20000240

0800f730 <__ssputs_r>:
 800f730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f734:	688e      	ldr	r6, [r1, #8]
 800f736:	429e      	cmp	r6, r3
 800f738:	4682      	mov	sl, r0
 800f73a:	460c      	mov	r4, r1
 800f73c:	4690      	mov	r8, r2
 800f73e:	461f      	mov	r7, r3
 800f740:	d838      	bhi.n	800f7b4 <__ssputs_r+0x84>
 800f742:	898a      	ldrh	r2, [r1, #12]
 800f744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f748:	d032      	beq.n	800f7b0 <__ssputs_r+0x80>
 800f74a:	6825      	ldr	r5, [r4, #0]
 800f74c:	6909      	ldr	r1, [r1, #16]
 800f74e:	eba5 0901 	sub.w	r9, r5, r1
 800f752:	6965      	ldr	r5, [r4, #20]
 800f754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f75c:	3301      	adds	r3, #1
 800f75e:	444b      	add	r3, r9
 800f760:	106d      	asrs	r5, r5, #1
 800f762:	429d      	cmp	r5, r3
 800f764:	bf38      	it	cc
 800f766:	461d      	movcc	r5, r3
 800f768:	0553      	lsls	r3, r2, #21
 800f76a:	d531      	bpl.n	800f7d0 <__ssputs_r+0xa0>
 800f76c:	4629      	mov	r1, r5
 800f76e:	f7ff ff85 	bl	800f67c <_malloc_r>
 800f772:	4606      	mov	r6, r0
 800f774:	b950      	cbnz	r0, 800f78c <__ssputs_r+0x5c>
 800f776:	230c      	movs	r3, #12
 800f778:	f8ca 3000 	str.w	r3, [sl]
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f782:	81a3      	strh	r3, [r4, #12]
 800f784:	f04f 30ff 	mov.w	r0, #4294967295
 800f788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f78c:	6921      	ldr	r1, [r4, #16]
 800f78e:	464a      	mov	r2, r9
 800f790:	f7ff fadc 	bl	800ed4c <memcpy>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	6126      	str	r6, [r4, #16]
 800f7a2:	6165      	str	r5, [r4, #20]
 800f7a4:	444e      	add	r6, r9
 800f7a6:	eba5 0509 	sub.w	r5, r5, r9
 800f7aa:	6026      	str	r6, [r4, #0]
 800f7ac:	60a5      	str	r5, [r4, #8]
 800f7ae:	463e      	mov	r6, r7
 800f7b0:	42be      	cmp	r6, r7
 800f7b2:	d900      	bls.n	800f7b6 <__ssputs_r+0x86>
 800f7b4:	463e      	mov	r6, r7
 800f7b6:	4632      	mov	r2, r6
 800f7b8:	6820      	ldr	r0, [r4, #0]
 800f7ba:	4641      	mov	r1, r8
 800f7bc:	f7ff fad4 	bl	800ed68 <memmove>
 800f7c0:	68a3      	ldr	r3, [r4, #8]
 800f7c2:	6822      	ldr	r2, [r4, #0]
 800f7c4:	1b9b      	subs	r3, r3, r6
 800f7c6:	4432      	add	r2, r6
 800f7c8:	60a3      	str	r3, [r4, #8]
 800f7ca:	6022      	str	r2, [r4, #0]
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	e7db      	b.n	800f788 <__ssputs_r+0x58>
 800f7d0:	462a      	mov	r2, r5
 800f7d2:	f000 fcb5 	bl	8010140 <_realloc_r>
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d1e1      	bne.n	800f7a0 <__ssputs_r+0x70>
 800f7dc:	6921      	ldr	r1, [r4, #16]
 800f7de:	4650      	mov	r0, sl
 800f7e0:	f7ff fefc 	bl	800f5dc <_free_r>
 800f7e4:	e7c7      	b.n	800f776 <__ssputs_r+0x46>
	...

0800f7e8 <_svfiprintf_r>:
 800f7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ec:	4698      	mov	r8, r3
 800f7ee:	898b      	ldrh	r3, [r1, #12]
 800f7f0:	061b      	lsls	r3, r3, #24
 800f7f2:	b09d      	sub	sp, #116	; 0x74
 800f7f4:	4607      	mov	r7, r0
 800f7f6:	460d      	mov	r5, r1
 800f7f8:	4614      	mov	r4, r2
 800f7fa:	d50e      	bpl.n	800f81a <_svfiprintf_r+0x32>
 800f7fc:	690b      	ldr	r3, [r1, #16]
 800f7fe:	b963      	cbnz	r3, 800f81a <_svfiprintf_r+0x32>
 800f800:	2140      	movs	r1, #64	; 0x40
 800f802:	f7ff ff3b 	bl	800f67c <_malloc_r>
 800f806:	6028      	str	r0, [r5, #0]
 800f808:	6128      	str	r0, [r5, #16]
 800f80a:	b920      	cbnz	r0, 800f816 <_svfiprintf_r+0x2e>
 800f80c:	230c      	movs	r3, #12
 800f80e:	603b      	str	r3, [r7, #0]
 800f810:	f04f 30ff 	mov.w	r0, #4294967295
 800f814:	e0d1      	b.n	800f9ba <_svfiprintf_r+0x1d2>
 800f816:	2340      	movs	r3, #64	; 0x40
 800f818:	616b      	str	r3, [r5, #20]
 800f81a:	2300      	movs	r3, #0
 800f81c:	9309      	str	r3, [sp, #36]	; 0x24
 800f81e:	2320      	movs	r3, #32
 800f820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f824:	f8cd 800c 	str.w	r8, [sp, #12]
 800f828:	2330      	movs	r3, #48	; 0x30
 800f82a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f9d4 <_svfiprintf_r+0x1ec>
 800f82e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f832:	f04f 0901 	mov.w	r9, #1
 800f836:	4623      	mov	r3, r4
 800f838:	469a      	mov	sl, r3
 800f83a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f83e:	b10a      	cbz	r2, 800f844 <_svfiprintf_r+0x5c>
 800f840:	2a25      	cmp	r2, #37	; 0x25
 800f842:	d1f9      	bne.n	800f838 <_svfiprintf_r+0x50>
 800f844:	ebba 0b04 	subs.w	fp, sl, r4
 800f848:	d00b      	beq.n	800f862 <_svfiprintf_r+0x7a>
 800f84a:	465b      	mov	r3, fp
 800f84c:	4622      	mov	r2, r4
 800f84e:	4629      	mov	r1, r5
 800f850:	4638      	mov	r0, r7
 800f852:	f7ff ff6d 	bl	800f730 <__ssputs_r>
 800f856:	3001      	adds	r0, #1
 800f858:	f000 80aa 	beq.w	800f9b0 <_svfiprintf_r+0x1c8>
 800f85c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f85e:	445a      	add	r2, fp
 800f860:	9209      	str	r2, [sp, #36]	; 0x24
 800f862:	f89a 3000 	ldrb.w	r3, [sl]
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 80a2 	beq.w	800f9b0 <_svfiprintf_r+0x1c8>
 800f86c:	2300      	movs	r3, #0
 800f86e:	f04f 32ff 	mov.w	r2, #4294967295
 800f872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f876:	f10a 0a01 	add.w	sl, sl, #1
 800f87a:	9304      	str	r3, [sp, #16]
 800f87c:	9307      	str	r3, [sp, #28]
 800f87e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f882:	931a      	str	r3, [sp, #104]	; 0x68
 800f884:	4654      	mov	r4, sl
 800f886:	2205      	movs	r2, #5
 800f888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f88c:	4851      	ldr	r0, [pc, #324]	; (800f9d4 <_svfiprintf_r+0x1ec>)
 800f88e:	f7f0 fcaf 	bl	80001f0 <memchr>
 800f892:	9a04      	ldr	r2, [sp, #16]
 800f894:	b9d8      	cbnz	r0, 800f8ce <_svfiprintf_r+0xe6>
 800f896:	06d0      	lsls	r0, r2, #27
 800f898:	bf44      	itt	mi
 800f89a:	2320      	movmi	r3, #32
 800f89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8a0:	0711      	lsls	r1, r2, #28
 800f8a2:	bf44      	itt	mi
 800f8a4:	232b      	movmi	r3, #43	; 0x2b
 800f8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f8ae:	2b2a      	cmp	r3, #42	; 0x2a
 800f8b0:	d015      	beq.n	800f8de <_svfiprintf_r+0xf6>
 800f8b2:	9a07      	ldr	r2, [sp, #28]
 800f8b4:	4654      	mov	r4, sl
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	f04f 0c0a 	mov.w	ip, #10
 800f8bc:	4621      	mov	r1, r4
 800f8be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8c2:	3b30      	subs	r3, #48	; 0x30
 800f8c4:	2b09      	cmp	r3, #9
 800f8c6:	d94e      	bls.n	800f966 <_svfiprintf_r+0x17e>
 800f8c8:	b1b0      	cbz	r0, 800f8f8 <_svfiprintf_r+0x110>
 800f8ca:	9207      	str	r2, [sp, #28]
 800f8cc:	e014      	b.n	800f8f8 <_svfiprintf_r+0x110>
 800f8ce:	eba0 0308 	sub.w	r3, r0, r8
 800f8d2:	fa09 f303 	lsl.w	r3, r9, r3
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	9304      	str	r3, [sp, #16]
 800f8da:	46a2      	mov	sl, r4
 800f8dc:	e7d2      	b.n	800f884 <_svfiprintf_r+0x9c>
 800f8de:	9b03      	ldr	r3, [sp, #12]
 800f8e0:	1d19      	adds	r1, r3, #4
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	9103      	str	r1, [sp, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	bfbb      	ittet	lt
 800f8ea:	425b      	neglt	r3, r3
 800f8ec:	f042 0202 	orrlt.w	r2, r2, #2
 800f8f0:	9307      	strge	r3, [sp, #28]
 800f8f2:	9307      	strlt	r3, [sp, #28]
 800f8f4:	bfb8      	it	lt
 800f8f6:	9204      	strlt	r2, [sp, #16]
 800f8f8:	7823      	ldrb	r3, [r4, #0]
 800f8fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f8fc:	d10c      	bne.n	800f918 <_svfiprintf_r+0x130>
 800f8fe:	7863      	ldrb	r3, [r4, #1]
 800f900:	2b2a      	cmp	r3, #42	; 0x2a
 800f902:	d135      	bne.n	800f970 <_svfiprintf_r+0x188>
 800f904:	9b03      	ldr	r3, [sp, #12]
 800f906:	1d1a      	adds	r2, r3, #4
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	9203      	str	r2, [sp, #12]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	bfb8      	it	lt
 800f910:	f04f 33ff 	movlt.w	r3, #4294967295
 800f914:	3402      	adds	r4, #2
 800f916:	9305      	str	r3, [sp, #20]
 800f918:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f9e4 <_svfiprintf_r+0x1fc>
 800f91c:	7821      	ldrb	r1, [r4, #0]
 800f91e:	2203      	movs	r2, #3
 800f920:	4650      	mov	r0, sl
 800f922:	f7f0 fc65 	bl	80001f0 <memchr>
 800f926:	b140      	cbz	r0, 800f93a <_svfiprintf_r+0x152>
 800f928:	2340      	movs	r3, #64	; 0x40
 800f92a:	eba0 000a 	sub.w	r0, r0, sl
 800f92e:	fa03 f000 	lsl.w	r0, r3, r0
 800f932:	9b04      	ldr	r3, [sp, #16]
 800f934:	4303      	orrs	r3, r0
 800f936:	3401      	adds	r4, #1
 800f938:	9304      	str	r3, [sp, #16]
 800f93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f93e:	4826      	ldr	r0, [pc, #152]	; (800f9d8 <_svfiprintf_r+0x1f0>)
 800f940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f944:	2206      	movs	r2, #6
 800f946:	f7f0 fc53 	bl	80001f0 <memchr>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	d038      	beq.n	800f9c0 <_svfiprintf_r+0x1d8>
 800f94e:	4b23      	ldr	r3, [pc, #140]	; (800f9dc <_svfiprintf_r+0x1f4>)
 800f950:	bb1b      	cbnz	r3, 800f99a <_svfiprintf_r+0x1b2>
 800f952:	9b03      	ldr	r3, [sp, #12]
 800f954:	3307      	adds	r3, #7
 800f956:	f023 0307 	bic.w	r3, r3, #7
 800f95a:	3308      	adds	r3, #8
 800f95c:	9303      	str	r3, [sp, #12]
 800f95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f960:	4433      	add	r3, r6
 800f962:	9309      	str	r3, [sp, #36]	; 0x24
 800f964:	e767      	b.n	800f836 <_svfiprintf_r+0x4e>
 800f966:	fb0c 3202 	mla	r2, ip, r2, r3
 800f96a:	460c      	mov	r4, r1
 800f96c:	2001      	movs	r0, #1
 800f96e:	e7a5      	b.n	800f8bc <_svfiprintf_r+0xd4>
 800f970:	2300      	movs	r3, #0
 800f972:	3401      	adds	r4, #1
 800f974:	9305      	str	r3, [sp, #20]
 800f976:	4619      	mov	r1, r3
 800f978:	f04f 0c0a 	mov.w	ip, #10
 800f97c:	4620      	mov	r0, r4
 800f97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f982:	3a30      	subs	r2, #48	; 0x30
 800f984:	2a09      	cmp	r2, #9
 800f986:	d903      	bls.n	800f990 <_svfiprintf_r+0x1a8>
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d0c5      	beq.n	800f918 <_svfiprintf_r+0x130>
 800f98c:	9105      	str	r1, [sp, #20]
 800f98e:	e7c3      	b.n	800f918 <_svfiprintf_r+0x130>
 800f990:	fb0c 2101 	mla	r1, ip, r1, r2
 800f994:	4604      	mov	r4, r0
 800f996:	2301      	movs	r3, #1
 800f998:	e7f0      	b.n	800f97c <_svfiprintf_r+0x194>
 800f99a:	ab03      	add	r3, sp, #12
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	462a      	mov	r2, r5
 800f9a0:	4b0f      	ldr	r3, [pc, #60]	; (800f9e0 <_svfiprintf_r+0x1f8>)
 800f9a2:	a904      	add	r1, sp, #16
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f3af 8000 	nop.w
 800f9aa:	1c42      	adds	r2, r0, #1
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	d1d6      	bne.n	800f95e <_svfiprintf_r+0x176>
 800f9b0:	89ab      	ldrh	r3, [r5, #12]
 800f9b2:	065b      	lsls	r3, r3, #25
 800f9b4:	f53f af2c 	bmi.w	800f810 <_svfiprintf_r+0x28>
 800f9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9ba:	b01d      	add	sp, #116	; 0x74
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c0:	ab03      	add	r3, sp, #12
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	462a      	mov	r2, r5
 800f9c6:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <_svfiprintf_r+0x1f8>)
 800f9c8:	a904      	add	r1, sp, #16
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	f000 f9d4 	bl	800fd78 <_printf_i>
 800f9d0:	e7eb      	b.n	800f9aa <_svfiprintf_r+0x1c2>
 800f9d2:	bf00      	nop
 800f9d4:	08012f64 	.word	0x08012f64
 800f9d8:	08012f6e 	.word	0x08012f6e
 800f9dc:	00000000 	.word	0x00000000
 800f9e0:	0800f731 	.word	0x0800f731
 800f9e4:	08012f6a 	.word	0x08012f6a

0800f9e8 <__sfputc_r>:
 800f9e8:	6893      	ldr	r3, [r2, #8]
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	b410      	push	{r4}
 800f9f0:	6093      	str	r3, [r2, #8]
 800f9f2:	da08      	bge.n	800fa06 <__sfputc_r+0x1e>
 800f9f4:	6994      	ldr	r4, [r2, #24]
 800f9f6:	42a3      	cmp	r3, r4
 800f9f8:	db01      	blt.n	800f9fe <__sfputc_r+0x16>
 800f9fa:	290a      	cmp	r1, #10
 800f9fc:	d103      	bne.n	800fa06 <__sfputc_r+0x1e>
 800f9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa02:	f7ff bad5 	b.w	800efb0 <__swbuf_r>
 800fa06:	6813      	ldr	r3, [r2, #0]
 800fa08:	1c58      	adds	r0, r3, #1
 800fa0a:	6010      	str	r0, [r2, #0]
 800fa0c:	7019      	strb	r1, [r3, #0]
 800fa0e:	4608      	mov	r0, r1
 800fa10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <__sfputs_r>:
 800fa16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa18:	4606      	mov	r6, r0
 800fa1a:	460f      	mov	r7, r1
 800fa1c:	4614      	mov	r4, r2
 800fa1e:	18d5      	adds	r5, r2, r3
 800fa20:	42ac      	cmp	r4, r5
 800fa22:	d101      	bne.n	800fa28 <__sfputs_r+0x12>
 800fa24:	2000      	movs	r0, #0
 800fa26:	e007      	b.n	800fa38 <__sfputs_r+0x22>
 800fa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa2c:	463a      	mov	r2, r7
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f7ff ffda 	bl	800f9e8 <__sfputc_r>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d1f3      	bne.n	800fa20 <__sfputs_r+0xa>
 800fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa3c <_vfiprintf_r>:
 800fa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa40:	460d      	mov	r5, r1
 800fa42:	b09d      	sub	sp, #116	; 0x74
 800fa44:	4614      	mov	r4, r2
 800fa46:	4698      	mov	r8, r3
 800fa48:	4606      	mov	r6, r0
 800fa4a:	b118      	cbz	r0, 800fa54 <_vfiprintf_r+0x18>
 800fa4c:	6983      	ldr	r3, [r0, #24]
 800fa4e:	b90b      	cbnz	r3, 800fa54 <_vfiprintf_r+0x18>
 800fa50:	f7ff fca6 	bl	800f3a0 <__sinit>
 800fa54:	4b89      	ldr	r3, [pc, #548]	; (800fc7c <_vfiprintf_r+0x240>)
 800fa56:	429d      	cmp	r5, r3
 800fa58:	d11b      	bne.n	800fa92 <_vfiprintf_r+0x56>
 800fa5a:	6875      	ldr	r5, [r6, #4]
 800fa5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa5e:	07d9      	lsls	r1, r3, #31
 800fa60:	d405      	bmi.n	800fa6e <_vfiprintf_r+0x32>
 800fa62:	89ab      	ldrh	r3, [r5, #12]
 800fa64:	059a      	lsls	r2, r3, #22
 800fa66:	d402      	bmi.n	800fa6e <_vfiprintf_r+0x32>
 800fa68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa6a:	f7ff fd49 	bl	800f500 <__retarget_lock_acquire_recursive>
 800fa6e:	89ab      	ldrh	r3, [r5, #12]
 800fa70:	071b      	lsls	r3, r3, #28
 800fa72:	d501      	bpl.n	800fa78 <_vfiprintf_r+0x3c>
 800fa74:	692b      	ldr	r3, [r5, #16]
 800fa76:	b9eb      	cbnz	r3, 800fab4 <_vfiprintf_r+0x78>
 800fa78:	4629      	mov	r1, r5
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	f7ff faea 	bl	800f054 <__swsetup_r>
 800fa80:	b1c0      	cbz	r0, 800fab4 <_vfiprintf_r+0x78>
 800fa82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa84:	07dc      	lsls	r4, r3, #31
 800fa86:	d50e      	bpl.n	800faa6 <_vfiprintf_r+0x6a>
 800fa88:	f04f 30ff 	mov.w	r0, #4294967295
 800fa8c:	b01d      	add	sp, #116	; 0x74
 800fa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa92:	4b7b      	ldr	r3, [pc, #492]	; (800fc80 <_vfiprintf_r+0x244>)
 800fa94:	429d      	cmp	r5, r3
 800fa96:	d101      	bne.n	800fa9c <_vfiprintf_r+0x60>
 800fa98:	68b5      	ldr	r5, [r6, #8]
 800fa9a:	e7df      	b.n	800fa5c <_vfiprintf_r+0x20>
 800fa9c:	4b79      	ldr	r3, [pc, #484]	; (800fc84 <_vfiprintf_r+0x248>)
 800fa9e:	429d      	cmp	r5, r3
 800faa0:	bf08      	it	eq
 800faa2:	68f5      	ldreq	r5, [r6, #12]
 800faa4:	e7da      	b.n	800fa5c <_vfiprintf_r+0x20>
 800faa6:	89ab      	ldrh	r3, [r5, #12]
 800faa8:	0598      	lsls	r0, r3, #22
 800faaa:	d4ed      	bmi.n	800fa88 <_vfiprintf_r+0x4c>
 800faac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faae:	f7ff fd28 	bl	800f502 <__retarget_lock_release_recursive>
 800fab2:	e7e9      	b.n	800fa88 <_vfiprintf_r+0x4c>
 800fab4:	2300      	movs	r3, #0
 800fab6:	9309      	str	r3, [sp, #36]	; 0x24
 800fab8:	2320      	movs	r3, #32
 800faba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fabe:	f8cd 800c 	str.w	r8, [sp, #12]
 800fac2:	2330      	movs	r3, #48	; 0x30
 800fac4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc88 <_vfiprintf_r+0x24c>
 800fac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800facc:	f04f 0901 	mov.w	r9, #1
 800fad0:	4623      	mov	r3, r4
 800fad2:	469a      	mov	sl, r3
 800fad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fad8:	b10a      	cbz	r2, 800fade <_vfiprintf_r+0xa2>
 800fada:	2a25      	cmp	r2, #37	; 0x25
 800fadc:	d1f9      	bne.n	800fad2 <_vfiprintf_r+0x96>
 800fade:	ebba 0b04 	subs.w	fp, sl, r4
 800fae2:	d00b      	beq.n	800fafc <_vfiprintf_r+0xc0>
 800fae4:	465b      	mov	r3, fp
 800fae6:	4622      	mov	r2, r4
 800fae8:	4629      	mov	r1, r5
 800faea:	4630      	mov	r0, r6
 800faec:	f7ff ff93 	bl	800fa16 <__sfputs_r>
 800faf0:	3001      	adds	r0, #1
 800faf2:	f000 80aa 	beq.w	800fc4a <_vfiprintf_r+0x20e>
 800faf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faf8:	445a      	add	r2, fp
 800fafa:	9209      	str	r2, [sp, #36]	; 0x24
 800fafc:	f89a 3000 	ldrb.w	r3, [sl]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f000 80a2 	beq.w	800fc4a <_vfiprintf_r+0x20e>
 800fb06:	2300      	movs	r3, #0
 800fb08:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb10:	f10a 0a01 	add.w	sl, sl, #1
 800fb14:	9304      	str	r3, [sp, #16]
 800fb16:	9307      	str	r3, [sp, #28]
 800fb18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb1c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb1e:	4654      	mov	r4, sl
 800fb20:	2205      	movs	r2, #5
 800fb22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb26:	4858      	ldr	r0, [pc, #352]	; (800fc88 <_vfiprintf_r+0x24c>)
 800fb28:	f7f0 fb62 	bl	80001f0 <memchr>
 800fb2c:	9a04      	ldr	r2, [sp, #16]
 800fb2e:	b9d8      	cbnz	r0, 800fb68 <_vfiprintf_r+0x12c>
 800fb30:	06d1      	lsls	r1, r2, #27
 800fb32:	bf44      	itt	mi
 800fb34:	2320      	movmi	r3, #32
 800fb36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb3a:	0713      	lsls	r3, r2, #28
 800fb3c:	bf44      	itt	mi
 800fb3e:	232b      	movmi	r3, #43	; 0x2b
 800fb40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb44:	f89a 3000 	ldrb.w	r3, [sl]
 800fb48:	2b2a      	cmp	r3, #42	; 0x2a
 800fb4a:	d015      	beq.n	800fb78 <_vfiprintf_r+0x13c>
 800fb4c:	9a07      	ldr	r2, [sp, #28]
 800fb4e:	4654      	mov	r4, sl
 800fb50:	2000      	movs	r0, #0
 800fb52:	f04f 0c0a 	mov.w	ip, #10
 800fb56:	4621      	mov	r1, r4
 800fb58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb5c:	3b30      	subs	r3, #48	; 0x30
 800fb5e:	2b09      	cmp	r3, #9
 800fb60:	d94e      	bls.n	800fc00 <_vfiprintf_r+0x1c4>
 800fb62:	b1b0      	cbz	r0, 800fb92 <_vfiprintf_r+0x156>
 800fb64:	9207      	str	r2, [sp, #28]
 800fb66:	e014      	b.n	800fb92 <_vfiprintf_r+0x156>
 800fb68:	eba0 0308 	sub.w	r3, r0, r8
 800fb6c:	fa09 f303 	lsl.w	r3, r9, r3
 800fb70:	4313      	orrs	r3, r2
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	46a2      	mov	sl, r4
 800fb76:	e7d2      	b.n	800fb1e <_vfiprintf_r+0xe2>
 800fb78:	9b03      	ldr	r3, [sp, #12]
 800fb7a:	1d19      	adds	r1, r3, #4
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	9103      	str	r1, [sp, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	bfbb      	ittet	lt
 800fb84:	425b      	neglt	r3, r3
 800fb86:	f042 0202 	orrlt.w	r2, r2, #2
 800fb8a:	9307      	strge	r3, [sp, #28]
 800fb8c:	9307      	strlt	r3, [sp, #28]
 800fb8e:	bfb8      	it	lt
 800fb90:	9204      	strlt	r2, [sp, #16]
 800fb92:	7823      	ldrb	r3, [r4, #0]
 800fb94:	2b2e      	cmp	r3, #46	; 0x2e
 800fb96:	d10c      	bne.n	800fbb2 <_vfiprintf_r+0x176>
 800fb98:	7863      	ldrb	r3, [r4, #1]
 800fb9a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb9c:	d135      	bne.n	800fc0a <_vfiprintf_r+0x1ce>
 800fb9e:	9b03      	ldr	r3, [sp, #12]
 800fba0:	1d1a      	adds	r2, r3, #4
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	9203      	str	r2, [sp, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	bfb8      	it	lt
 800fbaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbae:	3402      	adds	r4, #2
 800fbb0:	9305      	str	r3, [sp, #20]
 800fbb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc98 <_vfiprintf_r+0x25c>
 800fbb6:	7821      	ldrb	r1, [r4, #0]
 800fbb8:	2203      	movs	r2, #3
 800fbba:	4650      	mov	r0, sl
 800fbbc:	f7f0 fb18 	bl	80001f0 <memchr>
 800fbc0:	b140      	cbz	r0, 800fbd4 <_vfiprintf_r+0x198>
 800fbc2:	2340      	movs	r3, #64	; 0x40
 800fbc4:	eba0 000a 	sub.w	r0, r0, sl
 800fbc8:	fa03 f000 	lsl.w	r0, r3, r0
 800fbcc:	9b04      	ldr	r3, [sp, #16]
 800fbce:	4303      	orrs	r3, r0
 800fbd0:	3401      	adds	r4, #1
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbd8:	482c      	ldr	r0, [pc, #176]	; (800fc8c <_vfiprintf_r+0x250>)
 800fbda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbde:	2206      	movs	r2, #6
 800fbe0:	f7f0 fb06 	bl	80001f0 <memchr>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d03f      	beq.n	800fc68 <_vfiprintf_r+0x22c>
 800fbe8:	4b29      	ldr	r3, [pc, #164]	; (800fc90 <_vfiprintf_r+0x254>)
 800fbea:	bb1b      	cbnz	r3, 800fc34 <_vfiprintf_r+0x1f8>
 800fbec:	9b03      	ldr	r3, [sp, #12]
 800fbee:	3307      	adds	r3, #7
 800fbf0:	f023 0307 	bic.w	r3, r3, #7
 800fbf4:	3308      	adds	r3, #8
 800fbf6:	9303      	str	r3, [sp, #12]
 800fbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfa:	443b      	add	r3, r7
 800fbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbfe:	e767      	b.n	800fad0 <_vfiprintf_r+0x94>
 800fc00:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc04:	460c      	mov	r4, r1
 800fc06:	2001      	movs	r0, #1
 800fc08:	e7a5      	b.n	800fb56 <_vfiprintf_r+0x11a>
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	3401      	adds	r4, #1
 800fc0e:	9305      	str	r3, [sp, #20]
 800fc10:	4619      	mov	r1, r3
 800fc12:	f04f 0c0a 	mov.w	ip, #10
 800fc16:	4620      	mov	r0, r4
 800fc18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc1c:	3a30      	subs	r2, #48	; 0x30
 800fc1e:	2a09      	cmp	r2, #9
 800fc20:	d903      	bls.n	800fc2a <_vfiprintf_r+0x1ee>
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d0c5      	beq.n	800fbb2 <_vfiprintf_r+0x176>
 800fc26:	9105      	str	r1, [sp, #20]
 800fc28:	e7c3      	b.n	800fbb2 <_vfiprintf_r+0x176>
 800fc2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc2e:	4604      	mov	r4, r0
 800fc30:	2301      	movs	r3, #1
 800fc32:	e7f0      	b.n	800fc16 <_vfiprintf_r+0x1da>
 800fc34:	ab03      	add	r3, sp, #12
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	462a      	mov	r2, r5
 800fc3a:	4b16      	ldr	r3, [pc, #88]	; (800fc94 <_vfiprintf_r+0x258>)
 800fc3c:	a904      	add	r1, sp, #16
 800fc3e:	4630      	mov	r0, r6
 800fc40:	f3af 8000 	nop.w
 800fc44:	4607      	mov	r7, r0
 800fc46:	1c78      	adds	r0, r7, #1
 800fc48:	d1d6      	bne.n	800fbf8 <_vfiprintf_r+0x1bc>
 800fc4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc4c:	07d9      	lsls	r1, r3, #31
 800fc4e:	d405      	bmi.n	800fc5c <_vfiprintf_r+0x220>
 800fc50:	89ab      	ldrh	r3, [r5, #12]
 800fc52:	059a      	lsls	r2, r3, #22
 800fc54:	d402      	bmi.n	800fc5c <_vfiprintf_r+0x220>
 800fc56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc58:	f7ff fc53 	bl	800f502 <__retarget_lock_release_recursive>
 800fc5c:	89ab      	ldrh	r3, [r5, #12]
 800fc5e:	065b      	lsls	r3, r3, #25
 800fc60:	f53f af12 	bmi.w	800fa88 <_vfiprintf_r+0x4c>
 800fc64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc66:	e711      	b.n	800fa8c <_vfiprintf_r+0x50>
 800fc68:	ab03      	add	r3, sp, #12
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	462a      	mov	r2, r5
 800fc6e:	4b09      	ldr	r3, [pc, #36]	; (800fc94 <_vfiprintf_r+0x258>)
 800fc70:	a904      	add	r1, sp, #16
 800fc72:	4630      	mov	r0, r6
 800fc74:	f000 f880 	bl	800fd78 <_printf_i>
 800fc78:	e7e4      	b.n	800fc44 <_vfiprintf_r+0x208>
 800fc7a:	bf00      	nop
 800fc7c:	08012f24 	.word	0x08012f24
 800fc80:	08012f44 	.word	0x08012f44
 800fc84:	08012f04 	.word	0x08012f04
 800fc88:	08012f64 	.word	0x08012f64
 800fc8c:	08012f6e 	.word	0x08012f6e
 800fc90:	00000000 	.word	0x00000000
 800fc94:	0800fa17 	.word	0x0800fa17
 800fc98:	08012f6a 	.word	0x08012f6a

0800fc9c <_printf_common>:
 800fc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fca0:	4616      	mov	r6, r2
 800fca2:	4699      	mov	r9, r3
 800fca4:	688a      	ldr	r2, [r1, #8]
 800fca6:	690b      	ldr	r3, [r1, #16]
 800fca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcac:	4293      	cmp	r3, r2
 800fcae:	bfb8      	it	lt
 800fcb0:	4613      	movlt	r3, r2
 800fcb2:	6033      	str	r3, [r6, #0]
 800fcb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcb8:	4607      	mov	r7, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	b10a      	cbz	r2, 800fcc2 <_printf_common+0x26>
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	6033      	str	r3, [r6, #0]
 800fcc2:	6823      	ldr	r3, [r4, #0]
 800fcc4:	0699      	lsls	r1, r3, #26
 800fcc6:	bf42      	ittt	mi
 800fcc8:	6833      	ldrmi	r3, [r6, #0]
 800fcca:	3302      	addmi	r3, #2
 800fccc:	6033      	strmi	r3, [r6, #0]
 800fcce:	6825      	ldr	r5, [r4, #0]
 800fcd0:	f015 0506 	ands.w	r5, r5, #6
 800fcd4:	d106      	bne.n	800fce4 <_printf_common+0x48>
 800fcd6:	f104 0a19 	add.w	sl, r4, #25
 800fcda:	68e3      	ldr	r3, [r4, #12]
 800fcdc:	6832      	ldr	r2, [r6, #0]
 800fcde:	1a9b      	subs	r3, r3, r2
 800fce0:	42ab      	cmp	r3, r5
 800fce2:	dc26      	bgt.n	800fd32 <_printf_common+0x96>
 800fce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fce8:	1e13      	subs	r3, r2, #0
 800fcea:	6822      	ldr	r2, [r4, #0]
 800fcec:	bf18      	it	ne
 800fcee:	2301      	movne	r3, #1
 800fcf0:	0692      	lsls	r2, r2, #26
 800fcf2:	d42b      	bmi.n	800fd4c <_printf_common+0xb0>
 800fcf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcf8:	4649      	mov	r1, r9
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	47c0      	blx	r8
 800fcfe:	3001      	adds	r0, #1
 800fd00:	d01e      	beq.n	800fd40 <_printf_common+0xa4>
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	68e5      	ldr	r5, [r4, #12]
 800fd06:	6832      	ldr	r2, [r6, #0]
 800fd08:	f003 0306 	and.w	r3, r3, #6
 800fd0c:	2b04      	cmp	r3, #4
 800fd0e:	bf08      	it	eq
 800fd10:	1aad      	subeq	r5, r5, r2
 800fd12:	68a3      	ldr	r3, [r4, #8]
 800fd14:	6922      	ldr	r2, [r4, #16]
 800fd16:	bf0c      	ite	eq
 800fd18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd1c:	2500      	movne	r5, #0
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	bfc4      	itt	gt
 800fd22:	1a9b      	subgt	r3, r3, r2
 800fd24:	18ed      	addgt	r5, r5, r3
 800fd26:	2600      	movs	r6, #0
 800fd28:	341a      	adds	r4, #26
 800fd2a:	42b5      	cmp	r5, r6
 800fd2c:	d11a      	bne.n	800fd64 <_printf_common+0xc8>
 800fd2e:	2000      	movs	r0, #0
 800fd30:	e008      	b.n	800fd44 <_printf_common+0xa8>
 800fd32:	2301      	movs	r3, #1
 800fd34:	4652      	mov	r2, sl
 800fd36:	4649      	mov	r1, r9
 800fd38:	4638      	mov	r0, r7
 800fd3a:	47c0      	blx	r8
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	d103      	bne.n	800fd48 <_printf_common+0xac>
 800fd40:	f04f 30ff 	mov.w	r0, #4294967295
 800fd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd48:	3501      	adds	r5, #1
 800fd4a:	e7c6      	b.n	800fcda <_printf_common+0x3e>
 800fd4c:	18e1      	adds	r1, r4, r3
 800fd4e:	1c5a      	adds	r2, r3, #1
 800fd50:	2030      	movs	r0, #48	; 0x30
 800fd52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd56:	4422      	add	r2, r4
 800fd58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd60:	3302      	adds	r3, #2
 800fd62:	e7c7      	b.n	800fcf4 <_printf_common+0x58>
 800fd64:	2301      	movs	r3, #1
 800fd66:	4622      	mov	r2, r4
 800fd68:	4649      	mov	r1, r9
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	47c0      	blx	r8
 800fd6e:	3001      	adds	r0, #1
 800fd70:	d0e6      	beq.n	800fd40 <_printf_common+0xa4>
 800fd72:	3601      	adds	r6, #1
 800fd74:	e7d9      	b.n	800fd2a <_printf_common+0x8e>
	...

0800fd78 <_printf_i>:
 800fd78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	4691      	mov	r9, r2
 800fd80:	7e27      	ldrb	r7, [r4, #24]
 800fd82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fd84:	2f78      	cmp	r7, #120	; 0x78
 800fd86:	4680      	mov	r8, r0
 800fd88:	469a      	mov	sl, r3
 800fd8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd8e:	d807      	bhi.n	800fda0 <_printf_i+0x28>
 800fd90:	2f62      	cmp	r7, #98	; 0x62
 800fd92:	d80a      	bhi.n	800fdaa <_printf_i+0x32>
 800fd94:	2f00      	cmp	r7, #0
 800fd96:	f000 80d8 	beq.w	800ff4a <_printf_i+0x1d2>
 800fd9a:	2f58      	cmp	r7, #88	; 0x58
 800fd9c:	f000 80a3 	beq.w	800fee6 <_printf_i+0x16e>
 800fda0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fda4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fda8:	e03a      	b.n	800fe20 <_printf_i+0xa8>
 800fdaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdae:	2b15      	cmp	r3, #21
 800fdb0:	d8f6      	bhi.n	800fda0 <_printf_i+0x28>
 800fdb2:	a001      	add	r0, pc, #4	; (adr r0, 800fdb8 <_printf_i+0x40>)
 800fdb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fdb8:	0800fe11 	.word	0x0800fe11
 800fdbc:	0800fe25 	.word	0x0800fe25
 800fdc0:	0800fda1 	.word	0x0800fda1
 800fdc4:	0800fda1 	.word	0x0800fda1
 800fdc8:	0800fda1 	.word	0x0800fda1
 800fdcc:	0800fda1 	.word	0x0800fda1
 800fdd0:	0800fe25 	.word	0x0800fe25
 800fdd4:	0800fda1 	.word	0x0800fda1
 800fdd8:	0800fda1 	.word	0x0800fda1
 800fddc:	0800fda1 	.word	0x0800fda1
 800fde0:	0800fda1 	.word	0x0800fda1
 800fde4:	0800ff31 	.word	0x0800ff31
 800fde8:	0800fe55 	.word	0x0800fe55
 800fdec:	0800ff13 	.word	0x0800ff13
 800fdf0:	0800fda1 	.word	0x0800fda1
 800fdf4:	0800fda1 	.word	0x0800fda1
 800fdf8:	0800ff53 	.word	0x0800ff53
 800fdfc:	0800fda1 	.word	0x0800fda1
 800fe00:	0800fe55 	.word	0x0800fe55
 800fe04:	0800fda1 	.word	0x0800fda1
 800fe08:	0800fda1 	.word	0x0800fda1
 800fe0c:	0800ff1b 	.word	0x0800ff1b
 800fe10:	680b      	ldr	r3, [r1, #0]
 800fe12:	1d1a      	adds	r2, r3, #4
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	600a      	str	r2, [r1, #0]
 800fe18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe20:	2301      	movs	r3, #1
 800fe22:	e0a3      	b.n	800ff6c <_printf_i+0x1f4>
 800fe24:	6825      	ldr	r5, [r4, #0]
 800fe26:	6808      	ldr	r0, [r1, #0]
 800fe28:	062e      	lsls	r6, r5, #24
 800fe2a:	f100 0304 	add.w	r3, r0, #4
 800fe2e:	d50a      	bpl.n	800fe46 <_printf_i+0xce>
 800fe30:	6805      	ldr	r5, [r0, #0]
 800fe32:	600b      	str	r3, [r1, #0]
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	da03      	bge.n	800fe40 <_printf_i+0xc8>
 800fe38:	232d      	movs	r3, #45	; 0x2d
 800fe3a:	426d      	negs	r5, r5
 800fe3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe40:	485e      	ldr	r0, [pc, #376]	; (800ffbc <_printf_i+0x244>)
 800fe42:	230a      	movs	r3, #10
 800fe44:	e019      	b.n	800fe7a <_printf_i+0x102>
 800fe46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe4a:	6805      	ldr	r5, [r0, #0]
 800fe4c:	600b      	str	r3, [r1, #0]
 800fe4e:	bf18      	it	ne
 800fe50:	b22d      	sxthne	r5, r5
 800fe52:	e7ef      	b.n	800fe34 <_printf_i+0xbc>
 800fe54:	680b      	ldr	r3, [r1, #0]
 800fe56:	6825      	ldr	r5, [r4, #0]
 800fe58:	1d18      	adds	r0, r3, #4
 800fe5a:	6008      	str	r0, [r1, #0]
 800fe5c:	0628      	lsls	r0, r5, #24
 800fe5e:	d501      	bpl.n	800fe64 <_printf_i+0xec>
 800fe60:	681d      	ldr	r5, [r3, #0]
 800fe62:	e002      	b.n	800fe6a <_printf_i+0xf2>
 800fe64:	0669      	lsls	r1, r5, #25
 800fe66:	d5fb      	bpl.n	800fe60 <_printf_i+0xe8>
 800fe68:	881d      	ldrh	r5, [r3, #0]
 800fe6a:	4854      	ldr	r0, [pc, #336]	; (800ffbc <_printf_i+0x244>)
 800fe6c:	2f6f      	cmp	r7, #111	; 0x6f
 800fe6e:	bf0c      	ite	eq
 800fe70:	2308      	moveq	r3, #8
 800fe72:	230a      	movne	r3, #10
 800fe74:	2100      	movs	r1, #0
 800fe76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe7a:	6866      	ldr	r6, [r4, #4]
 800fe7c:	60a6      	str	r6, [r4, #8]
 800fe7e:	2e00      	cmp	r6, #0
 800fe80:	bfa2      	ittt	ge
 800fe82:	6821      	ldrge	r1, [r4, #0]
 800fe84:	f021 0104 	bicge.w	r1, r1, #4
 800fe88:	6021      	strge	r1, [r4, #0]
 800fe8a:	b90d      	cbnz	r5, 800fe90 <_printf_i+0x118>
 800fe8c:	2e00      	cmp	r6, #0
 800fe8e:	d04d      	beq.n	800ff2c <_printf_i+0x1b4>
 800fe90:	4616      	mov	r6, r2
 800fe92:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe96:	fb03 5711 	mls	r7, r3, r1, r5
 800fe9a:	5dc7      	ldrb	r7, [r0, r7]
 800fe9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fea0:	462f      	mov	r7, r5
 800fea2:	42bb      	cmp	r3, r7
 800fea4:	460d      	mov	r5, r1
 800fea6:	d9f4      	bls.n	800fe92 <_printf_i+0x11a>
 800fea8:	2b08      	cmp	r3, #8
 800feaa:	d10b      	bne.n	800fec4 <_printf_i+0x14c>
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	07df      	lsls	r7, r3, #31
 800feb0:	d508      	bpl.n	800fec4 <_printf_i+0x14c>
 800feb2:	6923      	ldr	r3, [r4, #16]
 800feb4:	6861      	ldr	r1, [r4, #4]
 800feb6:	4299      	cmp	r1, r3
 800feb8:	bfde      	ittt	le
 800feba:	2330      	movle	r3, #48	; 0x30
 800febc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fec0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fec4:	1b92      	subs	r2, r2, r6
 800fec6:	6122      	str	r2, [r4, #16]
 800fec8:	f8cd a000 	str.w	sl, [sp]
 800fecc:	464b      	mov	r3, r9
 800fece:	aa03      	add	r2, sp, #12
 800fed0:	4621      	mov	r1, r4
 800fed2:	4640      	mov	r0, r8
 800fed4:	f7ff fee2 	bl	800fc9c <_printf_common>
 800fed8:	3001      	adds	r0, #1
 800feda:	d14c      	bne.n	800ff76 <_printf_i+0x1fe>
 800fedc:	f04f 30ff 	mov.w	r0, #4294967295
 800fee0:	b004      	add	sp, #16
 800fee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee6:	4835      	ldr	r0, [pc, #212]	; (800ffbc <_printf_i+0x244>)
 800fee8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	680e      	ldr	r6, [r1, #0]
 800fef0:	061f      	lsls	r7, r3, #24
 800fef2:	f856 5b04 	ldr.w	r5, [r6], #4
 800fef6:	600e      	str	r6, [r1, #0]
 800fef8:	d514      	bpl.n	800ff24 <_printf_i+0x1ac>
 800fefa:	07d9      	lsls	r1, r3, #31
 800fefc:	bf44      	itt	mi
 800fefe:	f043 0320 	orrmi.w	r3, r3, #32
 800ff02:	6023      	strmi	r3, [r4, #0]
 800ff04:	b91d      	cbnz	r5, 800ff0e <_printf_i+0x196>
 800ff06:	6823      	ldr	r3, [r4, #0]
 800ff08:	f023 0320 	bic.w	r3, r3, #32
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	2310      	movs	r3, #16
 800ff10:	e7b0      	b.n	800fe74 <_printf_i+0xfc>
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	f043 0320 	orr.w	r3, r3, #32
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	2378      	movs	r3, #120	; 0x78
 800ff1c:	4828      	ldr	r0, [pc, #160]	; (800ffc0 <_printf_i+0x248>)
 800ff1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff22:	e7e3      	b.n	800feec <_printf_i+0x174>
 800ff24:	065e      	lsls	r6, r3, #25
 800ff26:	bf48      	it	mi
 800ff28:	b2ad      	uxthmi	r5, r5
 800ff2a:	e7e6      	b.n	800fefa <_printf_i+0x182>
 800ff2c:	4616      	mov	r6, r2
 800ff2e:	e7bb      	b.n	800fea8 <_printf_i+0x130>
 800ff30:	680b      	ldr	r3, [r1, #0]
 800ff32:	6826      	ldr	r6, [r4, #0]
 800ff34:	6960      	ldr	r0, [r4, #20]
 800ff36:	1d1d      	adds	r5, r3, #4
 800ff38:	600d      	str	r5, [r1, #0]
 800ff3a:	0635      	lsls	r5, r6, #24
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	d501      	bpl.n	800ff44 <_printf_i+0x1cc>
 800ff40:	6018      	str	r0, [r3, #0]
 800ff42:	e002      	b.n	800ff4a <_printf_i+0x1d2>
 800ff44:	0671      	lsls	r1, r6, #25
 800ff46:	d5fb      	bpl.n	800ff40 <_printf_i+0x1c8>
 800ff48:	8018      	strh	r0, [r3, #0]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	6123      	str	r3, [r4, #16]
 800ff4e:	4616      	mov	r6, r2
 800ff50:	e7ba      	b.n	800fec8 <_printf_i+0x150>
 800ff52:	680b      	ldr	r3, [r1, #0]
 800ff54:	1d1a      	adds	r2, r3, #4
 800ff56:	600a      	str	r2, [r1, #0]
 800ff58:	681e      	ldr	r6, [r3, #0]
 800ff5a:	6862      	ldr	r2, [r4, #4]
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f7f0 f946 	bl	80001f0 <memchr>
 800ff64:	b108      	cbz	r0, 800ff6a <_printf_i+0x1f2>
 800ff66:	1b80      	subs	r0, r0, r6
 800ff68:	6060      	str	r0, [r4, #4]
 800ff6a:	6863      	ldr	r3, [r4, #4]
 800ff6c:	6123      	str	r3, [r4, #16]
 800ff6e:	2300      	movs	r3, #0
 800ff70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff74:	e7a8      	b.n	800fec8 <_printf_i+0x150>
 800ff76:	6923      	ldr	r3, [r4, #16]
 800ff78:	4632      	mov	r2, r6
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	47d0      	blx	sl
 800ff80:	3001      	adds	r0, #1
 800ff82:	d0ab      	beq.n	800fedc <_printf_i+0x164>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	079b      	lsls	r3, r3, #30
 800ff88:	d413      	bmi.n	800ffb2 <_printf_i+0x23a>
 800ff8a:	68e0      	ldr	r0, [r4, #12]
 800ff8c:	9b03      	ldr	r3, [sp, #12]
 800ff8e:	4298      	cmp	r0, r3
 800ff90:	bfb8      	it	lt
 800ff92:	4618      	movlt	r0, r3
 800ff94:	e7a4      	b.n	800fee0 <_printf_i+0x168>
 800ff96:	2301      	movs	r3, #1
 800ff98:	4632      	mov	r2, r6
 800ff9a:	4649      	mov	r1, r9
 800ff9c:	4640      	mov	r0, r8
 800ff9e:	47d0      	blx	sl
 800ffa0:	3001      	adds	r0, #1
 800ffa2:	d09b      	beq.n	800fedc <_printf_i+0x164>
 800ffa4:	3501      	adds	r5, #1
 800ffa6:	68e3      	ldr	r3, [r4, #12]
 800ffa8:	9903      	ldr	r1, [sp, #12]
 800ffaa:	1a5b      	subs	r3, r3, r1
 800ffac:	42ab      	cmp	r3, r5
 800ffae:	dcf2      	bgt.n	800ff96 <_printf_i+0x21e>
 800ffb0:	e7eb      	b.n	800ff8a <_printf_i+0x212>
 800ffb2:	2500      	movs	r5, #0
 800ffb4:	f104 0619 	add.w	r6, r4, #25
 800ffb8:	e7f5      	b.n	800ffa6 <_printf_i+0x22e>
 800ffba:	bf00      	nop
 800ffbc:	08012f75 	.word	0x08012f75
 800ffc0:	08012f86 	.word	0x08012f86

0800ffc4 <_sbrk_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d06      	ldr	r5, [pc, #24]	; (800ffe0 <_sbrk_r+0x1c>)
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4604      	mov	r4, r0
 800ffcc:	4608      	mov	r0, r1
 800ffce:	602b      	str	r3, [r5, #0]
 800ffd0:	f7f0 fd9a 	bl	8000b08 <_sbrk>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d102      	bne.n	800ffde <_sbrk_r+0x1a>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	b103      	cbz	r3, 800ffde <_sbrk_r+0x1a>
 800ffdc:	6023      	str	r3, [r4, #0]
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	20008430 	.word	0x20008430

0800ffe4 <__sread>:
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	460c      	mov	r4, r1
 800ffe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffec:	f000 f8ce 	bl	801018c <_read_r>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	bfab      	itete	ge
 800fff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fff6:	89a3      	ldrhlt	r3, [r4, #12]
 800fff8:	181b      	addge	r3, r3, r0
 800fffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fffe:	bfac      	ite	ge
 8010000:	6563      	strge	r3, [r4, #84]	; 0x54
 8010002:	81a3      	strhlt	r3, [r4, #12]
 8010004:	bd10      	pop	{r4, pc}

08010006 <__swrite>:
 8010006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000a:	461f      	mov	r7, r3
 801000c:	898b      	ldrh	r3, [r1, #12]
 801000e:	05db      	lsls	r3, r3, #23
 8010010:	4605      	mov	r5, r0
 8010012:	460c      	mov	r4, r1
 8010014:	4616      	mov	r6, r2
 8010016:	d505      	bpl.n	8010024 <__swrite+0x1e>
 8010018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801001c:	2302      	movs	r3, #2
 801001e:	2200      	movs	r2, #0
 8010020:	f000 f870 	bl	8010104 <_lseek_r>
 8010024:	89a3      	ldrh	r3, [r4, #12]
 8010026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801002a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801002e:	81a3      	strh	r3, [r4, #12]
 8010030:	4632      	mov	r2, r6
 8010032:	463b      	mov	r3, r7
 8010034:	4628      	mov	r0, r5
 8010036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801003a:	f000 b817 	b.w	801006c <_write_r>

0801003e <__sseek>:
 801003e:	b510      	push	{r4, lr}
 8010040:	460c      	mov	r4, r1
 8010042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010046:	f000 f85d 	bl	8010104 <_lseek_r>
 801004a:	1c43      	adds	r3, r0, #1
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	bf15      	itete	ne
 8010050:	6560      	strne	r0, [r4, #84]	; 0x54
 8010052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801005a:	81a3      	strheq	r3, [r4, #12]
 801005c:	bf18      	it	ne
 801005e:	81a3      	strhne	r3, [r4, #12]
 8010060:	bd10      	pop	{r4, pc}

08010062 <__sclose>:
 8010062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010066:	f000 b81b 	b.w	80100a0 <_close_r>
	...

0801006c <_write_r>:
 801006c:	b538      	push	{r3, r4, r5, lr}
 801006e:	4d07      	ldr	r5, [pc, #28]	; (801008c <_write_r+0x20>)
 8010070:	4604      	mov	r4, r0
 8010072:	4608      	mov	r0, r1
 8010074:	4611      	mov	r1, r2
 8010076:	2200      	movs	r2, #0
 8010078:	602a      	str	r2, [r5, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	f7f0 fcf3 	bl	8000a66 <_write>
 8010080:	1c43      	adds	r3, r0, #1
 8010082:	d102      	bne.n	801008a <_write_r+0x1e>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	b103      	cbz	r3, 801008a <_write_r+0x1e>
 8010088:	6023      	str	r3, [r4, #0]
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	20008430 	.word	0x20008430

08010090 <abort>:
 8010090:	b508      	push	{r3, lr}
 8010092:	2006      	movs	r0, #6
 8010094:	f000 f8b4 	bl	8010200 <raise>
 8010098:	2001      	movs	r0, #1
 801009a:	f7f0 fcbd 	bl	8000a18 <_exit>
	...

080100a0 <_close_r>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	4d06      	ldr	r5, [pc, #24]	; (80100bc <_close_r+0x1c>)
 80100a4:	2300      	movs	r3, #0
 80100a6:	4604      	mov	r4, r0
 80100a8:	4608      	mov	r0, r1
 80100aa:	602b      	str	r3, [r5, #0]
 80100ac:	f7f0 fcf7 	bl	8000a9e <_close>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_close_r+0x1a>
 80100b4:	682b      	ldr	r3, [r5, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_close_r+0x1a>
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	20008430 	.word	0x20008430

080100c0 <_fstat_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4d07      	ldr	r5, [pc, #28]	; (80100e0 <_fstat_r+0x20>)
 80100c4:	2300      	movs	r3, #0
 80100c6:	4604      	mov	r4, r0
 80100c8:	4608      	mov	r0, r1
 80100ca:	4611      	mov	r1, r2
 80100cc:	602b      	str	r3, [r5, #0]
 80100ce:	f7f0 fcf2 	bl	8000ab6 <_fstat>
 80100d2:	1c43      	adds	r3, r0, #1
 80100d4:	d102      	bne.n	80100dc <_fstat_r+0x1c>
 80100d6:	682b      	ldr	r3, [r5, #0]
 80100d8:	b103      	cbz	r3, 80100dc <_fstat_r+0x1c>
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	bd38      	pop	{r3, r4, r5, pc}
 80100de:	bf00      	nop
 80100e0:	20008430 	.word	0x20008430

080100e4 <_isatty_r>:
 80100e4:	b538      	push	{r3, r4, r5, lr}
 80100e6:	4d06      	ldr	r5, [pc, #24]	; (8010100 <_isatty_r+0x1c>)
 80100e8:	2300      	movs	r3, #0
 80100ea:	4604      	mov	r4, r0
 80100ec:	4608      	mov	r0, r1
 80100ee:	602b      	str	r3, [r5, #0]
 80100f0:	f7f0 fcf1 	bl	8000ad6 <_isatty>
 80100f4:	1c43      	adds	r3, r0, #1
 80100f6:	d102      	bne.n	80100fe <_isatty_r+0x1a>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	b103      	cbz	r3, 80100fe <_isatty_r+0x1a>
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
 8010100:	20008430 	.word	0x20008430

08010104 <_lseek_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	4d07      	ldr	r5, [pc, #28]	; (8010124 <_lseek_r+0x20>)
 8010108:	4604      	mov	r4, r0
 801010a:	4608      	mov	r0, r1
 801010c:	4611      	mov	r1, r2
 801010e:	2200      	movs	r2, #0
 8010110:	602a      	str	r2, [r5, #0]
 8010112:	461a      	mov	r2, r3
 8010114:	f7f0 fcea 	bl	8000aec <_lseek>
 8010118:	1c43      	adds	r3, r0, #1
 801011a:	d102      	bne.n	8010122 <_lseek_r+0x1e>
 801011c:	682b      	ldr	r3, [r5, #0]
 801011e:	b103      	cbz	r3, 8010122 <_lseek_r+0x1e>
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	bd38      	pop	{r3, r4, r5, pc}
 8010124:	20008430 	.word	0x20008430

08010128 <__malloc_lock>:
 8010128:	4801      	ldr	r0, [pc, #4]	; (8010130 <__malloc_lock+0x8>)
 801012a:	f7ff b9e9 	b.w	800f500 <__retarget_lock_acquire_recursive>
 801012e:	bf00      	nop
 8010130:	20008438 	.word	0x20008438

08010134 <__malloc_unlock>:
 8010134:	4801      	ldr	r0, [pc, #4]	; (801013c <__malloc_unlock+0x8>)
 8010136:	f7ff b9e4 	b.w	800f502 <__retarget_lock_release_recursive>
 801013a:	bf00      	nop
 801013c:	20008438 	.word	0x20008438

08010140 <_realloc_r>:
 8010140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010142:	4607      	mov	r7, r0
 8010144:	4614      	mov	r4, r2
 8010146:	460e      	mov	r6, r1
 8010148:	b921      	cbnz	r1, 8010154 <_realloc_r+0x14>
 801014a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801014e:	4611      	mov	r1, r2
 8010150:	f7ff ba94 	b.w	800f67c <_malloc_r>
 8010154:	b922      	cbnz	r2, 8010160 <_realloc_r+0x20>
 8010156:	f7ff fa41 	bl	800f5dc <_free_r>
 801015a:	4625      	mov	r5, r4
 801015c:	4628      	mov	r0, r5
 801015e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010160:	f000 f86a 	bl	8010238 <_malloc_usable_size_r>
 8010164:	42a0      	cmp	r0, r4
 8010166:	d20f      	bcs.n	8010188 <_realloc_r+0x48>
 8010168:	4621      	mov	r1, r4
 801016a:	4638      	mov	r0, r7
 801016c:	f7ff fa86 	bl	800f67c <_malloc_r>
 8010170:	4605      	mov	r5, r0
 8010172:	2800      	cmp	r0, #0
 8010174:	d0f2      	beq.n	801015c <_realloc_r+0x1c>
 8010176:	4631      	mov	r1, r6
 8010178:	4622      	mov	r2, r4
 801017a:	f7fe fde7 	bl	800ed4c <memcpy>
 801017e:	4631      	mov	r1, r6
 8010180:	4638      	mov	r0, r7
 8010182:	f7ff fa2b 	bl	800f5dc <_free_r>
 8010186:	e7e9      	b.n	801015c <_realloc_r+0x1c>
 8010188:	4635      	mov	r5, r6
 801018a:	e7e7      	b.n	801015c <_realloc_r+0x1c>

0801018c <_read_r>:
 801018c:	b538      	push	{r3, r4, r5, lr}
 801018e:	4d07      	ldr	r5, [pc, #28]	; (80101ac <_read_r+0x20>)
 8010190:	4604      	mov	r4, r0
 8010192:	4608      	mov	r0, r1
 8010194:	4611      	mov	r1, r2
 8010196:	2200      	movs	r2, #0
 8010198:	602a      	str	r2, [r5, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	f7f0 fc46 	bl	8000a2c <_read>
 80101a0:	1c43      	adds	r3, r0, #1
 80101a2:	d102      	bne.n	80101aa <_read_r+0x1e>
 80101a4:	682b      	ldr	r3, [r5, #0]
 80101a6:	b103      	cbz	r3, 80101aa <_read_r+0x1e>
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	bd38      	pop	{r3, r4, r5, pc}
 80101ac:	20008430 	.word	0x20008430

080101b0 <_raise_r>:
 80101b0:	291f      	cmp	r1, #31
 80101b2:	b538      	push	{r3, r4, r5, lr}
 80101b4:	4604      	mov	r4, r0
 80101b6:	460d      	mov	r5, r1
 80101b8:	d904      	bls.n	80101c4 <_raise_r+0x14>
 80101ba:	2316      	movs	r3, #22
 80101bc:	6003      	str	r3, [r0, #0]
 80101be:	f04f 30ff 	mov.w	r0, #4294967295
 80101c2:	bd38      	pop	{r3, r4, r5, pc}
 80101c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101c6:	b112      	cbz	r2, 80101ce <_raise_r+0x1e>
 80101c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101cc:	b94b      	cbnz	r3, 80101e2 <_raise_r+0x32>
 80101ce:	4620      	mov	r0, r4
 80101d0:	f000 f830 	bl	8010234 <_getpid_r>
 80101d4:	462a      	mov	r2, r5
 80101d6:	4601      	mov	r1, r0
 80101d8:	4620      	mov	r0, r4
 80101da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101de:	f000 b817 	b.w	8010210 <_kill_r>
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d00a      	beq.n	80101fc <_raise_r+0x4c>
 80101e6:	1c59      	adds	r1, r3, #1
 80101e8:	d103      	bne.n	80101f2 <_raise_r+0x42>
 80101ea:	2316      	movs	r3, #22
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	2001      	movs	r0, #1
 80101f0:	e7e7      	b.n	80101c2 <_raise_r+0x12>
 80101f2:	2400      	movs	r4, #0
 80101f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101f8:	4628      	mov	r0, r5
 80101fa:	4798      	blx	r3
 80101fc:	2000      	movs	r0, #0
 80101fe:	e7e0      	b.n	80101c2 <_raise_r+0x12>

08010200 <raise>:
 8010200:	4b02      	ldr	r3, [pc, #8]	; (801020c <raise+0xc>)
 8010202:	4601      	mov	r1, r0
 8010204:	6818      	ldr	r0, [r3, #0]
 8010206:	f7ff bfd3 	b.w	80101b0 <_raise_r>
 801020a:	bf00      	nop
 801020c:	2000002c 	.word	0x2000002c

08010210 <_kill_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4d07      	ldr	r5, [pc, #28]	; (8010230 <_kill_r+0x20>)
 8010214:	2300      	movs	r3, #0
 8010216:	4604      	mov	r4, r0
 8010218:	4608      	mov	r0, r1
 801021a:	4611      	mov	r1, r2
 801021c:	602b      	str	r3, [r5, #0]
 801021e:	f7f0 fbe9 	bl	80009f4 <_kill>
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	d102      	bne.n	801022c <_kill_r+0x1c>
 8010226:	682b      	ldr	r3, [r5, #0]
 8010228:	b103      	cbz	r3, 801022c <_kill_r+0x1c>
 801022a:	6023      	str	r3, [r4, #0]
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	bf00      	nop
 8010230:	20008430 	.word	0x20008430

08010234 <_getpid_r>:
 8010234:	f7f0 bbd6 	b.w	80009e4 <_getpid>

08010238 <_malloc_usable_size_r>:
 8010238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801023c:	1f18      	subs	r0, r3, #4
 801023e:	2b00      	cmp	r3, #0
 8010240:	bfbc      	itt	lt
 8010242:	580b      	ldrlt	r3, [r1, r0]
 8010244:	18c0      	addlt	r0, r0, r3
 8010246:	4770      	bx	lr

08010248 <_init>:
 8010248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024a:	bf00      	nop
 801024c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801024e:	bc08      	pop	{r3}
 8010250:	469e      	mov	lr, r3
 8010252:	4770      	bx	lr

08010254 <_fini>:
 8010254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010256:	bf00      	nop
 8010258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801025a:	bc08      	pop	{r3}
 801025c:	469e      	mov	lr, r3
 801025e:	4770      	bx	lr
